<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Autoconf on Ally Petitt</title>
    <link>https://ally-petitt.github.io:443/en/tags/autoconf/</link>
    <description>Recent content in Autoconf on Ally Petitt</description>
    <generator>Hugo -- 0.125.4</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ally-petitt.github.io:443/en/tags/autoconf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stealthy Exploit Opens Door for Pre-Compilation Code Execution</title>
      <link>https://ally-petitt.github.io:443/en/posts/2023-12-02_stealthy-exploit-opens-door-for-pre-compilation-code-execution-17a57b9585cb/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.github.io:443/en/posts/2023-12-02_stealthy-exploit-opens-door-for-pre-compilation-code-execution-17a57b9585cb/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*XwuUEqGz-1xT_v_j.jpg&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://img.rasset.ie/001babea-1600.jpg&#34;&gt;https://img.rasset.ie/001babea-1600.jpg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Linux users often take pride in their ability to compile their own code. In spite of this, a subtle yet critical attack vector has existed for over 20 years with high potential impact when exploited. Cleverly disguised within the &lt;code&gt;configure.ac&lt;/code&gt; file, this attack vector allows malicious actors to execute code on your system before the compilation process even begins.&lt;/p&gt;
&lt;p&gt;While the absence of known exploits may lull users into a false sense of security, it is precisely this lack of awareness that makes this attack vector dangerous, increasing the chances of successful and large-scale exploitation.&lt;/p&gt;
&lt;p&gt;The security concern that I am referring to is the ability to execute arbitrary code through &lt;code&gt;autoconf&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;what-is-autoconf&#34;&gt;What is Autoconf?&lt;/h1&gt;
&lt;p&gt;Traditionally, developers have used a &lt;a href=&#34;https://www.gnu.org/software/automake/manual/html_node/GNU-Build-System.html&#34;&gt;build system&lt;/a&gt; in order to distribute software packages that are easy for clients to compile. These build steps are specified in a Makefile.&lt;/p&gt;
&lt;p&gt;Different systems have different requirements. Sometimes, they require different flags to be set during compilation and sometimes the compiler is referred to by a different name. With such a diverse array of systems and configurations to cater to, Autoconf was offered as a solution.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*WhDuZ1uRN5oHHeR9&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;GNU Logo&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Autoconf is a crucial part of the GNU Autotools project and it ensures that packages are portable across different systems. It accomplishes this through macros from the M4 programming language to create a shell script that configures software source code packages for the respective system (see the &lt;a href=&#34;https://github.com/autotools-mirror/autoconf&#34;&gt;README&lt;/a&gt; for more information).&lt;/p&gt;
&lt;h1 id=&#34;how-does-autoconfwork&#34;&gt;How Does Autoconf Work?&lt;/h1&gt;
&lt;p&gt;Autoconf is one of the first commands executed when building a package that follows &lt;a href=&#34;https://www.gnu.org/prep/standards/standards.html&#34;&gt;GNU Coding Standards&lt;/a&gt; (which is a lot of packages). If not called directly, it is often included in an &lt;code&gt;autogen.sh&lt;/code&gt; script. The program uses instructions from a &lt;code&gt;configure.ac&lt;/code&gt; file to generate a dynamic &lt;code&gt;configure&lt;/code&gt;bash script that is responsible for matching the libraries on the system to those required in the program.&lt;/p&gt;
&lt;h1 id=&#34;the-securityconcern&#34;&gt;The Security Concern&lt;/h1&gt;
&lt;p&gt;Because Autoconf interprets user-controlled input through the &lt;code&gt;configure.ac&lt;/code&gt; file, it is possible to insert malicious code that gets executed upon the running the generated &lt;code&gt;configure&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Furthermore, and increasingly concerning, is the possibility of obtaining code execution upon execution of the &lt;code&gt;autoconf&lt;/code&gt; command- before the generated &lt;code&gt;configure&lt;/code&gt; file is even ran. This means one less step in order to pwn a computer.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Hgtdvi95rRshZbBM.png&#34; alt=&#34;&#34;  /&gt;

For example, hackers can embed a malicious payload within the &lt;code&gt;configure.ac&lt;/code&gt; file and when an unsuspecting Linux user begins building the package, the attacker-controlled code would be executed on the system.&lt;/p&gt;
&lt;p&gt;This can be abused to perform targeted cyberattacks on developers, general Linux users, security researchers, and more if the supply chain is compromised. Additionally, because this is not well-known, modern code-scanning and SAST solutions often fail to include checks for malicious code within &lt;code&gt;configure.ac&lt;/code&gt;, decreasing the chance of detection.&lt;/p&gt;
&lt;p&gt;I discuss exactly how to exploit this in my &lt;a href=&#34;https://github.com/ally-petitt/autoconf-code-execution&#34;&gt;Proof-of-Concept&lt;/a&gt; on GitHub, which was published after receiving permission from the Autoconf maintainers to publicly disclose my concerns.&lt;/p&gt;
&lt;h1 id=&#34;how-hard-was-this-tofind&#34;&gt;How Hard Was This To Find?&lt;/h1&gt;
&lt;p&gt;I want to briefly explain the ease with which I was able to uncover this potentially dangerous functionality. First, I identified the programming language being used was M4, so I read &lt;a href=&#34;https://mbreen.com/m4.html&#34;&gt;core notes&lt;/a&gt; for approximately 30 minutes to get a high-level overview of the language.&lt;/p&gt;
&lt;p&gt;After experimenting with the functionality and realizing that it was possible to embed bash code in the created &lt;code&gt;configure&lt;/code&gt; script, I wondered if I could take it a step further and get code execution from running &lt;code&gt;autoconf&lt;/code&gt; alone.&lt;/p&gt;
&lt;p&gt;Within 2 hours of combing through the source code to learn how the application works, I identified 3 potential locations for code to be executed. I then created a &lt;a href=&#34;https://github.com/ally-petitt/autoconf-code-execution&#34;&gt;PoC&lt;/a&gt; to submit in a bug report to the Autoconf maintainers.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*H4i_I34WTV0KbZE5&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://seeklogo.com/images/M/m4-logo-88B85DB5FB-seeklogo.com.png&#34;&gt;https://seeklogo.com/images/M/m4-logo-88B85DB5FB-seeklogo.com.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My findings were low-hanging fruits and I suspect they have only gone this long without being abused because of the learning curve to understand M4. As you will see in the next segment, I am far from the first to know of this functionality.&lt;/p&gt;
&lt;h1 id=&#34;autoconfs-response&#34;&gt;Autoconf’s Response&lt;/h1&gt;
&lt;p&gt;Since 2/3 of my concerns came from a segment of legacy code that has been unused since the year 2000, one of the maintainers removed the macro in &lt;a href=&#34;https://git.savannah.gnu.org/cgit/autoconf.git/commit/?id=11d8824daada20055c855f46ad7c45237c1ff455&#34;&gt;this commit&lt;/a&gt; and thanked me for bringing the unused code snippets to their attention.&lt;/p&gt;
&lt;p&gt;They explained to me that there were plenty of opportunities to execute code when using Autoconf and that the ability to invoke macros such as &lt;code&gt;m4_syscmd&lt;/code&gt;, allowing for code execution, was a conscious design decision as many of their users rely on that functionality. In fact, it is common for &lt;code&gt;m4_syscmd&lt;/code&gt; to be used to run commands such as &lt;code&gt;git describe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another of the points in my PoC was that they included a macro that executed the &lt;code&gt;cat&lt;/code&gt; command without an absolute path. This made the program vulnerable to the modification of a $PATH environmental variable which could lead to execute arbitrary code execution and privilege escalation under the correct circumstances.&lt;/p&gt;
&lt;p&gt;The maintainers explained that adding an absolute path to the binary would break Nix, Guix, and more. They made the assumption that Autoconf is being run in an environment with a secure $PATH within a sandbox, which is consistent with best practices. However, I have strong doubts that the majority of users actually follow these precautions.&lt;/p&gt;
&lt;h1 id=&#34;implications&#34;&gt;Implications&lt;/h1&gt;
&lt;p&gt;I want to be clear that I respect the maintainers and the effort and time they have put into creating a tool that we have all benefited from. The ability to execute OS commands is not inherently dangerous, but when abused it can certainly have security implications.&lt;/p&gt;
&lt;p&gt;Given the reliance on &lt;code&gt;m4_syscmd&lt;/code&gt; by Autoconf’s clientele, it is clear to me that the maintainers have no plans of removing the functionality. The ability to execute arbitrary code upon running &lt;code&gt;autoconf&lt;/code&gt; will remain in the foreseeable future, making it an even more attractive attack vector for adversaries.&lt;/p&gt;
&lt;p&gt;In fact, the manner in which this functionality is built-in is reminiscent of attack techniques displayed in &lt;a href=&#34;https://gtfobins.github.io/&#34;&gt;GTFObins&lt;/a&gt;, which are often used for privilege escalation.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The ability to run commands from Autoconf is a feature, not a bug. However, it is a feature that can be abused in a way that very few people are aware of. And when exploited strategically, this can lead to the infection or damage of thousands of devices.&lt;/p&gt;
&lt;p&gt;I hope that in writing this, I was able to bring awareness to open-source users on the potential dangers of configuring untrusted applications. If you have any questions, concerns, or criticisms on this article, feel free to message me on &lt;a href=&#34;https://www.linkedin.com/in/ally-petitt/&#34;&gt;LinkedIn&lt;/a&gt; and I will be happy to discuss them with you.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*XwuUEqGz-1xT_v_j.jpg" alt=""  />

<em><a href="https://img.rasset.ie/001babea-1600.jpg">https://img.rasset.ie/001babea-1600.jpg</a></em></p>
<h1 id="introduction">Introduction</h1>
<p>Linux users often take pride in their ability to compile their own code. In spite of this, a subtle yet critical attack vector has existed for over 20 years with high potential impact when exploited. Cleverly disguised within the <code>configure.ac</code> file, this attack vector allows malicious actors to execute code on your system before the compilation process even begins.</p>
<p>While the absence of known exploits may lull users into a false sense of security, it is precisely this lack of awareness that makes this attack vector dangerous, increasing the chances of successful and large-scale exploitation.</p>
<p>The security concern that I am referring to is the ability to execute arbitrary code through <code>autoconf</code>.</p>
<h1 id="what-is-autoconf">What is Autoconf?</h1>
<p>Traditionally, developers have used a <a href="https://www.gnu.org/software/automake/manual/html_node/GNU-Build-System.html">build system</a> in order to distribute software packages that are easy for clients to compile. These build steps are specified in a Makefile.</p>
<p>Different systems have different requirements. Sometimes, they require different flags to be set during compilation and sometimes the compiler is referred to by a different name. With such a diverse array of systems and configurations to cater to, Autoconf was offered as a solution.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*WhDuZ1uRN5oHHeR9" alt=""  />

<em>GNU Logo</em></p>
<p>Autoconf is a crucial part of the GNU Autotools project and it ensures that packages are portable across different systems. It accomplishes this through macros from the M4 programming language to create a shell script that configures software source code packages for the respective system (see the <a href="https://github.com/autotools-mirror/autoconf">README</a> for more information).</p>
<h1 id="how-does-autoconfwork">How Does Autoconf Work?</h1>
<p>Autoconf is one of the first commands executed when building a package that follows <a href="https://www.gnu.org/prep/standards/standards.html">GNU Coding Standards</a> (which is a lot of packages). If not called directly, it is often included in an <code>autogen.sh</code> script. The program uses instructions from a <code>configure.ac</code> file to generate a dynamic <code>configure</code>bash script that is responsible for matching the libraries on the system to those required in the program.</p>
<h1 id="the-securityconcern">The Security Concern</h1>
<p>Because Autoconf interprets user-controlled input through the <code>configure.ac</code> file, it is possible to insert malicious code that gets executed upon the running the generated <code>configure</code> file.</p>
<p>Furthermore, and increasingly concerning, is the possibility of obtaining code execution upon execution of the <code>autoconf</code> command- before the generated <code>configure</code> file is even ran. This means one less step in order to pwn a computer.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*Hgtdvi95rRshZbBM.png" alt=""  />

For example, hackers can embed a malicious payload within the <code>configure.ac</code> file and when an unsuspecting Linux user begins building the package, the attacker-controlled code would be executed on the system.</p>
<p>This can be abused to perform targeted cyberattacks on developers, general Linux users, security researchers, and more if the supply chain is compromised. Additionally, because this is not well-known, modern code-scanning and SAST solutions often fail to include checks for malicious code within <code>configure.ac</code>, decreasing the chance of detection.</p>
<p>I discuss exactly how to exploit this in my <a href="https://github.com/ally-petitt/autoconf-code-execution">Proof-of-Concept</a> on GitHub, which was published after receiving permission from the Autoconf maintainers to publicly disclose my concerns.</p>
<h1 id="how-hard-was-this-tofind">How Hard Was This To Find?</h1>
<p>I want to briefly explain the ease with which I was able to uncover this potentially dangerous functionality. First, I identified the programming language being used was M4, so I read <a href="https://mbreen.com/m4.html">core notes</a> for approximately 30 minutes to get a high-level overview of the language.</p>
<p>After experimenting with the functionality and realizing that it was possible to embed bash code in the created <code>configure</code> script, I wondered if I could take it a step further and get code execution from running <code>autoconf</code> alone.</p>
<p>Within 2 hours of combing through the source code to learn how the application works, I identified 3 potential locations for code to be executed. I then created a <a href="https://github.com/ally-petitt/autoconf-code-execution">PoC</a> to submit in a bug report to the Autoconf maintainers.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*H4i_I34WTV0KbZE5" alt=""  />

<em><a href="https://seeklogo.com/images/M/m4-logo-88B85DB5FB-seeklogo.com.png">https://seeklogo.com/images/M/m4-logo-88B85DB5FB-seeklogo.com.png</a></em></p>
<p>My findings were low-hanging fruits and I suspect they have only gone this long without being abused because of the learning curve to understand M4. As you will see in the next segment, I am far from the first to know of this functionality.</p>
<h1 id="autoconfs-response">Autoconf’s Response</h1>
<p>Since 2/3 of my concerns came from a segment of legacy code that has been unused since the year 2000, one of the maintainers removed the macro in <a href="https://git.savannah.gnu.org/cgit/autoconf.git/commit/?id=11d8824daada20055c855f46ad7c45237c1ff455">this commit</a> and thanked me for bringing the unused code snippets to their attention.</p>
<p>They explained to me that there were plenty of opportunities to execute code when using Autoconf and that the ability to invoke macros such as <code>m4_syscmd</code>, allowing for code execution, was a conscious design decision as many of their users rely on that functionality. In fact, it is common for <code>m4_syscmd</code> to be used to run commands such as <code>git describe</code>.</p>
<p>Another of the points in my PoC was that they included a macro that executed the <code>cat</code> command without an absolute path. This made the program vulnerable to the modification of a $PATH environmental variable which could lead to execute arbitrary code execution and privilege escalation under the correct circumstances.</p>
<p>The maintainers explained that adding an absolute path to the binary would break Nix, Guix, and more. They made the assumption that Autoconf is being run in an environment with a secure $PATH within a sandbox, which is consistent with best practices. However, I have strong doubts that the majority of users actually follow these precautions.</p>
<h1 id="implications">Implications</h1>
<p>I want to be clear that I respect the maintainers and the effort and time they have put into creating a tool that we have all benefited from. The ability to execute OS commands is not inherently dangerous, but when abused it can certainly have security implications.</p>
<p>Given the reliance on <code>m4_syscmd</code> by Autoconf’s clientele, it is clear to me that the maintainers have no plans of removing the functionality. The ability to execute arbitrary code upon running <code>autoconf</code> will remain in the foreseeable future, making it an even more attractive attack vector for adversaries.</p>
<p>In fact, the manner in which this functionality is built-in is reminiscent of attack techniques displayed in <a href="https://gtfobins.github.io/">GTFObins</a>, which are often used for privilege escalation.</p>
<h1 id="conclusion">Conclusion</h1>
<p>The ability to run commands from Autoconf is a feature, not a bug. However, it is a feature that can be abused in a way that very few people are aware of. And when exploited strategically, this can lead to the infection or damage of thousands of devices.</p>
<p>I hope that in writing this, I was able to bring awareness to open-source users on the potential dangers of configuring untrusted applications. If you have any questions, concerns, or criticisms on this article, feel free to message me on <a href="https://www.linkedin.com/in/ally-petitt/">LinkedIn</a> and I will be happy to discuss them with you.</p>
<p>Thanks for reading!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
