<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Reverse Engineering on Ally Petitt</title>
    <link>https://ally-petitt.github.io/ally-petitt/en/en/tags/reverse-engineering/</link>
    <description>Recent content in Reverse Engineering on Ally Petitt</description>
    <generator>Hugo -- 0.125.4</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Jul 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ally-petitt.github.io/ally-petitt/en/en/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reverse Engineering — Analyzing Headers</title>
      <link>https://ally-petitt.github.io/ally-petitt/en/en/posts/2023-07-13_reverse-engineering---analyzing-headers-23dc84075cd/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.github.io/ally-petitt/en/en/posts/2023-07-13_reverse-engineering---analyzing-headers-23dc84075cd/</guid>
      <description>&lt;p&gt;&lt;code&gt;objdump&lt;/code&gt; is a command line tool that can be used to gain insight into an executable binary. In this article, the tool will be used to dump all of the headers of the ELF binary &lt;code&gt;heapedit&lt;/code&gt; with the command below. Then, we will analyze and explain each section of output from the top to the bottom.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objdump -x ./heapedit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Executable and Linkable Format (ELF) files are a common file format for object files, executable binaries, core dumps, and shared libraries. It provides a standardized format for storing executable and object code, symbol information, and other metadata necessary for proper software execution. It may be helpful to first get an overview of an ELF file structure which can be seen in this image:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*1ro_BkQGlcyGrJmG.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e4/ELF_Executable_and_Linkable_Format_diagram_by_Ange_Albertini.png&#34;&gt;https://upload.wikimedia.org/wikipedia/commons/e/e4/ELF_Executable_and_Linkable_Format_diagram_by_Ange_Albertini.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;file-header&#34;&gt;File Header&lt;/h2&gt;
&lt;p&gt;The first segment of output displays information from the file header including its file format, architecture, and flags. I’ll sequentially describe what each section means.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heapedit: file format elf64-x86-64  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heapedit  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;architecture: i386:x86-64, flags 0x00000112:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EXEC\_P, HAS\_SYMS, D\_PAGED  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start address 0x0000000000400720
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;file format-&lt;/strong&gt; &lt;code&gt;elf64-x86–64&lt;/code&gt; refers to an ELF file that was designed for 64-bit systems and compiled for the x86–64 architecture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;architecture&lt;/strong&gt;- The architecture &lt;code&gt;i386:x86–64&lt;/code&gt; indicates that the program is compatible with the i386 and x86–64 architecture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flags 0x00000112&lt;/strong&gt;- These flags are Binary File Descriptors (&lt;a href=&#34;https://sourceware.org/binutils/docs-2.23.1/bfd/index.html&#34;&gt;BFDs&lt;/a&gt;). They come from the &lt;code&gt;binutils&lt;/code&gt; package which is built into &lt;code&gt;objdump&lt;/code&gt; and their meaning can be found in the documentation &lt;a href=&#34;http://sourceware.org/binutils/docs-2.23.1/bfd/BFD-front-end.html#BFD-front-end&#34;&gt;here&lt;/a&gt;. In this example, &lt;code&gt;EXEC_P&lt;/code&gt; means the program is directly executable, &lt;code&gt;HAS_SYMS&lt;/code&gt; means that the program has a symbol table which helps with debugging, and &lt;code&gt;D_PAGED&lt;/code&gt; means that the program’s memory is dynamically paged.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start address&lt;/strong&gt;- The memory address at which the &lt;code&gt;.text&lt;/code&gt; section begins, which contains the assembly code of the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This information is obtained by analyzing the raw bytes at the beginning of the file. The specifications for which bits correspond with which pieces of information can be seen &lt;a href=&#34;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;program-headers&#34;&gt;Program Headers&lt;/h2&gt;
&lt;p&gt;The program header (Phdr) is a section that contains necessary information for executing the binary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Program Header:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; PHDR off 0x0000000000000040 vaddr 0x0000000000400040 paddr 0x0000000000400040 align 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x00000000000001f8 memsz 0x00000000000001f8 flags r--  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; INTERP off 0x0000000000000238 vaddr 0x0000000000400238 paddr 0x0000000000400238 align 2**0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x000000000000001c memsz 0x000000000000001c flags r--  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; LOAD off 0x0000000000000000 vaddr 0x0000000000400000 paddr 0x0000000000400000 align 2**21  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x0000000000000c98 memsz 0x0000000000000c98 flags r-x  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; LOAD off 0x0000000000000e00 vaddr 0x0000000000600e00 paddr 0x0000000000600e00 align 2**21  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x0000000000000278 memsz 0x0000000000000288 flags rw-  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; DYNAMIC off 0x0000000000000e10 vaddr 0x0000000000600e10 paddr 0x0000000000600e10 align 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x00000000000001e0 memsz 0x00000000000001e0 flags rw-  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; NOTE off 0x0000000000000254 vaddr 0x0000000000400254 paddr 0x0000000000400254 align 2**2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EH\_FRAME off 0x0000000000000b58 vaddr 0x0000000000400b58 paddr 0x0000000000400b58 align 2**2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x000000000000003c memsz 0x000000000000003c flags r--  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; STACK off 0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; RELRO off 0x0000000000000e00 vaddr 0x0000000000600e00 paddr 0x0000000000600e00 align 2**0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; filesz 0x0000000000000200 memsz 0x0000000000000200 flags r--
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Referencing the EL&lt;a href=&#34;https://man7.org/linux/man-pages/man5/elf.5.html&#34;&gt;F man page&lt;/a&gt;, the paraphrased meaning of the different program types (PTs) are below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHDR&lt;/strong&gt;- specifies the location and size of the program header table itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INTERP&lt;/strong&gt;- specifies the location and size of the program interpreter (dynamic linker) path.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOAD&lt;/strong&gt;- specifies the location and size of a loadable segment in the binary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DYNAMIC&lt;/strong&gt;- specifies the location and size of the dynamic linking information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: specifies the location and size of the ELF note segment (ElfN_Nhdr).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EH_FRAME&lt;/strong&gt;: specifies the location and size of the exception handling frame information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STACK&lt;/strong&gt;: represents the stack segment, but in this case, it has a size of 0, indicating that it doesn’t occupy any space in the binary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RELRO&lt;/strong&gt;: specifies the location and size of the Relocation Read-Only (RELRO) area.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each program type has its corresponding attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;off&lt;/strong&gt;- offset from beginning of file to first byte of the segment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vaddr&lt;/strong&gt;- the virtual address that the first byte of the segment resides in memory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paddr&lt;/strong&gt;- the physical memory address of the first byte of the segment if relevant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filesz&lt;/strong&gt;- holds the number of bytes of the file image of the segment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;memsz&lt;/strong&gt;- holds the number of bytes of the memory image of hte segment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flags&lt;/strong&gt;- holds a bitmask of flags describing the read, write, and execute permissions of the segment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;align&lt;/strong&gt;- specifies the desired alignment of the segment or section in memory. It indicates the power of two that should be used as the alignment constraint.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This table gives an overview of the different sections in memory and where they can be found.&lt;/p&gt;
&lt;h2 id=&#34;dynamic-section&#34;&gt;Dynamic Section&lt;/h2&gt;
&lt;p&gt;This section contains information about the dynamic linking and runtime symbol resolution of the program. This allows for external libraries to be loaded from disk into memory during the execution of the program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dynamic Section:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; NEEDED libc.so.6  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; RUNPATH ./  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; INIT 0x0000000000400650  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; FINI 0x0000000000400af4  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; INIT\_ARRAY 0x0000000000600e00  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; INIT\_ARRAYSZ 0x0000000000000008  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; FINI\_ARRAY 0x0000000000600e08  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; FINI\_ARRAYSZ 0x0000000000000008  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; GNU\_HASH 0x0000000000400298  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; STRTAB 0x0000000000400410  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; SYMTAB 0x00000000004002c0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; STRSZ 0x00000000000000a8  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; SYMENT 0x0000000000000018  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; DEBUG 0x0000000000000000  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; PLTGOT 0x0000000000601000  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; PLTRELSZ 0x00000000000000f0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; PLTREL 0x0000000000000007  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; JMPREL 0x0000000000400560  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; RELA 0x0000000000400518  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; RELASZ 0x0000000000000048  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; RELAENT 0x0000000000000018  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; VERNEED 0x00000000004004d8  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; VERNEEDNUM 0x0000000000000001  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; VERSYM 0x00000000004004b8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the file &lt;code&gt;libc.so.6&lt;/code&gt; needs to be dynamically linked to the program. The ELF man page defines the meaning of the categories on the left column. The right column contains the memory address to store the sections indicated by the left column.&lt;/p&gt;
&lt;p&gt;For example, the ELF man page defines &lt;code&gt;PLTGOT&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DT_PLTGOT&lt;/strong&gt; Address of PLT and/or GOT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above code block, the address of the Procedure Linkage Table (PLT) and/or Global Offset Table (GOT) table would be stored at the memory address &lt;code&gt;0x0000000000601000&lt;/code&gt; as shown by the fact that they are in the same row and the values correspond.&lt;/p&gt;
&lt;h2 id=&#34;version-references&#34;&gt;Version References&lt;/h2&gt;
&lt;p&gt;This section lists the versions of the dynamically linked libraries that are required for the program to run.&lt;/p&gt;
&lt;p&gt;These versions are determined by the linker and requiring them allows for the program to run properly since the library versions used will be compatible with the Application Binary Interface (ABI).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Version References:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; required from libc.so.6:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0d696917 0x00 04 GLIBC\_2.7  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x0d696914 0x00 03 GLIBC\_2.4  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0x09691a75 0x00 02 GLIBC\_2.2.5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the output indicates that the binary depends on 3 different GLIBC versions: 2.7, 2.4, and 2.2.5.&lt;/p&gt;
&lt;h2 id=&#34;sections&#34;&gt;Sections&lt;/h2&gt;
&lt;p&gt;This segment of output contains information about the memory location and names of various different sections of the program. This information is useful to the linker since it helps with symbol resolution, relocation to ensure that they reference the correct addresses in memory, and more such as pointing to the program’s initialization and finalization routines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sections:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Idx Name Size VMA LMA File off Algn  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0 .interp 0000001c 0000000000400238 0000000000400238 00000238 2**0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 1 .note.ABI-tag 00000020 0000000000400254 0000000000400254 00000254 2**2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 2 .note.gnu.build-id 00000024 0000000000400274 0000000000400274 00000274 2**2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 3 .gnu.hash 00000024 0000000000400298 0000000000400298 00000298 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 4 .dynsym 00000150 00000000004002c0 00000000004002c0 000002c0 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 5 .dynstr 000000a8 0000000000400410 0000000000400410 00000410 2**0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 6 .gnu.version 0000001c 00000000004004b8 00000000004004b8 000004b8 2**1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 7 .gnu.version\_r 00000040 00000000004004d8 00000000004004d8 000004d8 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 8 .rela.dyn 00000048 0000000000400518 0000000000400518 00000518 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 9 .rela.plt 000000f0 0000000000400560 0000000000400560 00000560 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 10 .init 00000017 0000000000400650 0000000000400650 00000650 2**2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, CODE  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 11 .plt 000000b0 0000000000400670 0000000000400670 00000670 2**4  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, CODE  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 12 .text 000003d2 0000000000400720 0000000000400720 00000720 2**4  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, CODE  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 13 .fini 00000009 0000000000400af4 0000000000400af4 00000af4 2**2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, CODE  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 14 .rodata 00000057 0000000000400b00 0000000000400b00 00000b00 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 15 .eh\_frame\_hdr 0000003c 0000000000400b58 0000000000400b58 00000b58 2**2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 16 .eh\_frame 00000100 0000000000400b98 0000000000400b98 00000b98 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, READONLY, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 17 .init\_array 00000008 0000000000600e00 0000000000600e00 00000e00 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 18 .fini\_array 00000008 0000000000600e08 0000000000600e08 00000e08 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 19 .dynamic 000001e0 0000000000600e10 0000000000600e10 00000e10 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 20 .got 00000010 0000000000600ff0 0000000000600ff0 00000ff0 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 21 .got.plt 00000068 0000000000601000 0000000000601000 00001000 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 22 .data 00000010 0000000000601068 0000000000601068 00001068 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, ALLOC, LOAD, DATA  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 23 .bss 00000010 0000000000601078 0000000000601078 00001078 2**3  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ALLOC  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 24 .comment 00000029 0000000000000000 0000000000000000 00001078 2**0  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; CONTENTS, READONLY
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s break down the meaning of the new columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Size&lt;/strong&gt;: The size of the section in bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VMA&lt;/strong&gt;: The virtual memory address that the section will be loaded into during program execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LMA&lt;/strong&gt;: The load memory address or the memory address that which the section will be loaded in physical memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the sections listed in the output serves a particular purpose in the program. For instance, the &lt;code&gt;.bss&lt;/code&gt; section contains uninitiated global variables and &lt;code&gt;.gnu_hash&lt;/code&gt; is the hash table used for efficient symbol lookup in the dynamic linking process. The full meanings of the different sections can be found &lt;a href=&#34;https://refspecs.linuxbase.org/elf/gabi4+/ch4.sheader.html&#34;&gt;at this link&lt;/a&gt; towards the bottom of the page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A note on terminology: the ELF file used by the linker are called “sections” and the parts used by the loader are called “segments”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;symbol-table&#34;&gt;Symbol Table&lt;/h2&gt;
&lt;p&gt;Finally, the symbol contains information useful for locating and relocating a program’s symbolic definitions and references. It helps in symbol resolution, linking, and debugging.&lt;/p&gt;
&lt;p&gt;Symbols are segments of code or information such as functions and variables that can be reused by the program. A symbol table keeps track of the different symbols and their locations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYMBOL TABLE:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400238 l d .interp 0000000000000000 .interp  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400254 l d .note.ABI-tag 0000000000000000 .note.ABI-tag  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400274 l d .note.gnu.build-id 0000000000000000 .note.gnu.build-id  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400298 l d .gnu.hash 0000000000000000 .gnu.hash  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004002c0 l d .dynsym 0000000000000000 .dynsym  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400410 l d .dynstr 0000000000000000 .dynstr  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004004b8 l d .gnu.version 0000000000000000 .gnu.version  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004004d8 l d .gnu.version\_r 0000000000000000 .gnu.version\_r  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400518 l d .rela.dyn 0000000000000000 .rela.dyn  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400560 l d .rela.plt 0000000000000000 .rela.plt  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400650 l d .init 0000000000000000 .init  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400670 l d .plt 0000000000000000 .plt  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400720 l d .text 0000000000000000 .text  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400af4 l d .fini 0000000000000000 .fini  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400b00 l d .rodata 0000000000000000 .rodata  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400b58 l d .eh\_frame\_hdr 0000000000000000 .eh\_frame\_hdr  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400b98 l d .eh\_frame 0000000000000000 .eh\_frame  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e00 l d .init\_array 0000000000000000 .init\_array  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e08 l d .fini\_array 0000000000000000 .fini\_array  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e10 l d .dynamic 0000000000000000 .dynamic  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600ff0 l d .got 0000000000000000 .got  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601000 l d .got.plt 0000000000000000 .got.plt  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601068 l d .data 0000000000000000 .data  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601078 l d .bss 0000000000000000 .bss  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 l d .comment 0000000000000000 .comment  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 l df *ABS* 0000000000000000 crtstuff.c  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400760 l F .text 0000000000000000 deregister\_tm\_clones  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400790 l F .text 0000000000000000 register\_tm\_clones  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004007d0 l F .text 0000000000000000 \_\_do\_global\_dtors\_aux  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601080 l O .bss 0000000000000001 completed.7698  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e08 l O .fini\_array 0000000000000000 \_\_do\_global\_dtors\_aux\_fini\_array\_entry  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400800 l F .text 0000000000000000 frame\_dummy  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e00 l O .init\_array 0000000000000000 \_\_frame\_dummy\_init\_array\_entry  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 l df *ABS* 0000000000000000 heapedit.c  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 l df *ABS* 0000000000000000 crtstuff.c  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400c94 l O .eh\_frame 0000000000000000 \_\_FRAME\_END\_\_  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 l df *ABS* 0000000000000000   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e08 l .init\_array 0000000000000000 \_\_init\_array\_end  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e10 l O .dynamic 0000000000000000 \_DYNAMIC  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e00 l .init\_array 0000000000000000 \_\_init\_array\_start  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400b58 l .eh\_frame\_hdr 0000000000000000 \_\_GNU\_EH\_FRAME\_HDR  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601000 l O .got.plt 0000000000000000 \_GLOBAL\_OFFSET\_TABLE\_  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400af0 g F .text 0000000000000002 \_\_libc\_csu\_fini  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 free@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601078 g O .bss 0000000000000008 stdout@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601068 w .data 0000000000000000 data\_start  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 puts@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601078 g .data 0000000000000000 \_edata  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400af4 g F .fini 0000000000000000 \_fini  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 \_\_stack\_chk\_fail@@GLIBC\_2.4  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 setbuf@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 printf@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 \_\_libc\_start\_main@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 fgets@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601068 g .data 0000000000000000 \_\_data\_start  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 w *UND* 0000000000000000 \_\_gmon\_start\_\_  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601070 g O .data 0000000000000000 .hidden \_\_dso\_handle  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400b00 g O .rodata 0000000000000004 \_IO\_stdin\_used  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400a80 g F .text 0000000000000065 \_\_libc\_csu\_init  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 malloc@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601088 g .bss 0000000000000000 \_end  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400750 g F .text 0000000000000002 .hidden \_dl\_relocate\_static\_pie  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400720 g F .text 000000000000002b \_start  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601078 g .bss 0000000000000000 \_\_bss\_start  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400807 g F .text 0000000000000277 main  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 fopen@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 \_\_isoc99\_scanf@@GLIBC\_2.7  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000000000 F *UND* 0000000000000000 strcat@@GLIBC\_2.2.5  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601078 g O .data 0000000000000000 .hidden \_\_TMC\_END\_\_  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400650 g F .init 0000000000000000 \_init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The leftmost column is the memory address of the symbol. The next section represents 7 types of flags that the program can have. For instance, the first row containing the symbol &lt;code&gt;.interpret&lt;/code&gt; has the flags “l” and “d”. The meaning of these can be found in the &lt;code&gt;objdump&lt;/code&gt; &lt;a href=&#34;https://linux.die.net/man/1/objdump&#34;&gt;man page&lt;/a&gt; in the &lt;code&gt;--syms&lt;/code&gt; section. For instance, the flags on &lt;code&gt;.interpret&lt;/code&gt; indicate that the symbol is &lt;strong&gt;l&lt;/strong&gt;ocal (only visible within the object file) and is a &lt;strong&gt;d&lt;/strong&gt;ebugging symbol.&lt;/p&gt;
&lt;p&gt;The structure of each entry in the symbol table is defined in the header file &lt;code&gt;sys/elf.h&lt;/code&gt; or here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;typedef struct {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Elf32\_Word st\_name;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Elf32\_Addr st\_value;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Elf32\_Word st\_size;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; unsigned char st\_info;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; unsigned char st\_other;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Elf32\_Half st\_shndx;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} Elf32\_Sym;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;typedef struct {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Elf64\_Word st\_name;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; unsigned char st\_info;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; unsigned char st\_other;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Elf64\_Half st\_shndx;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Elf64\_Addr st\_value;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Elf64\_Xword st\_size;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} Elf64\_Sym;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The format of an ELF object file allows for reliable access to important details that aid in program execution such as dynamic linking and storing variables. Tools like &lt;code&gt;objdump&lt;/code&gt; aid in revealing and understanding these pieces of information and the connections between them.&lt;/p&gt;
&lt;h1 id=&#34;more-reading&#34;&gt;More Reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-46512.html#scrolltoc&#34;&gt;Oracle Documentation&lt;/a&gt; on ELF object file format&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/objdump&#34;&gt;Objdump Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/elf&#34;&gt;Elf Man Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p><code>objdump</code> is a command line tool that can be used to gain insight into an executable binary. In this article, the tool will be used to dump all of the headers of the ELF binary <code>heapedit</code> with the command below. Then, we will analyze and explain each section of output from the top to the bottom.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>objdump -x ./heapedit
</span></span></code></pre></div><p>Executable and Linkable Format (ELF) files are a common file format for object files, executable binaries, core dumps, and shared libraries. It provides a standardized format for storing executable and object code, symbol information, and other metadata necessary for proper software execution. It may be helpful to first get an overview of an ELF file structure which can be seen in this image:</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*1ro_BkQGlcyGrJmG.png" alt=""  />

<em><a href="https://upload.wikimedia.org/wikipedia/commons/e/e4/ELF_Executable_and_Linkable_Format_diagram_by_Ange_Albertini.png">https://upload.wikimedia.org/wikipedia/commons/e/e4/ELF_Executable_and_Linkable_Format_diagram_by_Ange_Albertini.png</a></em></p>
<h2 id="file-header">File Header</h2>
<p>The first segment of output displays information from the file header including its file format, architecture, and flags. I’ll sequentially describe what each section means.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>heapedit: file format elf64-x86-64  
</span></span><span style="display:flex;"><span>heapedit  
</span></span><span style="display:flex;"><span>architecture: i386:x86-64, flags 0x00000112:  
</span></span><span style="display:flex;"><span>EXEC\_P, HAS\_SYMS, D\_PAGED  
</span></span><span style="display:flex;"><span>start address 0x0000000000400720
</span></span></code></pre></div><ul>
<li><strong>file format-</strong> <code>elf64-x86–64</code> refers to an ELF file that was designed for 64-bit systems and compiled for the x86–64 architecture.</li>
<li><strong>architecture</strong>- The architecture <code>i386:x86–64</code> indicates that the program is compatible with the i386 and x86–64 architecture.</li>
<li><strong>flags 0x00000112</strong>- These flags are Binary File Descriptors (<a href="https://sourceware.org/binutils/docs-2.23.1/bfd/index.html">BFDs</a>). They come from the <code>binutils</code> package which is built into <code>objdump</code> and their meaning can be found in the documentation <a href="http://sourceware.org/binutils/docs-2.23.1/bfd/BFD-front-end.html#BFD-front-end">here</a>. In this example, <code>EXEC_P</code> means the program is directly executable, <code>HAS_SYMS</code> means that the program has a symbol table which helps with debugging, and <code>D_PAGED</code> means that the program’s memory is dynamically paged.</li>
<li><strong>start address</strong>- The memory address at which the <code>.text</code> section begins, which contains the assembly code of the program.</li>
</ul>
<p>This information is obtained by analyzing the raw bytes at the beginning of the file. The specifications for which bits correspond with which pieces of information can be seen <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">here</a>.</p>
<h2 id="program-headers">Program Headers</h2>
<p>The program header (Phdr) is a section that contains necessary information for executing the binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Program Header:  
</span></span><span style="display:flex;"><span> PHDR off 0x0000000000000040 vaddr 0x0000000000400040 paddr 0x0000000000400040 align 2**3  
</span></span><span style="display:flex;"><span> filesz 0x00000000000001f8 memsz 0x00000000000001f8 flags r--  
</span></span><span style="display:flex;"><span> INTERP off 0x0000000000000238 vaddr 0x0000000000400238 paddr 0x0000000000400238 align 2**0  
</span></span><span style="display:flex;"><span> filesz 0x000000000000001c memsz 0x000000000000001c flags r--  
</span></span><span style="display:flex;"><span> LOAD off 0x0000000000000000 vaddr 0x0000000000400000 paddr 0x0000000000400000 align 2**21  
</span></span><span style="display:flex;"><span> filesz 0x0000000000000c98 memsz 0x0000000000000c98 flags r-x  
</span></span><span style="display:flex;"><span> LOAD off 0x0000000000000e00 vaddr 0x0000000000600e00 paddr 0x0000000000600e00 align 2**21  
</span></span><span style="display:flex;"><span> filesz 0x0000000000000278 memsz 0x0000000000000288 flags rw-  
</span></span><span style="display:flex;"><span> DYNAMIC off 0x0000000000000e10 vaddr 0x0000000000600e10 paddr 0x0000000000600e10 align 2**3  
</span></span><span style="display:flex;"><span> filesz 0x00000000000001e0 memsz 0x00000000000001e0 flags rw-  
</span></span><span style="display:flex;"><span> NOTE off 0x0000000000000254 vaddr 0x0000000000400254 paddr 0x0000000000400254 align 2**2  
</span></span><span style="display:flex;"><span> filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--  
</span></span><span style="display:flex;"><span>EH\_FRAME off 0x0000000000000b58 vaddr 0x0000000000400b58 paddr 0x0000000000400b58 align 2**2  
</span></span><span style="display:flex;"><span> filesz 0x000000000000003c memsz 0x000000000000003c flags r--  
</span></span><span style="display:flex;"><span> STACK off 0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4  
</span></span><span style="display:flex;"><span> filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-  
</span></span><span style="display:flex;"><span> RELRO off 0x0000000000000e00 vaddr 0x0000000000600e00 paddr 0x0000000000600e00 align 2**0  
</span></span><span style="display:flex;"><span> filesz 0x0000000000000200 memsz 0x0000000000000200 flags r--
</span></span></code></pre></div><p>Referencing the EL<a href="https://man7.org/linux/man-pages/man5/elf.5.html">F man page</a>, the paraphrased meaning of the different program types (PTs) are below.</p>
<ul>
<li><strong>PHDR</strong>- specifies the location and size of the program header table itself.</li>
<li><strong>INTERP</strong>- specifies the location and size of the program interpreter (dynamic linker) path.</li>
<li><strong>LOAD</strong>- specifies the location and size of a loadable segment in the binary.</li>
<li><strong>DYNAMIC</strong>- specifies the location and size of the dynamic linking information.</li>
<li><strong>NOTE</strong>: specifies the location and size of the ELF note segment (ElfN_Nhdr).</li>
<li><strong>EH_FRAME</strong>: specifies the location and size of the exception handling frame information.</li>
<li><strong>STACK</strong>: represents the stack segment, but in this case, it has a size of 0, indicating that it doesn’t occupy any space in the binary.</li>
<li><strong>RELRO</strong>: specifies the location and size of the Relocation Read-Only (RELRO) area.</li>
</ul>
<p>Each program type has its corresponding attributes:</p>
<ul>
<li><strong>off</strong>- offset from beginning of file to first byte of the segment</li>
<li><strong>vaddr</strong>- the virtual address that the first byte of the segment resides in memory</li>
<li><strong>paddr</strong>- the physical memory address of the first byte of the segment if relevant</li>
<li><strong>filesz</strong>- holds the number of bytes of the file image of the segment</li>
<li><strong>memsz</strong>- holds the number of bytes of the memory image of hte segment</li>
<li><strong>flags</strong>- holds a bitmask of flags describing the read, write, and execute permissions of the segment.</li>
<li><strong>align</strong>- specifies the desired alignment of the segment or section in memory. It indicates the power of two that should be used as the alignment constraint.</li>
</ul>
<p>This table gives an overview of the different sections in memory and where they can be found.</p>
<h2 id="dynamic-section">Dynamic Section</h2>
<p>This section contains information about the dynamic linking and runtime symbol resolution of the program. This allows for external libraries to be loaded from disk into memory during the execution of the program.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Dynamic Section:  
</span></span><span style="display:flex;"><span> NEEDED libc.so.6  
</span></span><span style="display:flex;"><span> RUNPATH ./  
</span></span><span style="display:flex;"><span> INIT 0x0000000000400650  
</span></span><span style="display:flex;"><span> FINI 0x0000000000400af4  
</span></span><span style="display:flex;"><span> INIT\_ARRAY 0x0000000000600e00  
</span></span><span style="display:flex;"><span> INIT\_ARRAYSZ 0x0000000000000008  
</span></span><span style="display:flex;"><span> FINI\_ARRAY 0x0000000000600e08  
</span></span><span style="display:flex;"><span> FINI\_ARRAYSZ 0x0000000000000008  
</span></span><span style="display:flex;"><span> GNU\_HASH 0x0000000000400298  
</span></span><span style="display:flex;"><span> STRTAB 0x0000000000400410  
</span></span><span style="display:flex;"><span> SYMTAB 0x00000000004002c0  
</span></span><span style="display:flex;"><span> STRSZ 0x00000000000000a8  
</span></span><span style="display:flex;"><span> SYMENT 0x0000000000000018  
</span></span><span style="display:flex;"><span> DEBUG 0x0000000000000000  
</span></span><span style="display:flex;"><span> PLTGOT 0x0000000000601000  
</span></span><span style="display:flex;"><span> PLTRELSZ 0x00000000000000f0  
</span></span><span style="display:flex;"><span> PLTREL 0x0000000000000007  
</span></span><span style="display:flex;"><span> JMPREL 0x0000000000400560  
</span></span><span style="display:flex;"><span> RELA 0x0000000000400518  
</span></span><span style="display:flex;"><span> RELASZ 0x0000000000000048  
</span></span><span style="display:flex;"><span> RELAENT 0x0000000000000018  
</span></span><span style="display:flex;"><span> VERNEED 0x00000000004004d8  
</span></span><span style="display:flex;"><span> VERNEEDNUM 0x0000000000000001  
</span></span><span style="display:flex;"><span> VERSYM 0x00000000004004b8
</span></span></code></pre></div><p>In this example, the file <code>libc.so.6</code> needs to be dynamically linked to the program. The ELF man page defines the meaning of the categories on the left column. The right column contains the memory address to store the sections indicated by the left column.</p>
<p>For example, the ELF man page defines <code>PLTGOT</code>:</p>
<blockquote>
<p><strong>DT_PLTGOT</strong> Address of PLT and/or GOT</p>
</blockquote>
<p>In the above code block, the address of the Procedure Linkage Table (PLT) and/or Global Offset Table (GOT) table would be stored at the memory address <code>0x0000000000601000</code> as shown by the fact that they are in the same row and the values correspond.</p>
<h2 id="version-references">Version References</h2>
<p>This section lists the versions of the dynamically linked libraries that are required for the program to run.</p>
<p>These versions are determined by the linker and requiring them allows for the program to run properly since the library versions used will be compatible with the Application Binary Interface (ABI).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Version References:  
</span></span><span style="display:flex;"><span> required from libc.so.6:  
</span></span><span style="display:flex;"><span> 0x0d696917 0x00 04 GLIBC\_2.7  
</span></span><span style="display:flex;"><span> 0x0d696914 0x00 03 GLIBC\_2.4  
</span></span><span style="display:flex;"><span> 0x09691a75 0x00 02 GLIBC\_2.2.5
</span></span></code></pre></div><p>In this example, the output indicates that the binary depends on 3 different GLIBC versions: 2.7, 2.4, and 2.2.5.</p>
<h2 id="sections">Sections</h2>
<p>This segment of output contains information about the memory location and names of various different sections of the program. This information is useful to the linker since it helps with symbol resolution, relocation to ensure that they reference the correct addresses in memory, and more such as pointing to the program’s initialization and finalization routines.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Sections:  
</span></span><span style="display:flex;"><span>Idx Name Size VMA LMA File off Algn  
</span></span><span style="display:flex;"><span> 0 .interp 0000001c 0000000000400238 0000000000400238 00000238 2**0  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 1 .note.ABI-tag 00000020 0000000000400254 0000000000400254 00000254 2**2  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 2 .note.gnu.build-id 00000024 0000000000400274 0000000000400274 00000274 2**2  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 3 .gnu.hash 00000024 0000000000400298 0000000000400298 00000298 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 4 .dynsym 00000150 00000000004002c0 00000000004002c0 000002c0 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 5 .dynstr 000000a8 0000000000400410 0000000000400410 00000410 2**0  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 6 .gnu.version 0000001c 00000000004004b8 00000000004004b8 000004b8 2**1  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 7 .gnu.version\_r 00000040 00000000004004d8 00000000004004d8 000004d8 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 8 .rela.dyn 00000048 0000000000400518 0000000000400518 00000518 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 9 .rela.plt 000000f0 0000000000400560 0000000000400560 00000560 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 10 .init 00000017 0000000000400650 0000000000400650 00000650 2**2  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, CODE  
</span></span><span style="display:flex;"><span> 11 .plt 000000b0 0000000000400670 0000000000400670 00000670 2**4  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, CODE  
</span></span><span style="display:flex;"><span> 12 .text 000003d2 0000000000400720 0000000000400720 00000720 2**4  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, CODE  
</span></span><span style="display:flex;"><span> 13 .fini 00000009 0000000000400af4 0000000000400af4 00000af4 2**2  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, CODE  
</span></span><span style="display:flex;"><span> 14 .rodata 00000057 0000000000400b00 0000000000400b00 00000b00 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 15 .eh\_frame\_hdr 0000003c 0000000000400b58 0000000000400b58 00000b58 2**2  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 16 .eh\_frame 00000100 0000000000400b98 0000000000400b98 00000b98 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, READONLY, DATA  
</span></span><span style="display:flex;"><span> 17 .init\_array 00000008 0000000000600e00 0000000000600e00 00000e00 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, DATA  
</span></span><span style="display:flex;"><span> 18 .fini\_array 00000008 0000000000600e08 0000000000600e08 00000e08 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, DATA  
</span></span><span style="display:flex;"><span> 19 .dynamic 000001e0 0000000000600e10 0000000000600e10 00000e10 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, DATA  
</span></span><span style="display:flex;"><span> 20 .got 00000010 0000000000600ff0 0000000000600ff0 00000ff0 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, DATA  
</span></span><span style="display:flex;"><span> 21 .got.plt 00000068 0000000000601000 0000000000601000 00001000 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, DATA  
</span></span><span style="display:flex;"><span> 22 .data 00000010 0000000000601068 0000000000601068 00001068 2**3  
</span></span><span style="display:flex;"><span> CONTENTS, ALLOC, LOAD, DATA  
</span></span><span style="display:flex;"><span> 23 .bss 00000010 0000000000601078 0000000000601078 00001078 2**3  
</span></span><span style="display:flex;"><span> ALLOC  
</span></span><span style="display:flex;"><span> 24 .comment 00000029 0000000000000000 0000000000000000 00001078 2**0  
</span></span><span style="display:flex;"><span> CONTENTS, READONLY
</span></span></code></pre></div><p>Let’s break down the meaning of the new columns:</p>
<ul>
<li><strong>Size</strong>: The size of the section in bytes</li>
<li><strong>VMA</strong>: The virtual memory address that the section will be loaded into during program execution</li>
<li><strong>LMA</strong>: The load memory address or the memory address that which the section will be loaded in physical memory</li>
</ul>
<p>Each of the sections listed in the output serves a particular purpose in the program. For instance, the <code>.bss</code> section contains uninitiated global variables and <code>.gnu_hash</code> is the hash table used for efficient symbol lookup in the dynamic linking process. The full meanings of the different sections can be found <a href="https://refspecs.linuxbase.org/elf/gabi4+/ch4.sheader.html">at this link</a> towards the bottom of the page.</p>
<blockquote>
<p>A note on terminology: the ELF file used by the linker are called “sections” and the parts used by the loader are called “segments”.</p>
</blockquote>
<h2 id="symbol-table">Symbol Table</h2>
<p>Finally, the symbol contains information useful for locating and relocating a program’s symbolic definitions and references. It helps in symbol resolution, linking, and debugging.</p>
<p>Symbols are segments of code or information such as functions and variables that can be reused by the program. A symbol table keeps track of the different symbols and their locations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>SYMBOL TABLE:  
</span></span><span style="display:flex;"><span>0000000000400238 l d .interp 0000000000000000 .interp  
</span></span><span style="display:flex;"><span>0000000000400254 l d .note.ABI-tag 0000000000000000 .note.ABI-tag  
</span></span><span style="display:flex;"><span>0000000000400274 l d .note.gnu.build-id 0000000000000000 .note.gnu.build-id  
</span></span><span style="display:flex;"><span>0000000000400298 l d .gnu.hash 0000000000000000 .gnu.hash  
</span></span><span style="display:flex;"><span>00000000004002c0 l d .dynsym 0000000000000000 .dynsym  
</span></span><span style="display:flex;"><span>0000000000400410 l d .dynstr 0000000000000000 .dynstr  
</span></span><span style="display:flex;"><span>00000000004004b8 l d .gnu.version 0000000000000000 .gnu.version  
</span></span><span style="display:flex;"><span>00000000004004d8 l d .gnu.version\_r 0000000000000000 .gnu.version\_r  
</span></span><span style="display:flex;"><span>0000000000400518 l d .rela.dyn 0000000000000000 .rela.dyn  
</span></span><span style="display:flex;"><span>0000000000400560 l d .rela.plt 0000000000000000 .rela.plt  
</span></span><span style="display:flex;"><span>0000000000400650 l d .init 0000000000000000 .init  
</span></span><span style="display:flex;"><span>0000000000400670 l d .plt 0000000000000000 .plt  
</span></span><span style="display:flex;"><span>0000000000400720 l d .text 0000000000000000 .text  
</span></span><span style="display:flex;"><span>0000000000400af4 l d .fini 0000000000000000 .fini  
</span></span><span style="display:flex;"><span>0000000000400b00 l d .rodata 0000000000000000 .rodata  
</span></span><span style="display:flex;"><span>0000000000400b58 l d .eh\_frame\_hdr 0000000000000000 .eh\_frame\_hdr  
</span></span><span style="display:flex;"><span>0000000000400b98 l d .eh\_frame 0000000000000000 .eh\_frame  
</span></span><span style="display:flex;"><span>0000000000600e00 l d .init\_array 0000000000000000 .init\_array  
</span></span><span style="display:flex;"><span>0000000000600e08 l d .fini\_array 0000000000000000 .fini\_array  
</span></span><span style="display:flex;"><span>0000000000600e10 l d .dynamic 0000000000000000 .dynamic  
</span></span><span style="display:flex;"><span>0000000000600ff0 l d .got 0000000000000000 .got  
</span></span><span style="display:flex;"><span>0000000000601000 l d .got.plt 0000000000000000 .got.plt  
</span></span><span style="display:flex;"><span>0000000000601068 l d .data 0000000000000000 .data  
</span></span><span style="display:flex;"><span>0000000000601078 l d .bss 0000000000000000 .bss  
</span></span><span style="display:flex;"><span>0000000000000000 l d .comment 0000000000000000 .comment  
</span></span><span style="display:flex;"><span>0000000000000000 l df *ABS* 0000000000000000 crtstuff.c  
</span></span><span style="display:flex;"><span>0000000000400760 l F .text 0000000000000000 deregister\_tm\_clones  
</span></span><span style="display:flex;"><span>0000000000400790 l F .text 0000000000000000 register\_tm\_clones  
</span></span><span style="display:flex;"><span>00000000004007d0 l F .text 0000000000000000 \_\_do\_global\_dtors\_aux  
</span></span><span style="display:flex;"><span>0000000000601080 l O .bss 0000000000000001 completed.7698  
</span></span><span style="display:flex;"><span>0000000000600e08 l O .fini\_array 0000000000000000 \_\_do\_global\_dtors\_aux\_fini\_array\_entry  
</span></span><span style="display:flex;"><span>0000000000400800 l F .text 0000000000000000 frame\_dummy  
</span></span><span style="display:flex;"><span>0000000000600e00 l O .init\_array 0000000000000000 \_\_frame\_dummy\_init\_array\_entry  
</span></span><span style="display:flex;"><span>0000000000000000 l df *ABS* 0000000000000000 heapedit.c  
</span></span><span style="display:flex;"><span>0000000000000000 l df *ABS* 0000000000000000 crtstuff.c  
</span></span><span style="display:flex;"><span>0000000000400c94 l O .eh\_frame 0000000000000000 \_\_FRAME\_END\_\_  
</span></span><span style="display:flex;"><span>0000000000000000 l df *ABS* 0000000000000000   
</span></span><span style="display:flex;"><span>0000000000600e08 l .init\_array 0000000000000000 \_\_init\_array\_end  
</span></span><span style="display:flex;"><span>0000000000600e10 l O .dynamic 0000000000000000 \_DYNAMIC  
</span></span><span style="display:flex;"><span>0000000000600e00 l .init\_array 0000000000000000 \_\_init\_array\_start  
</span></span><span style="display:flex;"><span>0000000000400b58 l .eh\_frame\_hdr 0000000000000000 \_\_GNU\_EH\_FRAME\_HDR  
</span></span><span style="display:flex;"><span>0000000000601000 l O .got.plt 0000000000000000 \_GLOBAL\_OFFSET\_TABLE\_  
</span></span><span style="display:flex;"><span>0000000000400af0 g F .text 0000000000000002 \_\_libc\_csu\_fini  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 free@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000601078 g O .bss 0000000000000008 stdout@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000601068 w .data 0000000000000000 data\_start  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 puts@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000601078 g .data 0000000000000000 \_edata  
</span></span><span style="display:flex;"><span>0000000000400af4 g F .fini 0000000000000000 \_fini  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 \_\_stack\_chk\_fail@@GLIBC\_2.4  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 setbuf@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 printf@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 \_\_libc\_start\_main@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 fgets@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000601068 g .data 0000000000000000 \_\_data\_start  
</span></span><span style="display:flex;"><span>0000000000000000 w *UND* 0000000000000000 \_\_gmon\_start\_\_  
</span></span><span style="display:flex;"><span>0000000000601070 g O .data 0000000000000000 .hidden \_\_dso\_handle  
</span></span><span style="display:flex;"><span>0000000000400b00 g O .rodata 0000000000000004 \_IO\_stdin\_used  
</span></span><span style="display:flex;"><span>0000000000400a80 g F .text 0000000000000065 \_\_libc\_csu\_init  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 malloc@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000601088 g .bss 0000000000000000 \_end  
</span></span><span style="display:flex;"><span>0000000000400750 g F .text 0000000000000002 .hidden \_dl\_relocate\_static\_pie  
</span></span><span style="display:flex;"><span>0000000000400720 g F .text 000000000000002b \_start  
</span></span><span style="display:flex;"><span>0000000000601078 g .bss 0000000000000000 \_\_bss\_start  
</span></span><span style="display:flex;"><span>0000000000400807 g F .text 0000000000000277 main  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 fopen@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 \_\_isoc99\_scanf@@GLIBC\_2.7  
</span></span><span style="display:flex;"><span>0000000000000000 F *UND* 0000000000000000 strcat@@GLIBC\_2.2.5  
</span></span><span style="display:flex;"><span>0000000000601078 g O .data 0000000000000000 .hidden \_\_TMC\_END\_\_  
</span></span><span style="display:flex;"><span>0000000000400650 g F .init 0000000000000000 \_init
</span></span></code></pre></div><p>The leftmost column is the memory address of the symbol. The next section represents 7 types of flags that the program can have. For instance, the first row containing the symbol <code>.interpret</code> has the flags “l” and “d”. The meaning of these can be found in the <code>objdump</code> <a href="https://linux.die.net/man/1/objdump">man page</a> in the <code>--syms</code> section. For instance, the flags on <code>.interpret</code> indicate that the symbol is <strong>l</strong>ocal (only visible within the object file) and is a <strong>d</strong>ebugging symbol.</p>
<p>The structure of each entry in the symbol table is defined in the header file <code>sys/elf.h</code> or here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>typedef struct {  
</span></span><span style="display:flex;"><span> Elf32\_Word st\_name;  
</span></span><span style="display:flex;"><span> Elf32\_Addr st\_value;  
</span></span><span style="display:flex;"><span> Elf32\_Word st\_size;  
</span></span><span style="display:flex;"><span> unsigned char st\_info;  
</span></span><span style="display:flex;"><span> unsigned char st\_other;  
</span></span><span style="display:flex;"><span> Elf32\_Half st\_shndx;  
</span></span><span style="display:flex;"><span>} Elf32\_Sym;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>typedef struct {  
</span></span><span style="display:flex;"><span> Elf64\_Word st\_name;  
</span></span><span style="display:flex;"><span> unsigned char st\_info;  
</span></span><span style="display:flex;"><span> unsigned char st\_other;  
</span></span><span style="display:flex;"><span> Elf64\_Half st\_shndx;  
</span></span><span style="display:flex;"><span> Elf64\_Addr st\_value;  
</span></span><span style="display:flex;"><span> Elf64\_Xword st\_size;  
</span></span><span style="display:flex;"><span>} Elf64\_Sym;
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>The format of an ELF object file allows for reliable access to important details that aid in program execution such as dynamic linking and storing variables. Tools like <code>objdump</code> aid in revealing and understanding these pieces of information and the connections between them.</p>
<h1 id="more-reading">More Reading</h1>
<ul>
<li><a href="https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-46512.html#scrolltoc">Oracle Documentation</a> on ELF object file format</li>
<li><a href="https://linux.die.net/man/1/objdump">Objdump Documentation</a></li>
<li><a href="https://linux.die.net/man/1/elf">Elf Man Page</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
