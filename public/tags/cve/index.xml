<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CVE on Ally Petitt</title>
    <link>https://ally-petitt.com/tags/cve/</link>
    <description>Recent content in CVE on Ally Petitt</description>
    <generator>Hugo -- 0.125.4</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ally-petitt.com/tags/cve/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I Found 3 CVEs in 2 Days</title>
      <link>https://ally-petitt.com/posts/2024-03-21_how-i-found-3-cves-in-2-days-8a135eb924d3/</link>
      <pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com/posts/2024-03-21_how-i-found-3-cves-in-2-days-8a135eb924d3/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*wGuRqNuBuFV5u69n.png&#34; alt=&#34;&#34;  /&gt;

Author: Ally Petitt&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Christmas break is notoriously refreshing for high schoolers like myself, however, unlike most high school students, I got to spend mine doing the most fascinating work in the world: security research.&lt;/p&gt;
&lt;p&gt;I had previously used Savannah, a GNU bug tracker, to submit a bug report, so when I noticed that the underlying technology, &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/&#34;&gt;Savane&lt;/a&gt;, was open source, I knew I had to put it on my list of research projects. To my surprise, I was able to discover 3 CVEs within the span of 2 days including insecure access control, cross-site request forgery (CSRF), and a bad seed vulnerability in Savane v3.12 and prior versions.&lt;/p&gt;
&lt;p&gt;Testing Environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox v103.0 (64-bit)&lt;/li&gt;
&lt;li&gt;Debian 12, stable-slim Docker container&lt;/li&gt;
&lt;li&gt;PHP development server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these aren’t all-encompassing results as my short audit of this application was only over the course of a few days.&lt;/p&gt;
&lt;h1 id=&#34;methodology&#34;&gt;Methodology&lt;/h1&gt;
&lt;p&gt;This audit consisted of both dynamic and static analysis. The majority of my source code analysis methodology can be found &lt;a href=&#34;https://medium.com/@allypetitt/how-to-find-more-vulnerabilities-source-code-auditing-explained-2c8a10896374&#34;&gt;here&lt;/a&gt;. For the sake of brevity, I will only include relevant details for this article. My first step was configuring a local development environment via a &lt;a href=&#34;https://gist.github.com/ally-petitt/3490c857b4c6eeea860c6e094ce47ce3&#34;&gt;Dockerfile I&lt;/a&gt; created.&lt;/p&gt;
&lt;p&gt;With a running instance of Savane, I shifted my focus to source code analysis, pinpointing files of particular interest for security issues including &lt;code&gt;utils.php&lt;/code&gt;, &lt;code&gt;upload.php&lt;/code&gt;, and &lt;code&gt;users.php&lt;/code&gt;. While there were interesting leads, many of them did not pan out how I had hoped, so I began to parse through functionalities with more potential for impact. This led me to authenticated functionalities since any user can create an account and expands the attack surface drastically.&lt;/p&gt;
&lt;h1 id=&#34;account-management&#34;&gt;Account Management&lt;/h1&gt;
&lt;p&gt;I began by assessing account management functionalities such as updating passwords and changing email addresses for Cross-Site Request Forgery (CSRF) or access control vulnerabilities since they happened to be at the forefront of my mind at the time of this audit.&lt;/p&gt;
&lt;p&gt;The majority of the critical account management functionalities appeared to be protected by a&lt;code&gt;form_id&lt;/code&gt; parameter, which contained a randomized string in each request. In effect, &lt;code&gt;form_id&lt;/code&gt; acted as a CSRF token.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Q3BI1WCSQj8kJmb7iCEh4g.png&#34; alt=&#34;&#34;  /&gt;

Additionally, attempting to change the password required the previous user password to be known, which provided no advantage over attempting to brute-force their password to begin with.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*IcA_HpVxf3LP9FlM7miVUw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;http://172.17.0.2:7890/my/admin/change.php?item=password&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With these precautions in place, it was evident that further investigation was required.&lt;/p&gt;
&lt;h2 id=&#34;cve-202427631csrf-cwe-352&#34;&gt;CVE-2024–27631 — CSRF (CWE-&lt;strong&gt;352)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I suspected that there may be additional critical vulnerabilities without CSRF protection. Specifically, I began to look inside of admin folders in the source code, eventually finding &lt;code&gt;siteadmin/usergroup.php&lt;/code&gt;, which enabled superusers to edit of any user’s profile.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_stvfUY2HtkR9wda-TgZQQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Example of /siteadmin/usergroup.php to edit the account of user 60079&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This page contained three unprotected functionalities of interest. The first was a function that can be used to grant a user admin flags, leading to privilege escalation without account takeover.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*TDquE7S3UnTHXilR4TYrVA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/usergroup.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The second and third functionalities could be leveraged for account takeover by either changing the email address of a user’s account:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HvHtu0HaoxRLzojL3vjfPQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/usergroup.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or, changing the password of any user’s account.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*-N45bZ7BrPdguKZWsQs0cw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/user_changepw.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Given these promising leads, I began to develop a Proof-of-Concept (PoC) to demonstrate that the vulnerability existed in practice. (I have found that with static analysis, sometimes a detail in the code can be overlooked that actually mitigates the vulnerability.) The following is what I came up with and successfully tested:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- The efficacy of this payload is browser-dependent --&amp;gt;  
&amp;lt;form id=&amp;#34;autosubmit&amp;#34; action=&amp;#34;http://&amp;lt;savane\_instance&amp;gt;/siteadmin/user\_changepw.php&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt;  
  
 &amp;lt;input name=&amp;#34;form\_pw&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;Password1!&amp;#34; /&amp;gt;  
 &amp;lt;input name=&amp;#34;form\_pw2&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;Password1!&amp;#34; /&amp;gt;  
 &amp;lt;input name=&amp;#34;user\_id&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;&amp;lt;user\_id&amp;gt;&amp;#34; /&amp;gt;  
 &amp;lt;input name=&amp;#34;update&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;Update&amp;#34; /&amp;gt;  
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit Request&amp;#34; /&amp;gt;  
&amp;lt;/form&amp;gt;  
  
&amp;lt;script&amp;gt;  
 document.getElementById(&amp;#34;autosubmit&amp;#34;).submit();  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thus, I discovered CVE-2024–27631! A patch was implemented in &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;amp;id=d3962d3feb75467489b869204db98e2dffaaaf09&#34;&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cve-202427632bad-seed-cwe-335&#34;&gt;CVE-2024–27632 — Bad Seed (CWE-335)&lt;/h2&gt;
&lt;p&gt;While tracing CSRF-related functionalities in the code, I came across the logic for generating and serving the CSRF tokens, or form IDs. The execution flow is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Protected PHP pages contain a call to &lt;code&gt;form_header()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;form_header()&lt;/code&gt; function seeds the current Unix timestamp.&lt;/li&gt;
&lt;li&gt;A random number is chosen and hashed to create &lt;code&gt;form_id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The form ID is added as a hidden element in the form on the protected page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The definition of &lt;code&gt;form_header()&lt;/code&gt; can be seen in the image below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Zs5bxl01fMcxsXTfZd4mzw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/include/form.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was particularly interested in the mechanism behind seeding the Pseudo-Random Number Generator (&lt;a href=&#34;https://en.wikipedia.org/wiki/Pseudorandom_number_generator&#34;&gt;PRNG&lt;/a&gt;), which occured in &lt;code&gt;utils_srand()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*SIBvRLsqwT0QVwFI1ZczrA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/include/utils.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It was apparent that &lt;code&gt;[mt\_srand()](https://www.php.net/manual/en/function.mt-srand.php)&lt;/code&gt; was used to seed the &lt;a href=&#34;https://www.php.net/manual/en/function.microtime.php&#34;&gt;Unix timestamp&lt;/a&gt; (learn more about PRNGs &lt;a href=&#34;https://www.geeksforgeeks.org/pseudo-random-number-generator-prng/&#34;&gt;here&lt;/a&gt;). Since this function is called when a protected page is loaded, the seed is renewed with the current time upon visiting the page. If the timestamp that a victim visited a page is known, can be approximated, or can be otherwise triggered, it is possible to independently generate the exact same form ID token, passing the CSRF check! This would allow for CSRF attacks on arbitrary form submissions, leading to potential account takeover.&lt;/p&gt;
&lt;p&gt;Savane v3.13 contains a patch implemented in this &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;amp;id=dee5195d18f9ab16c860e8114819083673f66b95&#34;&gt;commit&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;group-management-functionalities&#34;&gt;Group Management Functionalities&lt;/h1&gt;
&lt;p&gt;Another class of functionalities I began to explore was group management. I tested CRUD (Create, Read, Update, and Delete) functionalities utilized when submitting a bug report to a group. I was unable to exploit file uploads in bug reports (I may address this in a future article if enough people are interested), however, I was vigilant on access control issues when I observed the web traffic for deleting an uploaded attachment.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4Pup6AnABk8L9bM8QGeGow.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Deleting a file attachment with ID 40225&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;cve-202427630idor-cwe-639&#34;&gt;CVE-2024–27630 — IDOR (&lt;strong&gt;CWE-639&lt;/strong&gt;)&lt;/h2&gt;
&lt;p&gt;Upon submitting a bug report, uploaded files are deposited in the uploads directory (&lt;code&gt;/var/lib/savane/trackers_attachments&lt;/code&gt;) with a file name equivalent to the file’s ID.&lt;/p&gt;
&lt;p&gt;Naturally, I began to investigate the process of deleting a file, a function only accessible to tracker admins. The following function is responsible for handling file deletion on attachments (&lt;code&gt;frontend/php/include/trackers/data.php:2417&lt;/code&gt;):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function trackers\_data\_delete\_file ($group\_id, $item\_id, $file\_id)  
{  
 global $sys\_trackers\_attachments\_dir;  
 # Make sure the attachment belongs to the group.  
 $res = db\_execute (&amp;#34;  
 SELECT bug\_id from &amp;#34; . ARTIFACT . &amp;#34; WHERE bug\_id = ? AND group\_id = ?&amp;#34;,  
 [$item\_id, $group\_id]  
 );  
 if (db\_numrows ($res) &amp;lt;= 0)  
 {  
 # TRANSLATORS: the argument is item id (a number).  
 $msg = sprintf (  
 \_(&amp;#34;Item #%s doesn&amp;#39;t belong to project&amp;#34;), $item\_id  
 );  
 fb ($msg, 1);  
 return;  
 }  
  
 $result = false;  
 # Delete the attachment.  
 if (unlink (&amp;#34;$sys\_trackers\_attachments\_dir/$file\_id&amp;#34;))   
 $result = db\_execute (&amp;#34;  
 DELETE FROM trackers\_file WHERE item\_id = ? AND file\_id = ?&amp;#34;,  
 [$item\_id, $file\_id]  
 );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The user can control the &lt;code&gt;$item_id&lt;/code&gt; and &lt;code&gt;$file_id&lt;/code&gt; parameters through the URI. Can you spot the vulnerability? It is subtle.&lt;/p&gt;
&lt;p&gt;Note that there is input validation ensure the &lt;code&gt;$file_id&lt;/code&gt; is a number. Otherwise, there would be a directory traversal vulnerability allowing for arbitrary file deletion.&lt;/p&gt;
&lt;p&gt;The function first checks if the user is part of the group corresponding to the &lt;code&gt;$item_id&lt;/code&gt; and proceeds to delete the attachment before running a SQL query updating the database. The &lt;code&gt;$file_id&lt;/code&gt; is not checked at all! This means that as long as the attacker is an admin of the group referenced in &lt;code&gt;$item_id&lt;/code&gt;, they could delete any file.&lt;/p&gt;
&lt;p&gt;I was quite surprised to have spotted this discrepency, but very pleased. The following steps can be taken to reproduce the vulnerability:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have an account that is an admin of a group with a bugtracker (attacker account).&lt;/li&gt;
&lt;li&gt;With a separate user account (victim), upload a file attachment in a bug report to a group that the attacker is not an admin of. A sample of the subsequent upload directory is as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@60ae93fe131f:/var/lib/savane/trackers\_attachments# ls  
40226 40227 40230 40231
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Visit the homepage of the group that the attacker is an admin of. Then, visit Bugs &amp;gt; Browse and note a valid Item ID on the leftmost column of the table. This ID will be used in the next step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As the attacker, make a get request to the path &lt;code&gt;/bugs/index.php?func=delete_file&amp;amp;item_id=&amp;lt;ATTACKER_ITEM_ID&amp;gt;&amp;amp;item_file_id=&amp;lt;FILE_ID_TO_DELETE&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;In my case, this looks like &lt;a href=&#34;http://172.17.0.2:7890/bugs/index.php?func=delete_file&amp;amp;item_id=50697&amp;amp;item_file_id=40231&#34;&gt;http://172.17.0.2:7890/bugs/index.php?func=delete_file&amp;amp;item_id=50697&amp;amp;item_file_id=40231&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Verify that the victim’s file (from a group the attacker doesn’t have privileges on) has been deleted.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@60ae93fe131f:/var/lib/savane/trackers\_attachments# ls  
40226 40227 40230
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Due to the incremental file names, it is possible for an attacker to iteratively delete every file attachment on the web server! Since recently uploaded files harbor the highest file ID numbers, an attacker can upload a file, observe the ID, and delete every ID below that number as one would in an Insecure Direct Object Reference (IDOR) vulnerabillity. This vulnerability was patched &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;amp;id=39180aea8f38425035b4d1e73819b58007ac6e83&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Special thanks to Ineiev, the maintainer of Savane. He was very receptive to my responsible disclosure and helped take steps to patch it.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Combing through Savane’s source code was one of the highlights of my Christmas break. While discovering 3 CVEs came as a surprise, I am appreciative of the educational value of this experience. I hope that you learned something from this writeup. If you have any questions or comments, feel free to reach out to me on &lt;a href=&#34;https://www.linkedin.com/in/ally-petitt/&#34;&gt;LinkedIn&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How I Found an Authentication Bypass Vulnerability — CVE-2023–43154</title>
      <link>https://ally-petitt.com/posts/2023-09-29_how-i-found-authentication-bypass-vulnerability---cve-2023-43154-b55dee7c876b/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://ally-petitt.com/posts/2023-09-29_how-i-found-authentication-bypass-vulnerability---cve-2023-43154-b55dee7c876b/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*3hIZtNoj0lfZ86_b&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://images.pexels.com/photos/5483149/pexels-photo-5483149.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&#34;&gt;https://images.pexels.com/photos/5483149/pexels-photo-5483149.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Discovering a CVE was always an idea that enticed me, but I had no idea how to achieve it. Encountering the authentication bypass that I will explain in this article was both unexpected and deeply inspiring. In my preparation for the OSWE, I decided to practice identifying the exam vulnerabilities in real, open-source applications, which would both give me practice for the exam and enable me to contribute to the security community. The first of these applications is the subject of this article.&lt;/p&gt;
&lt;h2 id=&#34;prerequisite-knowledge&#34;&gt;Prerequisite Knowledge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A basic understanding of scripting languages and web applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;I decided to audit &lt;a href=&#34;https://www.opensourcecms.com/macs-cms/&#34;&gt;Macs Framework v1.14f&lt;/a&gt;. The reasoning behind this target choice is that I wanted to gain familiarity with analyzing large code bases before challenging myself with a more modern target in order to establish a robust methodology. Additionally, Macs CMS seemed like a target that was compatible with the machines used in the OSWE certification exams and the additional preparation would increase my chance of passing on the first attempt.&lt;/p&gt;
&lt;p&gt;My first attempt to launch the web application locally was unsuccessful. I was unable to install the deprecated PHP5 version on my host OS. As a solution, I decided to run the application in a Docker container. I made a &lt;code&gt;Dockerfile&lt;/code&gt; in the &lt;code&gt;Application/&lt;/code&gt; folder of the source code. I was unable to find documentation or online resources as to the process of configuring this CMS, so after some tweaking, I composed the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM php:5.6-apache  
COPY . /var/www/html/  
WORKDIR /var/www/html  
  
# add working apt sources  
RUN echo deb http://archive.debian.org/debian/ stretch main &amp;gt; /etc/apt/sources.list  
RUN echo deb http://archive.debian.org/debian-security/ stretch/updates main &amp;gt;&amp;gt; /etc/apt/sources.list  
  
# install mysql  
RUN apt-get update &amp;amp;&amp;amp; \  
 apt-get install -y mysql-server &amp;amp;&amp;amp; \  
 apt-get clean  
  
# remove symlinks on error logs  
RUN unlink /var/log/apache2/error.log &amp;amp;&amp;amp; \  
 unlink /var/log/apache2/access.log  
  
# remove .htaccess file because it isn&amp;#39;t needed and it caused issues  
RUN rm /var/www/html/.htaccess  
  
# change ownership of web files to www-data  
RUN chown www-data /var/www/html -R &amp;amp;&amp;amp; \  
 chmod 755 /var/www/html -R  
  
# start mysql and apache2  
RUN service mysql restart  
RUN service apache2 restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I then built the new image and ran it as a container named &lt;code&gt;macs-cms.&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd Macs-CMS/Application  
sudo docker build -t macs-cms .  
sudo docker run -it -exec --name macs-cms macs-cms /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After these commands were complete, I was able to visit the live CMS at &lt;code&gt;&amp;lt;http://172.17.0.2&amp;gt;.&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;finding-cve-202343154&#34;&gt;Finding CVE-2023–43154&lt;/h1&gt;
&lt;p&gt;My first encounter with the source code aimed to identify key metadata that would provide context as to which vulnerabilities to look for. By briefly browsing the project in &lt;a href=&#34;https://vscodium.com/&#34;&gt;VSCodium&lt;/a&gt;’s project explorer and running enumeration commands on the Docker container, I was able to deduce the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programming language:&lt;/strong&gt; PHP 5.6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Architecture:&lt;/strong&gt; Model-View-Controller (MVC)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Routes:&lt;/strong&gt; Organized with the following pattern: &lt;code&gt;/&amp;lt;controller_name&amp;gt;/&amp;lt;function&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database:&lt;/strong&gt; MariaDB 10.1.48&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operating System:&lt;/strong&gt; Debian GNU/Linux 9&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Informed on the technology stack, I was able to focus my research on vulnerabilities that are common in PHP and MariaDB, one of which being PHP type confusion.&lt;/p&gt;
&lt;p&gt;I proceeded with navigating the web application and monitoring my HTTP traffic through my BurpSuite web proxy while taking notes on details that I deemed interesting for future vulnerability analysis. In particular, I honed in on the authentication functionality because of its potential to be high severity.&lt;/p&gt;
&lt;p&gt;Upon my login attempt as admin, I noticed the following traffic:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Pkekiat_JJKGXIKOXuDGpQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Intercepted login request&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The URI, excluding the prefix &lt;code&gt;index.php&lt;/code&gt;, was &lt;code&gt;/main/cms/login&lt;/code&gt;. My interpretation of this route is that the &lt;code&gt;mainController&lt;/code&gt; is initially called, which loads to the &lt;code&gt;CMS&lt;/code&gt; plugin with &lt;code&gt;$this-&amp;gt;cms = $this-&amp;gt;loadPlugin(&#39;CMS&#39;);&lt;/code&gt;. Then, the &lt;code&gt;login()&lt;/code&gt; function is invoked within the CMS plugin with access to the HTTP POST data, which is globally accessible.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*YiIswaTUkWAQg-oNymcuAg.png&#34; alt=&#34;&#34;  /&gt;

I visit the &lt;code&gt;login()&lt;/code&gt; function within the CMS plugin located at &lt;code&gt;plugins/CMS/controllers/CMS.php&lt;/code&gt; to discover that in order for the user to log in successfully, they must already be logged in as admin or the method &lt;code&gt;isValidLogin()&lt;/code&gt; must return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*cf13zlJVAiQBLn4ZHPGXxg.png&#34; alt=&#34;&#34;  /&gt;

Since the return value of the function shown above must the &lt;code&gt;true&lt;/code&gt; and the value returned is stored in the variable &lt;code&gt;$loggedIn&lt;/code&gt;, I annotated the occurrences of &lt;code&gt;$loggedIn&lt;/code&gt; to highlight the execution flow that must be triggered in order to achieve the intended return value. From here, I began to work backwards.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;$loggedIn&lt;/code&gt; to be set to &lt;code&gt;true&lt;/code&gt;, a conditional statement must be met. Luckily, I noticed that a loose comparison was being made for both of the comparisons that can lead to the value being set to &lt;code&gt;true&lt;/code&gt;. This article will not be covering PHP loose comparison vulnerabilities in-depth, however, I will give a high-level overview of the relevant details of loose comparison and more detail can be found at &lt;a href=&#34;https://xavibel.com/2020/01/22/usebb-forum-php-type-juggling-vulnerability/&#34;&gt;this&lt;/a&gt; resource.&lt;/p&gt;
&lt;h2 id=&#34;loose-comparison-logic&#34;&gt;Loose Comparison Logic&lt;/h2&gt;
&lt;p&gt;In PHP, loose comparisons refer to the use of two equal signs (&lt;code&gt;==&lt;/code&gt;). This differs from a strict comparison (&lt;code&gt;===&lt;/code&gt;) in the way that two operands are compared. A loose comparison will attempt to interpret the operands and, if deemed applicable, convert them to a data type that allows for improved compatibility between them.&lt;/p&gt;
&lt;p&gt;The following example illustrates the difference between a strict and loose comparison in PHP. I make two comparisons between the string &lt;code&gt;“0e3264578”&lt;/code&gt; and the integer &lt;code&gt;0&lt;/code&gt;. The first is a loose comparison and the second is strict. The result of the comparison between the string and integer then outputs whether the comparison returned &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false.&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php  
if (&amp;#34;0e3264578&amp;#34; == 0) {  
 echo &amp;#34;Loose comparison returns True\n&amp;#34;;  
} else {  
 echo &amp;#34;Loose comparison returns False\n&amp;#34;;  
};  
  
if (&amp;#34;0e3264578&amp;#34; === 0) {  
 echo &amp;#34;Strict comparison returns True&amp;#34;;  
} else {  
 echo &amp;#34;Strict comparison returns False&amp;#34;;  
};  
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I save the above program as &lt;code&gt;test-comparison.php&lt;/code&gt; and execute the code to discover that the first, loose comparison returned &lt;code&gt;true&lt;/code&gt; and the second, strict comparison returned &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hSnIWCdKDG--lBGveEolvQ.png&#34; alt=&#34;&#34;  /&gt;

To understand why this is the case, it is important to understand what PHP is doing during a loose comparison like the one in this example. An integer followed by the letter &lt;code&gt;e&lt;/code&gt; and additional digits is interpreted by PHP as an integer raised to an exponential power. In this case, &lt;code&gt;“0e3264578”&lt;/code&gt; was interpreted as 0 raised to the &lt;code&gt;3264578&lt;/code&gt; power. Of course, 0³²⁶⁴⁵⁷⁸ is equal to 0, hence the return value of &lt;code&gt;true&lt;/code&gt; when comparing &lt;code&gt;“0e3264578”&lt;/code&gt; to &lt;code&gt;0.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This did not return &lt;code&gt;true&lt;/code&gt; in the strict comparison because PHP was not interpreting the string as an integer like it was in the loose comparison. It took the operands for their literal value, which was a string and an integer of different values, which are not the same.&lt;/p&gt;
&lt;p&gt;This can be abused in the context of a login form where two password hashes that are both 0-like such as “0e123” and “0e345” can be loosely compared and result in a &lt;code&gt;true&lt;/code&gt; outcome since 0¹²³ and 0³⁴⁵ both equal the same thing: 0. As a result, PHP would signal that the hashes are equivalent, allowing for a successful login, when they are not.&lt;/p&gt;
&lt;h2 id=&#34;formulating-theexploit&#34;&gt;Formulating the Exploit&lt;/h2&gt;
&lt;p&gt;To exploit this vulnerability, I needed to fully understand what the input in &lt;code&gt;isValidLogin()&lt;/code&gt; consists of. It is evident in the &lt;code&gt;login()&lt;/code&gt; function that there is manipulation done on the received password before it is passed to the &lt;code&gt;isValidLogin()&lt;/code&gt; function for comparison with previously stored credentials.&lt;/p&gt;
&lt;p&gt;Revisiting the initial function call, it appears that the user-controlled parameter &lt;code&gt;password&lt;/code&gt; is being passed through an additional method called &lt;code&gt;encrypt()&lt;/code&gt; before being passed to &lt;code&gt;isValidLogin().&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$this-&amp;gt;isValidLogin(Post::getByKey(&amp;#39;username&amp;#39;), $this-&amp;gt;encrypt(Post::getByKey(&amp;#39;password&amp;#39;)) )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Visiting this function reveals that it simply returns an unsalted MD5 hash of the parameter passed into it, in this case, &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*a04RNWeykCU4OPm-t3CWSQ.png&#34; alt=&#34;&#34;  /&gt;

I did more digging to uncover that the password saved in the database was also hashed. This means that in the &lt;code&gt;isValidLogin()&lt;/code&gt; function, the password comparison is made between two MD5 hashes like the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$account[&amp;#39;password&amp;#39;] == $password // -&amp;gt; md5(user\_inputted\_password) == stored\_md5\_password\_hash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As explained before, in PHP, “0e123..” will be interpreted as 0 in a loose comparison. Hashes that follow this format (&lt;code&gt;0e&lt;/code&gt; followed by digits) are known as magic hashes. Theoretically, if we were to compare two magic hashes together, the result would be &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;$loggedIn&lt;/code&gt; variable would subsequently be set to true and returned to the &lt;code&gt;login()&lt;/code&gt; function resulting in a success authentication.&lt;/p&gt;
&lt;p&gt;I will first verify this with a sample PHP script that compares two different zero-like strings.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php  
if (&amp;#34;0e123123123&amp;#34; == &amp;#34;0e456456456&amp;#34;) {  
 echo &amp;#34;Comparison returns True\n&amp;#34;;  
} else {  
 echo &amp;#34;Comparison returns False\n&amp;#34;;  
};  
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected, executing the script results in a &lt;code&gt;true&lt;/code&gt; comparison.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*FDZGbf2o3aYsiVJnTI0kkQ.png&#34; alt=&#34;&#34;  /&gt;

Now, all that is left to do is reproduce this in the CMS application. Using my &lt;a href=&#34;https://github.com/spaze/hashes/blob/master/md5.md&#34;&gt;cheat sheet of magic hashes&lt;/a&gt;, I identify two magic hashes to use:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fh70QgaGIfYM:0e564472166873750526572156675923  
hello10672785079:0e859173238273273455651853557908
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I create an test user called &lt;code&gt;test-admin&lt;/code&gt; with the first password &lt;code&gt;fh70QgaGIfYM&lt;/code&gt;. The intercepted request can be seen in BurpSuite on the right.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*dXa4uMZw2kGSoG3mqvgIeg.png&#34; alt=&#34;&#34;  /&gt;

Finally, for the moment of truth, I log out of my admin account and try to log in with the second password &lt;code&gt;hello10672785079&lt;/code&gt;. The resulting request is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*caUiDSInsQ6owr2iKErNVQ.png&#34; alt=&#34;&#34;  /&gt;

The intercepted response of my login attempt returns a status code of 200 and redirects me to the home page, indicating a successful login.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*rGwiYW55r2P_iAi36kXF7w.png&#34; alt=&#34;&#34;  /&gt;

With my new administrator privileges, I can change configuration information about the site including the &lt;strong&gt;password of the other administrator&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*H-JRAsYSEblniMQgPYm9Ew.png&#34; alt=&#34;&#34;  /&gt;

Conclusion&lt;/h1&gt;
&lt;p&gt;I was able to log in to an administrator account using one of many incorrect passwords that work to bypass authentication. This opened the door to potential breaches in confidentiality, integrity, and availability.&lt;/p&gt;
&lt;p&gt;As stated in my original PoC, there are limitations to this since the admin password hash must already be a 0-like string in PHP and the username must be previously known, 0-like, or easy to guess. The username can be enumerated on the platform through other means, so this is not as big of an issue.&lt;/p&gt;
&lt;p&gt;Thank you to everyone who read this far and I hope that you found value in this article!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
